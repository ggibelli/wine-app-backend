/* tslint:disable */
/* eslint-disable */

// ######################################## THIS FILE WAS GENERATED BY MONGOOSE-TSGEN ######################################## //

// NOTE: ANY CHANGES MADE WILL BE OVERWRITTEN ON SUBSEQUENT EXECUTIONS OF MONGOOSE-TSGEN.

import mongoose from 'mongoose';
import { TypeAd, TypeProduct, Menzione, MetodoProduttivo, DenomZona, EspressioneComunitaria } from '../generated/graphql';

/**
 * Lean version of AdDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `AdDocument.toObject()`. To avoid conflicts with model names, use the type alias `AdObject`.
 * ```
 * const adObject = ad.toObject();
 * ```
 */
export type Ad = {
  postedBy: User['_id'] | User;
  typeAd: TypeAd;
  typeProduct: TypeProduct
  wineName?: string;
  wine?: Wine['_id'] | Wine;
  sottoZona?: string;
  menzione?: Menzione;
  metodoProduttivo?: MetodoProduttivo;
  vineyardName?: string;
  vineyard?: Vineyard['_id'] | Vineyard;
  abv?: number;
  harvest: number;
  priceFrom: number;
  priceTo: number;
  litersFrom?: number;
  litersTo?: number;
  kgFrom?: number;
  kgTo?: number;
  negotiations?: (Negotiation['_id'] | Negotiation)[];
  viewedBy?: (User['_id'] | User)[];
  savedBy?: (User['_id'] | User)[];
  content?: string;
  isActive?: boolean;
  needsFollowUp?: boolean;
  datePosted: number;
  _id: mongoose.Types.ObjectId;
};

/**
 * Lean version of AdDocument (type alias of `Ad`)
 *
 * Use this type alias to avoid conflicts with model names:
 * ```
 * import { Ad } from "../models"
 * import { AdObject } from "../interfaces/mongoose.gen.ts"
 *
 * const adObject: AdObject = ad.toObject();
 * ```
 */
export type AdObject = Ad;

/**
 * Mongoose Query types
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Ad = mongoose.model<AdDocument, AdModel>("Ad", AdSchema);
 * ```
 */
export type AdQueries = {};

export type AdMethods = {};

export type AdStatics = {};

/**
 * Mongoose Model type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Ad = mongoose.model<AdDocument, AdModel>("Ad", AdSchema);
 * ```
 */
export type AdModel = mongoose.Model<AdDocument, AdQueries> & AdStatics;

/**
 * Mongoose Schema type
 *
 * Assign this type to new Ad schema instances:
 * ```
 * const AdSchema: AdSchema = new mongoose.Schema({ ... })
 * ```
 */
export type AdSchema = mongoose.Schema<AdDocument, AdModel>;

/**
 * Mongoose Document type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Ad = mongoose.model<AdDocument, AdModel>("Ad", AdSchema);
 * ```
 */
export type AdDocument = mongoose.Document<mongoose.Types.ObjectId, AdQueries> &
  AdMethods & {
    postedBy: UserDocument['_id'] | UserDocument;
    typeAd: TypeAd;
    typeProduct: TypeProduct;
    wineName?: string;
    wine?: WineDocument['_id'] | WineDocument;
    sottoZona?: string;
    menzione?: Menzione;
    metodoProduttivo?:
      MetodoProduttivo;
    vineyardName?: string;
    vineyard?: VineyardDocument['_id'] | VineyardDocument;
    abv?: number;
    harvest: number;
    priceFrom: number;
    priceTo: number;
    litersFrom?: number;
    litersTo?: number;
    kgFrom?: number;
    kgTo?: number;
    negotiations?: mongoose.Types.Array<
      NegotiationDocument['_id'] | NegotiationDocument
    >;
    viewedBy?: mongoose.Types.Array<UserDocument['_id'] | UserDocument>;
    savedBy?: mongoose.Types.Array<UserDocument['_id'] | UserDocument>;
    content?: string;
    isActive?: boolean;
    needsFollowUp?: boolean;
    datePosted?: number;
    _id: mongoose.Types.ObjectId;
  };

/**
 * Lean version of MessageDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `MessageDocument.toObject()`. To avoid conflicts with model names, use the type alias `MessageObject`.
 * ```
 * const messageObject = message.toObject();
 * ```
 */
export type Message = {
  negotiation: Negotiation['_id'] | Negotiation;
  content: string;
  sentBy: User['_id'] | User;
  sentTo: User['_id'] | User;
  dateSent?: number;
  isViewed?: boolean;
  _id: mongoose.Types.ObjectId;
};

/**
 * Lean version of MessageDocument (type alias of `Message`)
 *
 * Use this type alias to avoid conflicts with model names:
 * ```
 * import { Message } from "../models"
 * import { MessageObject } from "../interfaces/mongoose.gen.ts"
 *
 * const messageObject: MessageObject = message.toObject();
 * ```
 */
export type MessageObject = Message;

/**
 * Mongoose Query types
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Message = mongoose.model<MessageDocument, MessageModel>("Message", MessageSchema);
 * ```
 */
export type MessageQueries = {};

export type MessageMethods = {};

export type MessageStatics = {};

/**
 * Mongoose Model type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Message = mongoose.model<MessageDocument, MessageModel>("Message", MessageSchema);
 * ```
 */
export type MessageModel = mongoose.Model<MessageDocument, MessageQueries> &
  MessageStatics;

/**
 * Mongoose Schema type
 *
 * Assign this type to new Message schema instances:
 * ```
 * const MessageSchema: MessageSchema = new mongoose.Schema({ ... })
 * ```
 */
export type MessageSchema = mongoose.Schema<MessageDocument, MessageModel>;

/**
 * Mongoose Document type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Message = mongoose.model<MessageDocument, MessageModel>("Message", MessageSchema);
 * ```
 */
export type MessageDocument = mongoose.Document<
  mongoose.Types.ObjectId,
  MessageQueries
> &
  MessageMethods & {
    negotiation: NegotiationDocument['_id'] | NegotiationDocument;
    content: string;
    sentBy: UserDocument['_id'] | UserDocument;
    sentTo: UserDocument['_id'] | UserDocument;
    dateSent?: number;
    isViewed?: boolean;
    _id: mongoose.Types.ObjectId;
  };

/**
 * Lean version of NegotiationDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `NegotiationDocument.toObject()`. To avoid conflicts with model names, use the type alias `NegotiationObject`.
 * ```
 * const negotiationObject = negotiation.toObject();
 * ```
 */
export type Negotiation = {
  createdBy: User['_id'] | User;
  type: 'SELL' | 'BUY';
  ad: Ad['_id'] | Ad;
  forUserAd: User['_id'] | User;
  messages: (Message['_id'] | Message)[];
  isConcluded?: boolean;
  dateCreated?: number;
  dateConcluded?: Date;
  _id: mongoose.Types.ObjectId;
};

/**
 * Lean version of NegotiationDocument (type alias of `Negotiation`)
 *
 * Use this type alias to avoid conflicts with model names:
 * ```
 * import { Negotiation } from "../models"
 * import { NegotiationObject } from "../interfaces/mongoose.gen.ts"
 *
 * const negotiationObject: NegotiationObject = negotiation.toObject();
 * ```
 */
export type NegotiationObject = Negotiation;

/**
 * Mongoose Query types
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Negotiation = mongoose.model<NegotiationDocument, NegotiationModel>("Negotiation", NegotiationSchema);
 * ```
 */
export type NegotiationQueries = {};

export type NegotiationMethods = {};

export type NegotiationStatics = {};

/**
 * Mongoose Model type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Negotiation = mongoose.model<NegotiationDocument, NegotiationModel>("Negotiation", NegotiationSchema);
 * ```
 */
export type NegotiationModel = mongoose.Model<
  NegotiationDocument,
  NegotiationQueries
> &
  NegotiationStatics;

/**
 * Mongoose Schema type
 *
 * Assign this type to new Negotiation schema instances:
 * ```
 * const NegotiationSchema: NegotiationSchema = new mongoose.Schema({ ... })
 * ```
 */
export type NegotiationSchema = mongoose.Schema<
  NegotiationDocument,
  NegotiationModel
>;

/**
 * Mongoose Document type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Negotiation = mongoose.model<NegotiationDocument, NegotiationModel>("Negotiation", NegotiationSchema);
 * ```
 */
export type NegotiationDocument = mongoose.Document<
  mongoose.Types.ObjectId,
  NegotiationQueries
> &
  NegotiationMethods & {
    createdBy: UserDocument['_id'] | UserDocument;
    type: 'SELL' | 'BUY';
    ad: AdDocument['_id'] | AdDocument;
    forUserAd: UserDocument['_id'] | UserDocument;
    messages: mongoose.Types.Array<MessageDocument['_id'] | MessageDocument>;
    isConcluded?: boolean;
    dateCreated?: number;
    dateConcluded?: Date;
    _id: mongoose.Types.ObjectId;
  };

/**
 * Lean version of ReviewDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `ReviewDocument.toObject()`. To avoid conflicts with model names, use the type alias `ReviewObject`.
 * ```
 * const reviewObject = review.toObject();
 * ```
 */
export type Review = {
  createdBy: User['_id'] | User;
  negotiation: Negotiation['_id'] | Negotiation;
  forUser: User['_id'] | User;
  dateCreated?: number;
  content?: string;
  rating: number;
  type?: 'SELL' | 'BUY';
  _id: mongoose.Types.ObjectId;
};

/**
 * Lean version of ReviewDocument (type alias of `Review`)
 *
 * Use this type alias to avoid conflicts with model names:
 * ```
 * import { Review } from "../models"
 * import { ReviewObject } from "../interfaces/mongoose.gen.ts"
 *
 * const reviewObject: ReviewObject = review.toObject();
 * ```
 */
export type ReviewObject = Review;

/**
 * Mongoose Query types
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Review = mongoose.model<ReviewDocument, ReviewModel>("Review", ReviewSchema);
 * ```
 */
export type ReviewQueries = {};

export type ReviewMethods = {};

export type ReviewStatics = {};

/**
 * Mongoose Model type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Review = mongoose.model<ReviewDocument, ReviewModel>("Review", ReviewSchema);
 * ```
 */
export type ReviewModel = mongoose.Model<ReviewDocument, ReviewQueries> &
  ReviewStatics;

/**
 * Mongoose Schema type
 *
 * Assign this type to new Review schema instances:
 * ```
 * const ReviewSchema: ReviewSchema = new mongoose.Schema({ ... })
 * ```
 */
export type ReviewSchema = mongoose.Schema<ReviewDocument, ReviewModel>;

/**
 * Mongoose Document type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Review = mongoose.model<ReviewDocument, ReviewModel>("Review", ReviewSchema);
 * ```
 */
export type ReviewDocument = mongoose.Document<
  mongoose.Types.ObjectId,
  ReviewQueries
> &
  ReviewMethods & {
    createdBy: UserDocument['_id'] | UserDocument;
    negotiation: NegotiationDocument['_id'] | NegotiationDocument;
    forUser: UserDocument['_id'] | UserDocument;
    dateCreated?: number;
    content?: string;
    rating: number;
    type?: 'SELL' | 'BUY';
    _id: mongoose.Types.ObjectId;
  };

/**
 * Lean version of UserDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `UserDocument.toObject()`. To avoid conflicts with model names, use the type alias `UserObject`.
 * ```
 * const userObject = user.toObject();
 * ```
 */
export type User = {
  email: string;
  phoneNumber: string;
  firstName: string;
  lastName: string;
  password: string;
  pIva: string;
  address: {
    via?: string;
    comune: string;
  };
  coordinates?: {
    latitude: number;
    longitude: number;
  };
  isVerified: boolean;
  isPremium?: boolean;
  isAdmin?: boolean;
  hideContact?: boolean;
  ads?: (Ad['_id'] | Ad)[];
  savedAds?: (Ad['_id'] | Ad)[];
  messages?: (Message['_id'] | Message)[];
  negotiations?: (Negotiation['_id'] | Negotiation)[];
  reviews?: (Review['_id'] | Review)[];
  adsRemaining?: number;
  dateCreated?: number;
  _id: mongoose.Types.ObjectId;
};

/**
 * Lean version of UserDocument (type alias of `User`)
 *
 * Use this type alias to avoid conflicts with model names:
 * ```
 * import { User } from "../models"
 * import { UserObject } from "../interfaces/mongoose.gen.ts"
 *
 * const userObject: UserObject = user.toObject();
 * ```
 */
export type UserObject = User;

/**
 * Mongoose Query types
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const User = mongoose.model<UserDocument, UserModel>("User", UserSchema);
 * ```
 */
export type UserQueries = {};

export type UserMethods = {
  validatePassword: (this: UserDocument, ...args: string[]) => Promise<boolean>;
};

export type UserStatics = {};

/**
 * Mongoose Model type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const User = mongoose.model<UserDocument, UserModel>("User", UserSchema);
 * ```
 */
export type UserModel = mongoose.Model<UserDocument, UserQueries> & UserStatics;

/**
 * Mongoose Schema type
 *
 * Assign this type to new User schema instances:
 * ```
 * const UserSchema: UserSchema = new mongoose.Schema({ ... })
 * ```
 */
export type UserSchema = mongoose.Schema<UserDocument, UserModel>;

/**
 * Mongoose Document type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const User = mongoose.model<UserDocument, UserModel>("User", UserSchema);
 * ```
 */
export type UserDocument = mongoose.Document<
  mongoose.Types.ObjectId,
  UserQueries
> &
  UserMethods & {
    email: string;
    phoneNumber: string;
    firstName: string;
    lastName: string;
    password: string;
    pIva: string;
    address: {
      via?: string;
      comune: string;
    };
    coordinates?: {
      latitude: number;
      longitude: number;
    };
    isVerified: boolean;
    isPremium?: boolean;
    isAdmin?: boolean;
    hideContact?: boolean;
    ads?: mongoose.Types.Array<AdDocument['_id'] | AdDocument>;
    savedAds?: mongoose.Types.Array<AdDocument['_id'] | AdDocument>;
    messages?: mongoose.Types.Array<MessageDocument['_id'] | MessageDocument>;
    negotiations?: mongoose.Types.Array<
      NegotiationDocument['_id'] | NegotiationDocument
    >;
    reviews?: mongoose.Types.Array<ReviewDocument['_id'] | ReviewDocument>;
    adsRemaining?: number;
    dateCreated?: number;
    _id: mongoose.Types.ObjectId;
  };

/**
 * Lean version of VineyardDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `VineyardDocument.toObject()`. To avoid conflicts with model names, use the type alias `VineyardObject`.
 * ```
 * const vineyardObject = vineyard.toObject();
 * ```
 */
export type Vineyard = {
  name: string;
  colore?: 'BIANCA' | 'ROSSA';
  _id: mongoose.Types.ObjectId;
};

/**
 * Lean version of VineyardDocument (type alias of `Vineyard`)
 *
 * Use this type alias to avoid conflicts with model names:
 * ```
 * import { Vineyard } from "../models"
 * import { VineyardObject } from "../interfaces/mongoose.gen.ts"
 *
 * const vineyardObject: VineyardObject = vineyard.toObject();
 * ```
 */
export type VineyardObject = Vineyard;

/**
 * Mongoose Query types
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Vineyard = mongoose.model<VineyardDocument, VineyardModel>("Vineyard", VineyardSchema);
 * ```
 */
export type VineyardQueries = {};

export type VineyardMethods = {};

export type VineyardStatics = {};

/**
 * Mongoose Model type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Vineyard = mongoose.model<VineyardDocument, VineyardModel>("Vineyard", VineyardSchema);
 * ```
 */
export type VineyardModel = mongoose.Model<VineyardDocument, VineyardQueries> &
  VineyardStatics;

/**
 * Mongoose Schema type
 *
 * Assign this type to new Vineyard schema instances:
 * ```
 * const VineyardSchema: VineyardSchema = new mongoose.Schema({ ... })
 * ```
 */
export type VineyardSchema = mongoose.Schema<VineyardDocument, VineyardModel>;

/**
 * Mongoose Document type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Vineyard = mongoose.model<VineyardDocument, VineyardModel>("Vineyard", VineyardSchema);
 * ```
 */
export type VineyardDocument = mongoose.Document<
  mongoose.Types.ObjectId,
  VineyardQueries
> &
  VineyardMethods & {
    name: string;
    colore?: 'BIANCA' | 'ROSSA';
    _id: mongoose.Types.ObjectId;
  };

/**
 * Lean version of WineDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `WineDocument.toObject()`. To avoid conflicts with model names, use the type alias `WineObject`.
 * ```
 * const wineObject = wine.toObject();
 * ```
 */
export type Wine = {
  _id: mongoose.Types.ObjectId;
  denominazioneVino: string;
  tipoVino?: string;
  espressioneComunitaria?: EspressioneComunitaria;
  denominazioneZona?:
    DenomZona
  vitigni: string[];
};

/**
 * Lean version of WineDocument (type alias of `Wine`)
 *
 * Use this type alias to avoid conflicts with model names:
 * ```
 * import { Wine } from "../models"
 * import { WineObject } from "../interfaces/mongoose.gen.ts"
 *
 * const wineObject: WineObject = wine.toObject();
 * ```
 */
export type WineObject = Wine;

/**
 * Mongoose Query types
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Wine = mongoose.model<WineDocument, WineModel>("Wine", WineSchema);
 * ```
 */
export type WineQueries = {};

export type WineMethods = {};

export type WineStatics = {};

/**
 * Mongoose Model type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Wine = mongoose.model<WineDocument, WineModel>("Wine", WineSchema);
 * ```
 */
export type WineModel = mongoose.Model<WineDocument, WineQueries> & WineStatics;

/**
 * Mongoose Schema type
 *
 * Assign this type to new Wine schema instances:
 * ```
 * const WineSchema: WineSchema = new mongoose.Schema({ ... })
 * ```
 */
export type WineSchema = mongoose.Schema<WineDocument, WineModel>;

/**
 * Mongoose Document type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Wine = mongoose.model<WineDocument, WineModel>("Wine", WineSchema);
 * ```
 */
export type WineDocument = mongoose.Document<
  mongoose.Types.ObjectId,
  WineQueries
> &
  WineMethods & {
    _id: mongoose.Types.ObjectId;
    denominazioneVino: string;
    tipoVino?: string;
    espressioneComunitaria?: EspressioneComunitaria;
    denominazioneZona?:
      DenomZona;
    vitigni: mongoose.Types.Array<string>;
  };

/**
 * Populate properties on a document type:
 * ```
 * import { PopulatedDocument } from "../interfaces/mongoose.gen.ts"
 *
 * function example(user: PopulatedDocument<UserDocument, "bestFriend">) {
 *   console.log(user.bestFriend._id) // typescript knows this is populated
 * }
 * ```
 */
export type PopulatedDocument<
  DocType extends mongoose.Document,
  T,
> = T extends keyof DocType
  ? Omit<DocType, T> &
      { [ref in T]: Exclude<DocType[T], mongoose.Types.ObjectId> }
  : DocType;

/**
 * Check if a property on a document is populated:
 * ```
 * import { IsPopulated } from "../interfaces/mongoose.gen.ts"
 *
 * if (IsPopulated<UserDocument["bestFriend"]>) { ... }
 * ```
 */
export function IsPopulated<T>(doc: T | mongoose.Types.ObjectId): doc is T {
  return doc instanceof mongoose.Document;
}

/**
 * Helper types used by the populate overloads
 */
type Unarray<T> = T extends Array<infer U> ? U : T;
type Modify<T, R> = Omit<T, keyof R> & R;

/**
 * Augment mongoose with Query.populate overloads
 */
declare module 'mongoose' {
  interface Query<ResultType, DocType extends Document, THelpers = {}> {
    populate<T extends keyof DocType>(
      path: T,
      select?: string | any,
      model?: string | Model<any, THelpers>,
      match?: any,
    ): Query<
      ResultType extends Array<DocType>
        ? Array<PopulatedDocument<Unarray<ResultType>, T>>
        : ResultType extends DocType
        ? PopulatedDocument<Unarray<ResultType>, T>
        : ResultType,
      DocType,
      THelpers
    > &
      THelpers;

    populate<T extends keyof DocType>(
      options: Modify<PopulateOptions, { path: T }> | Array<PopulateOptions>,
    ): Query<
      ResultType extends Array<DocType>
        ? Array<PopulatedDocument<Unarray<ResultType>, T>>
        : ResultType extends DocType
        ? PopulatedDocument<Unarray<ResultType>, T>
        : ResultType,
      DocType,
      THelpers
    > &
      THelpers;
  }
}
