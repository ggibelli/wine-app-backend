{"version":3,"sources":["components/BackButton.tsx","components/MessageListEl.tsx","components/NotificationModal/index.tsx","pages/Messages.tsx"],"names":["BackButton","aria-label","color","size","startIcon","onClick","navigate","MessageListEl","messages","id","me","myInfo","messagesForMe","filter","message","sentTo","_id","messagesFromMe","sentBy","unreadMessages","isViewed","length","recipient","firstName","ad","negotiation","wineName","ListItem","divider","button","component","React","itemProps","ref","to","ListItemIcon","Badge","badgeContent","ListItemText","primary","NotificationModal","open","handleClose","content","loading","Dialog","onClose","aria-labelledby","DialogTitle","DialogContent","Loading","DialogContentText","DialogActions","Button","autoFocus","TabPanel","props","children","value","index","other","role","hidden","Box","p","a11yProps","Messages","useMessagesQuery","fetchPolicy","onError","error","notification","type","data","useGetMessageLazyQuery","lazyMessage","result","setOpen","classes","useStyles","notifications","unreadNotificationsBadge","n","messagesForNegotiationObj","_","groupBy","messagesForNegotiation","Object","entries","sort","a","b","localeCompare","theme","useTheme","setValue","unreadBadge","map","mess","flat","m","Container","maxWidth","CssBaseline","className","paper","AppBar","position","Tabs","onChange","event","newValue","style","indicatorColor","textColor","variant","Tab","icon","label","axis","direction","onChangeIndex","dir","List","el","variables"],"mappings":"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","file":"static/js/16.db467762.chunk.js","sourcesContent":["import Button from '@material-ui/core/Button';\nimport * as React from 'react';\n// import { searchedWine } from '../cache';\nimport { navigate } from '@reach/router';\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\n// import { TypeAd } from '../generated/graphql';\n\nexport const BackButton: React.FC = () => {\n  // // const searchedWineCache = searchedWine();\n  // // const { pathname } = useLocation();\n  // // if (searchedWineCache?.typeAd === TypeAd.Buy && pathname !== '/buy') {\n  // //   return (\n  // //     <Button\n  // //       component={Link}\n  // //       to='/buy'\n  // //       //variant='contained'\n  // //       color='primary'\n  // //       size='large'\n  // //       startIcon={<ArrowBackIosIcon />}\n  // //     >\n  // //       Compra\n  // //     </Button>\n  // //   );\n  // // } else if (\n  // //   searchedWineCache?.typeAd === TypeAd.Sell &&\n  // //   pathname !== '/sell'\n  // // ) {\n  //   return (\n  //     <Button\n  //       component={Link}\n  //       to='/sell'\n  //       //variant='contained'\n  //       color='primary'\n  //       size='large'\n  //       startIcon={<ArrowBackIosIcon />}\n  //     >\n  //       Vendi\n  //     </Button>\n  //   );\n  // } else\n  return (\n    <Button\n      aria-label='previous-page'\n      color='primary'\n      size='large'\n      startIcon={<ArrowBackIosIcon />}\n      onClick={() => navigate(-1)}\n    >\n      Torna indietro\n    </Button>\n  );\n};\n","/* eslint-disable @typescript-eslint/restrict-template-expressions */\nimport * as React from 'react';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport MailOutlineIcon from '@material-ui/icons/MailOutline';\nimport Badge from '@material-ui/core/Badge';\nimport { Link as RouterLink } from '@reach/router';\nimport { myInfo } from '../cache';\nimport { MessagesQuery } from '../generated/graphql';\n\nexport const MessageListEl: React.FC<{\n  id: string;\n  messages: MessagesQuery['messages'];\n}> = ({ messages, id }) => {\n  const me = myInfo();\n  if (!messages) return null;\n  const messagesForMe = messages.filter(\n    (message) => message.sentTo._id === me?._id\n  );\n  const messagesFromMe = messages.filter(\n    (message) => message.sentBy._id === me?._id\n  );\n  const unreadMessages = messagesForMe?.filter((message) => !message.isViewed)\n    .length;\n  const recipient = messagesForMe.length\n    ? messagesForMe[0].sentBy.firstName\n    : messagesFromMe[0].sentTo.firstName;\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  const ad = messagesForMe.length\n    ? //@ts-expect-error I know is a adWine\n      (messagesForMe[0].negotiation.ad.wineName as string)\n    : //@ts-expect-error I know is a adWine\n      (messagesFromMe[0].negotiation.ad.wineName as string);\n\n  return (\n    <ListItem\n      divider\n      button\n      // eslint-disable-next-line react/display-name\n      component={React.forwardRef((itemProps, ref) => (\n        //ts ignore because followed the mui docs\n\n        <RouterLink\n          to={`/messaggi/${id}`}\n          // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n          //@ts-ignore\n          ref={ref}\n          {...itemProps}\n        />\n      ))}\n    >\n      <ListItemIcon>\n        <Badge badgeContent={unreadMessages} color='primary'>\n          <MailOutlineIcon />\n        </Badge>\n      </ListItemIcon>\n      <ListItemText primary={`Cantina ${recipient} - ${ad}`} />\n    </ListItem>\n  );\n};\n","import * as React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { Loading } from '../Loading';\n\nexport const NotificationModal: React.FC<{\n  open: boolean;\n  handleClose: () => void;\n  content?: string;\n  loading: boolean;\n}> = ({ open, handleClose, content, loading }) => {\n  return (\n    <div>\n      <Dialog\n        open={open}\n        onClose={handleClose}\n        aria-labelledby='responsive-dialog-title'\n      >\n        <DialogTitle id='responsive-dialog-title'>{'Notifica app'}</DialogTitle>\n        <DialogContent>\n          {loading ? (\n            <Loading />\n          ) : (\n            <DialogContentText color='primary'>{content}</DialogContentText>\n          )}\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={handleClose} color='primary'>\n            Chiudi\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n};\n","/* eslint-disable @typescript-eslint/no-unsafe-assignment */\n/* eslint-disable @typescript-eslint/restrict-template-expressions */\nimport * as React from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Container from '@material-ui/core/Container';\nimport List from '@material-ui/core/List';\nimport SwipeableViews from 'react-swipeable-views';\nimport { useTheme } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport NotificationsNoneOutlinedIcon from '@material-ui/icons/NotificationsNoneOutlined';\nimport ChatBubbleOutlineIcon from '@material-ui/icons/ChatBubbleOutline';\nimport { useMessagesQuery, useGetMessageLazyQuery } from '../generated/graphql';\nimport _ from 'lodash';\nimport { MessageListEl } from '../components/MessageListEl';\nimport { myInfo, notification } from '../cache';\nimport { RouteComponentProps } from '@reach/router';\nimport { BackButton } from '../components/BackButton';\nimport { Loading } from '../components/Loading';\nimport { Box, ListItem, ListItemText } from '@material-ui/core';\nimport Badge from '@material-ui/core/Badge';\nimport { useStyles } from '../utils/styleHook';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport { NotificationModal } from '../components/NotificationModal';\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  dir?: string;\n  index: any;\n  value: any;\n}\n\nfunction TabPanel(props: TabPanelProps) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role='tabpanel'\n      hidden={value !== index}\n      id={`full-width-tabpanel-${index}`}\n      aria-labelledby={`full-width-tab-${index}`}\n      {...other}\n    >\n      {value === index && <Box p={3}>{children}</Box>}\n    </div>\n  );\n}\n\nfunction a11yProps(index: any) {\n  return {\n    id: `full-width-tab-${index}`,\n    'aria-controls': `full-width-tabpanel-${index}`,\n  };\n}\n\nconst Messages: React.FC<RouteComponentProps> = () => {\n  const { data, loading, error } = useMessagesQuery({\n    fetchPolicy: 'network-only',\n    onError: (error) => {\n      notification({\n        type: 'error',\n        message: error.message,\n      });\n    },\n  });\n  const [lazyMessage, result] = useGetMessageLazyQuery({\n    onError: (error) => {\n      notification({\n        type: 'error',\n        message: error.message,\n      });\n    },\n  });\n  const [open, setOpen] = React.useState(false);\n  const me = myInfo();\n  const classes = useStyles();\n  const notifications = data?.messages?.filter(\n    (message) => message.sentBy.firstName === 'Amministratore'\n  );\n  const unreadNotificationsBadge = notifications?.filter((n) => !n.isViewed)\n    .length;\n  const messages = data?.messages?.filter(\n    (message) => message.sentBy.firstName !== 'Amministratore'\n  );\n  const messagesForNegotiationObj = _.groupBy(\n    messages,\n    (message) => message.negotiation._id\n  );\n  const messagesForNegotiation = Object.entries(\n    messagesForNegotiationObj\n  ).sort((a, b) => a[0].localeCompare(b[0]));\n  const theme = useTheme();\n  const [value, setValue] = React.useState(0);\n\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\n    setValue(newValue);\n  };\n\n  const handleChangeIndex = (index: number) => {\n    setValue(index);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const messNumberRaw = messagesForNegotiation.map((mess) => mess[1]).flat();\n  const unreadBadge = messNumberRaw.filter(\n    (m) => !m.isViewed && m.sentBy._id !== me?._id\n  ).length;\n\n  const handleClickNotification = (id: string) => {\n    lazyMessage({ variables: { id: id } });\n    setOpen(true);\n  };\n\n  if (loading) {\n    return <Loading />;\n  }\n  if (error) return <div>error</div>;\n  return (\n    <Container component='main' maxWidth='sm'>\n      <CssBaseline />\n      <BackButton />\n      <div className={classes.paper}>\n        <AppBar position='static' color='default'>\n          <Tabs\n            value={value}\n            onChange={handleChange}\n            style={{ color: '#6d1331' }}\n            indicatorColor='secondary'\n            textColor='inherit'\n            variant='fullWidth'\n            aria-label='full width tabs example'\n          >\n            <Tab\n              icon={<ChatBubbleOutlineIcon />}\n              label={\n                <Badge badgeContent={unreadBadge} color='primary'>\n                  Messaggi\n                </Badge>\n              }\n              {...a11yProps(0)}\n            />\n            <Tab\n              icon={<NotificationsNoneOutlinedIcon />}\n              label={\n                <Badge badgeContent={unreadNotificationsBadge} color='primary'>\n                  Notifiche\n                </Badge>\n              }\n              {...a11yProps(1)}\n            />\n          </Tabs>\n        </AppBar>\n        <SwipeableViews\n          axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\n          index={value}\n          onChangeIndex={handleChangeIndex}\n        >\n          <TabPanel value={value} index={0} dir={theme.direction}>\n            <List>\n              {messagesForNegotiation.map((el) => (\n                <div key={el[0]}>\n                  <MessageListEl messages={el[1]} id={el[0]} />\n                </div>\n              ))}\n            </List>\n          </TabPanel>\n          <TabPanel value={value} index={1} dir={theme.direction}>\n            <List>\n              {notifications?.map((notification) => (\n                <ListItem\n                  key={notification._id}\n                  divider\n                  button\n                  onClick={() => handleClickNotification(notification._id)}\n                >\n                  <ListItemIcon>\n                    <Badge\n                      badgeContent={notification.isViewed ? 0 : 1}\n                      color='primary'\n                    >\n                      <NotificationsNoneOutlinedIcon />\n                    </Badge>\n                  </ListItemIcon>\n                  <ListItemText primary={notification.content} />\n                </ListItem>\n              ))}\n            </List>\n            <NotificationModal\n              open={open}\n              handleClose={handleClose}\n              content={result.data?.message?.content}\n              loading={result.loading}\n            />\n          </TabPanel>\n        </SwipeableViews>\n      </div>\n    </Container>\n  );\n};\n\nexport default Messages;\n"],"sourceRoot":""}