{"version":3,"sources":["components/InfiniteScrollFetch.tsx","utils/useIntersectionHook.tsx","containers/CloseNegotiationButton.tsx","containers/CreateReview.tsx","components/Chat/MessageChat.tsx","components/Chat/index.tsx","pages/Message.tsx"],"names":["useStyles","makeStyles","createStyles","root","display","flexDirection","alignItems","InfiniteScroll","props","classes","message","useLocation","pathname","split","rootMargin","threshold","React","entry","setEntry","node","setNode","observer","current","disconnect","window","IntersectionObserver","currentObserver","observe","useIntersect","ref","isOk","setIsOk","intersectionRatio","fetchMore","setIsLoading","isVisible","className","id","children","isLoading","CircularProgress","style","height","CloseNegotiationButton","isBuy","useUpdateNegotiationMutation","onCompleted","closedNegotiation","updateNegotiation","errors","length","errorMessages","map","error","text","notification","type","toString","onError","closeNegotiation","loading","handleCloseNegotiation","a","variables","negotiation","_id","isConcluded","buyButton","sellButton","disabled","onClick","labels","0.5","1","1.5","2","2.5","3","3.5","4","4.5","5","CreateReview","idUser","idNegotiation","open","setOpen","value","setValue","hover","setHover","review","setReview","useStylesHook","classesTextField","useStylesForms","classesStars","useStyleRating","useCreateReviewMutation","createdReview","createReview","handleClose","visibility","onClose","aria-labelledby","name","precision","onChange","event","newValue","onChangeActive","newHover","ml","color","multiline","rows","target","InputLabelProps","InputProps","inputSell","underline","underlineSell","label","placeholder","forUser","rating","content","MessageChat","me","myInfo","isMyMessage","sentBy","borderTopLeft","borderTopRight","Box","p","m","bgcolor","borderBottomLeftRadius","borderBottomRightRadius","borderTopRightRadius","borderTopLeftRadius","Typography","variant","Grid","container","justify","align","dateSent","Chat","propsMessage","messageContent","setMessageContent","isFirstRender","setIsFirstRender","divRef","setTimeout","scroll","top","document","body","offsetHeight","left","behavior","messages","recipient","sentTo","margin","padding","overflowY","handleFetchMore","borderWidth","borderColor","backgroundColor","paddingTop","TextField","fullWidth","rowsMax","endAdornment","InputAdornment","position","IconButton","newMessage","handleCreate","Message","useParams","useMessagesNegotiationQuery","fetchPolicy","offset","limit","data","sortedMessage","setSortedMessage","messagesForNegotiation","useCreateMessageMutation","createdMessage","createMessage","reverse","console","log","format","Date","now","pageCount","undefined","Container","component","maxWidth","CssBaseline"],"mappings":"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","file":"static/js/16.1cb8dcfc.chunk.js","sourcesContent":["import { useLocation } from '@reach/router';\nimport * as React from 'react';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport { useIntersect } from '../utils/useIntersectionHook';\nimport { makeStyles, createStyles } from '@material-ui/core';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\ninterface InfiniteScrollProps {\n  children: React.ReactNode;\n  fetchMore: () => void;\n  isVisible: boolean;\n  isLoading: boolean;\n  setIsLoading?: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    root: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n    },\n  })\n);\n\nexport const InfiniteScroll: React.FC<InfiniteScrollProps> = (props) => {\n  const classes = useStyles();\n  const { pathname } = useLocation();\n  const message = pathname.split('/')[1] === 'messaggi';\n  const [ref, entry] = useIntersect({ threshold: 0 });\n  const [isOk, setIsOk] = React.useState<boolean>(true);\n\n  React.useEffect(() => {\n    if (entry && entry?.intersectionRatio >= 0.5 && isOk) {\n      void props.fetchMore();\n      props.setIsLoading && props.setIsLoading(true);\n      setIsOk(false);\n    } else if (entry?.intersectionRatio === 0 && !isOk) {\n      setIsOk(true);\n      props.setIsLoading && props.setIsLoading(false);\n    }\n  }, [entry?.intersectionRatio]);\n  if (message) {\n    return (\n      <>\n        {props.isVisible ? (\n          <div className={classes.root} id='page-bottom-boundary' ref={ref}>\n            {' '}\n            <ExpandMoreIcon />\n          </div>\n        ) : null}\n        {props.children}\n      </>\n    );\n  }\n\n  return (\n    <div className={classes.root}>\n      {props.children}\n      {props.isVisible ? (\n        props.isLoading ? (\n          <CircularProgress />\n        ) : (\n          <div id='page-bottom-boundary' ref={ref} style={{ height: 30 }}>\n            {' '}\n            <ExpandMoreIcon />\n          </div>\n        )\n      ) : null}\n    </div>\n  );\n};\n","import * as React from 'react';\n\nexport const useIntersect = ({\n  root = null,\n  rootMargin = '0px',\n  threshold = 0,\n}): [\n  React.Dispatch<React.SetStateAction<HTMLDivElement | null>>,\n  IntersectionObserverEntry | null\n] => {\n  const [entry, setEntry] = React.useState<IntersectionObserverEntry | null>(\n    null\n  );\n  const [node, setNode] = React.useState<HTMLDivElement | null>(null);\n\n  const observer = React.useRef<IntersectionObserver | null>(null);\n\n  React.useEffect(() => {\n    if (observer.current) {\n      observer.current.disconnect();\n    }\n    observer.current = new window.IntersectionObserver(\n      ([entry]) => setEntry(entry),\n      { root, rootMargin, threshold }\n    );\n\n    const { current: currentObserver } = observer;\n\n    if (node) {\n      currentObserver.observe(node);\n    }\n    return () => currentObserver.disconnect();\n  }, [node, root, rootMargin, threshold]);\n  return [setNode, entry];\n};\n","import Button from '@material-ui/core/Button';\nimport * as React from 'react';\nimport { notification } from '../cache';\nimport { useUpdateNegotiationMutation } from '../generated/graphql';\nimport { useStyles } from '../utils/styleHook';\n\nexport const CloseNegotiationButton: React.FC<{\n  id: string;\n  isBuy?: boolean;\n}> = ({ id, isBuy }) => {\n  const classes = useStyles();\n  const [closeNegotiation, { loading }] = useUpdateNegotiationMutation({\n    onCompleted: (closedNegotiation) => {\n      if (closedNegotiation.updateNegotiation?.errors?.length) {\n        const errorMessages = closedNegotiation.updateNegotiation?.errors.map(\n          (error) => error?.text\n        );\n        notification({\n          type: 'error',\n          message: `${errorMessages.toString()}`,\n        });\n      } else {\n        notification({\n          message: 'trattativa chiusa con successo',\n          type: 'success',\n        });\n      }\n    },\n\n    onError: (error) => notification({ type: 'error', message: error.message }),\n  });\n\n  const handleCloseNegotiation = async () => {\n    await closeNegotiation({\n      variables: { negotiation: { _id: id, isConcluded: true } },\n    });\n  };\n\n  return (\n    <Button\n      className={isBuy ? classes.buyButton : classes.sellButton}\n      disabled={loading}\n      onClick={handleCloseNegotiation}\n    >\n      Dichiara chiusa la trattativa\n    </Button>\n  );\n};\n","import Button from '@material-ui/core/Button';\nimport * as React from 'react';\nimport { notification } from '../cache';\nimport { useCreateReviewMutation, TypeAd } from '../generated/graphql';\nimport {\n  StyledRating,\n  useStyles as useStylesHook,\n  useStylesForms,\n  useStyleRating,\n} from '../utils/styleHook';\nimport Box from '@material-ui/core/Box';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport TextField from '@material-ui/core/TextField';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nconst labels: { [index: string]: string } = {\n  0.5: 'Useless',\n  1: 'Useless+',\n  1.5: 'Poor',\n  2: 'Poor+',\n  2.5: 'Ok',\n  3: 'Ok+',\n  3.5: 'Good',\n  4: 'Good+',\n  4.5: 'Excellent',\n  5: 'Excellent+',\n};\n\nexport const CreateReview: React.FC<{\n  idNegotiation: string;\n  idUser: string;\n  type: TypeAd;\n  isBuy?: boolean;\n}> = ({ idUser, idNegotiation, isBuy, type }) => {\n  const [open, setOpen] = React.useState<boolean>(false);\n  const [value, setValue] = React.useState<number | null>(2);\n  const [hover, setHover] = React.useState<number>(-1);\n  const [review, setReview] = React.useState<string>('');\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setReview(event.target.value);\n  };\n  const classes = useStylesHook();\n  const classesTextField = useStylesForms();\n  const classesStars = useStyleRating();\n  const [createReview, { loading }] = useCreateReviewMutation({\n    onCompleted: (createdReview) => {\n      if (createdReview.createReview?.errors?.length) {\n        const errorMessages = createdReview.createReview?.errors.map(\n          (error) => error?.text\n        );\n        notification({\n          type: 'error',\n          message: `${errorMessages.toString()}`,\n        });\n      } else {\n        notification({\n          type: 'success',\n          message: 'Recensione creata con successo',\n        });\n      }\n\n      handleClose();\n    },\n\n    onError: (error) => notification({ type: 'error', message: error.message }),\n  });\n  const handleModal = () => {\n    setOpen(true);\n  };\n  const handleClose = () => {\n    setOpen(false);\n  };\n  const handleCreateReview = () => {\n    void createReview({\n      variables: {\n        review: {\n          forUser: idUser,\n          rating: value as number,\n          negotiation: idNegotiation,\n          content: review,\n          type: type,\n        },\n      },\n    });\n  };\n\n  return (\n    <>\n      <Button\n        className={isBuy ? classes.buyButton : classes.sellButton}\n        disabled={loading}\n        onClick={handleModal}\n      >\n        Lascia una recensione\n      </Button>\n      <div style={{ visibility: 'hidden' }}>\n        <Dialog\n          open={open}\n          onClose={handleClose}\n          aria-labelledby='form-dialog-title'\n        >\n          <DialogTitle id='form-dialog-title'>\n            Lascia una recensione\n          </DialogTitle>\n\n          <DialogContent>\n            <div className={classesStars.root}>\n              <StyledRating\n                name='hover-feedback'\n                value={value}\n                precision={0.5}\n                onChange={(event, newValue) => {\n                  setValue(newValue);\n                }}\n                onChangeActive={(event, newHover) => {\n                  setHover(newHover);\n                }}\n              />\n              {value !== null && (\n                <Box ml={2}>{labels[hover !== -1 ? hover : value]}</Box>\n              )}\n            </div>\n            <TextField\n              color='primary'\n              multiline\n              rows={4}\n              value={review}\n              onChange={handleChange}\n              InputLabelProps={{\n                style: { color: '#6d1331' },\n              }}\n              InputProps={{\n                className: classesTextField.inputSell,\n                classes: {\n                  underline: classesTextField.underlineSell,\n                },\n              }}\n              id='outlined-multiline-flexible'\n              label='Recensione'\n              placeholder='Ottima persona con cui....'\n            />\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={handleClose} color='primary'>\n              Cancel\n            </Button>\n            <Button onClick={handleCreateReview} color='primary'>\n              Recensisci\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </div>\n    </>\n  );\n};\n","import { Typography } from '@material-ui/core';\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport * as React from 'react';\nimport { myInfo } from '../../cache';\nimport { MessageDetailsFragment } from '../../generated/graphql';\n\nexport const MessageChat: React.FC<{\n  message: MessageDetailsFragment | null;\n}> = ({ message }) => {\n  if (!message) return null;\n  const me = myInfo();\n  const isMyMessage = message.sentBy._id === me?._id;\n  const borderTopLeft = isMyMessage ? 12 : 0;\n  const borderTopRight = isMyMessage ? 0 : 12;\n  return (\n    <Box\n      display='flex'\n      flexDirection={isMyMessage ? 'row-reverse' : 'row'}\n      p={1}\n      m={1}\n    >\n      <Box\n        p={1}\n        color='white'\n        bgcolor={isMyMessage ? '#6d1331' : '#707070'}\n        style={{\n          borderBottomLeftRadius: 12,\n          borderBottomRightRadius: 12,\n          borderTopRightRadius: borderTopRight,\n          borderTopLeftRadius: borderTopLeft,\n        }}\n      >\n        <Typography variant='body1'>{message.content}</Typography>\n        <Grid container justify='flex-end'>\n          <Typography align='right' variant='caption'>\n            {message.dateSent}\n          </Typography>\n        </Grid>\n      </Box>\n    </Box>\n  );\n};\n","import TextField from '@material-ui/core/TextField';\nimport * as React from 'react';\nimport {\n  MessageInput,\n  MessagesNegotiationQuery,\n} from '../../generated/graphql';\nimport { MessageChat } from './MessageChat';\nimport SendIcon from '@material-ui/icons/Send';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport { IconButton } from '@material-ui/core';\nimport { myInfo } from '../../cache';\nimport { InfiniteScroll } from '../InfiniteScrollFetch';\nimport { DeepExtractType } from 'ts-deep-extract-types';\nimport { CloseNegotiationButton } from '../../containers/CloseNegotiationButton';\nimport { CreateReview } from '../../containers/CreateReview';\n\ninterface PropMessages {\n  propsMessage: {\n    isLoading: boolean;\n    messages: DeepExtractType<\n      MessagesNegotiationQuery,\n      ['messagesForNegotiation']\n    >['messages'];\n    isVisible: boolean;\n    handleCreate: (message: MessageInput) => Promise<void>;\n    handleFetchMore: () => Promise<void>;\n  };\n}\n\nexport const Chat: React.FC<PropMessages> = ({ propsMessage }) => {\n  const me = myInfo();\n  const [messageContent, setMessageContent] = React.useState<string>('');\n  const [isLoading, setIsLoading] = React.useState<boolean>(false);\n  const [isFirstRender, setIsFirstRender] = React.useState<boolean>(true);\n  const divRef = React.useRef<null | HTMLDivElement>(null);\n  setTimeout(() => setIsFirstRender(false), 1000);\n  React.useEffect(() => {\n    if (divRef.current) {\n      if (isLoading) return;\n      divRef.current.scroll({\n        top: document.body.offsetHeight + 1000000,\n        left: 0,\n        behavior: 'smooth',\n      });\n    }\n  }, [propsMessage.messages]);\n  const message = propsMessage.messages ? propsMessage.messages[0] : null;\n  if (!message) {\n    return null;\n  }\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setMessageContent(event.target.value);\n  };\n  const recipient =\n    message.sentBy._id === me?._id ? message.sentTo._id : message.sentBy._id;\n  const handleCreateMessage = () => {\n    const newMessage = {\n      content: messageContent,\n      sentTo: recipient,\n      negotiation: message.negotiation._id,\n    };\n    void propsMessage.handleCreate(newMessage);\n\n    setMessageContent('');\n  };\n  if (!propsMessage.messages) return null;\n  return (\n    <>\n      <div\n        style={{\n          height: '75vh',\n          margin: 0,\n          padding: 0,\n          overflowY: 'scroll',\n        }}\n        ref={divRef}\n      >\n        <InfiniteScroll\n          fetchMore={propsMessage.handleFetchMore}\n          isLoading={isLoading}\n          isVisible={propsMessage.isVisible && !isFirstRender}\n          setIsLoading={setIsLoading}\n        >\n          {propsMessage.messages?.map((message) => (\n            <MessageChat key={message?._id} message={message} />\n          ))}\n        </InfiniteScroll>\n      </div>\n      <hr style={{ borderWidth: 1, borderColor: '#6d1331' }} />\n      <div\n        style={{\n          height: '10vh',\n          backgroundColor: '#fff',\n          paddingTop: 0,\n        }}\n      >\n        {message.negotiation.isConcluded ? (\n          <CreateReview\n            isBuy={true}\n            idNegotiation={message.negotiation._id}\n            idUser={recipient}\n            type={message.negotiation.type}\n          />\n        ) : (\n          <CloseNegotiationButton id={message.negotiation._id} />\n        )}\n        <TextField\n          fullWidth\n          multiline\n          rowsMax={2}\n          variant='outlined'\n          name='content'\n          type='text'\n          placeholder=''\n          label=''\n          value={messageContent}\n          onChange={handleChange}\n          InputProps={{\n            endAdornment: (\n              <InputAdornment position='end'>\n                <IconButton\n                  disabled={!messageContent}\n                  onClick={handleCreateMessage}\n                >\n                  <SendIcon />\n                </IconButton>\n              </InputAdornment>\n            ),\n          }}\n        />\n      </div>\n    </>\n  );\n};\n","import * as React from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Container from '@material-ui/core/Container';\nimport { RouteComponentProps } from '@reach/router';\nimport {\n  MessagesNegotiationQuery,\n  useMessagesNegotiationQuery,\n  useCreateMessageMutation,\n  MessageInput,\n} from '../generated/graphql';\nimport { useParams } from '@reach/router';\nimport { myInfo, notification } from '../cache';\nimport { Chat } from '../components/Chat';\nimport { DeepExtractType } from 'ts-deep-extract-types';\nimport { format } from 'date-fns';\n\nconst Message: React.FC<RouteComponentProps> = () => {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  const { id }: { id: string } = useParams();\n  const me = myInfo();\n  const { data, loading, error, fetchMore } = useMessagesNegotiationQuery({\n    fetchPolicy: 'network-only',\n    variables: { id, offset: 0, limit: 20 },\n  });\n  const [sortedMessage, setSortedMessage] = React.useState<\n    DeepExtractType<\n      MessagesNegotiationQuery,\n      ['messagesForNegotiation']\n    >['messages']\n  >([]);\n  const message = data?.messagesForNegotiation?.messages?.length\n    ? data?.messagesForNegotiation.messages[0]\n    : null;\n  const [createMessage] = useCreateMessageMutation({\n    onError: (error) => notification({ type: 'error', message: error.message }),\n    onCompleted: (createdMessage) => {\n      if (createdMessage.createMessage?.errors?.length) {\n        const errorMessages = createdMessage.createMessage?.errors.map(\n          (error) => error?.text\n        );\n        notification({\n          type: 'error',\n          message: `${errorMessages.toString()}`,\n        });\n      }\n    },\n    // update: (cache, data) => {\n    //   updateCacheMessages(cache, data.data?.createMessage?.response);\n    // },\n  });\n\n  React.useEffect(() => {\n    if (data?.messagesForNegotiation?.messages) {\n      setSortedMessage([...data?.messagesForNegotiation?.messages].reverse());\n    }\n  }, [data?.messagesForNegotiation?.messages]);\n  const handleFetchMore = async () => {\n    if (fetchMore) {\n      try {\n        await fetchMore({\n          variables: {\n            offset: data?.messagesForNegotiation?.messages?.length,\n          },\n        });\n      } catch (e) {\n        console.log(e);\n      }\n    }\n  };\n  if (!message) return <div>niente mess ancora</div>;\n\n  const handleCreate = async (message: MessageInput) => {\n    await createMessage({\n      variables: { message },\n    });\n    const newMessage = {\n      ...message,\n      dateSent: format(new Date(), 'dd MMM yy, H:m'),\n      sentBy: { _id: me?._id },\n      _id: Date.now().toString(),\n    };\n    if (sortedMessage?.length) {\n      setSortedMessage([...sortedMessage, newMessage] as DeepExtractType<\n        MessagesNegotiationQuery,\n        ['messagesForNegotiation']\n      >['messages']);\n    }\n  };\n  const propsMessage = {\n    isLoading: loading,\n    messages: sortedMessage,\n    isVisible:\n      data?.messagesForNegotiation?.messages?.length !==\n      data?.messagesForNegotiation?.pageCount,\n    handleCreate,\n    handleFetchMore,\n  };\n  if (!loading && error) {\n    return <div>error</div>;\n  }\n  if (loading || propsMessage.isVisible === undefined) {\n    return <div>loading</div>;\n  }\n  if (!data?.messagesForNegotiation?.messages?.length) {\n    return null;\n  }\n  return (\n    <Container component='main' maxWidth='sm'>\n      <CssBaseline />\n      <Chat propsMessage={propsMessage} />\n    </Container>\n  );\n};\n\nexport default Message;\n"],"sourceRoot":""}