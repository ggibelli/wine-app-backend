{"version":3,"sources":["components/NotificationModal/index.tsx","components/SwipableTabsNotification/MessageListEl.tsx","components/SwipableTabsNotification/NotificationListEl.tsx","components/SwipableTabsNotification/index.tsx","pages/Messages.tsx"],"names":["NotificationModal","open","handleClose","content","Dialog","onClose","aria-labelledby","DialogTitle","id","DialogContent","DialogContentText","color","DialogActions","Button","autoFocus","onClick","MessageListEl","messages","me","myInfo","messagesForMe","filter","message","sentTo","_id","messagesFromMe","sentBy","unreadMessages","isViewed","length","recipient","firstName","ad","negotiation","wineName","ListItem","divider","button","component","React","itemProps","ref","to","ListItemIcon","Badge","badgeContent","ListItemText","primary","NotificationListEl","notification","handleClick","TabPanel","props","children","value","index","other","role","hidden","Box","p","a11yProps","SwipableTabsNotification","classes","useStyles","theme","useTheme","setValue","notifications","messagesForNegotiationObj","_","groupBy","messagesForNegotiation","Object","entries","sort","a","b","localeCompare","messNumberRaw","map","mess","flat","unreadNotificationsBadge","n","unreadBadge","m","className","paper","AppBar","position","style","boxShadow","Tabs","onChange","_event","newValue","indicatorColor","textColor","variant","aria-label","Tab","icon","label","axis","direction","onChangeIndex","dir","List","el","handleClickNotification","Messages","useMessagesQuery","fetchPolicy","onError","error","type","data","loading","useGetMessageLazyQuery","lazyMessage","result","setOpen","Loading","Container","maxWidth","CssBaseline","BackButton","variables"],"mappings":"yQAQaA,EAKR,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,KAAMC,EAA2B,EAA3BA,YAAaC,EAAc,EAAdA,QACzB,OACE,8BACE,eAACC,EAAA,EAAD,CACEH,KAAMA,EACNI,QAASH,EACTI,kBAAgB,0BAHlB,UAKE,cAACC,EAAA,EAAD,CAAaC,GAAG,0BAAhB,SAA2C,iBAC3C,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAmBC,MAAM,UAAzB,SAAoCR,MAEtC,cAACS,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAQC,WAAS,EAACC,QAASb,EAAaS,MAAM,UAA9C,4B,0LCfGK,EAGR,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,SAAUT,EAAS,EAATA,GACVU,EAAKC,cACX,IAAKF,EAAU,OAAO,KACtB,IAAMG,EAAgBH,EAASI,QAC7B,SAACC,GAAD,OAAaA,EAAQC,OAAOC,OAAf,OAAuBN,QAAvB,IAAuBA,OAAvB,EAAuBA,EAAIM,QAEpCC,EAAiBR,EAASI,QAC9B,SAACC,GAAD,OAAaA,EAAQI,OAAOF,OAAf,OAAuBN,QAAvB,IAAuBA,OAAvB,EAAuBA,EAAIM,QAEpCG,EAAc,OAAGP,QAAH,IAAGA,OAAH,EAAGA,EAAeC,QACpC,SAACC,GAAD,OAAcA,EAAQM,YACtBC,OACIC,EAAYV,EAAcS,OAC5BT,EAAc,GAAGM,OAAOK,UACxBN,EAAe,GAAGF,OAAOQ,UAEvBC,EAAKZ,EAAcS,OAEpBT,EAAc,GAAGa,YAAYD,GAAGE,SAEhCT,EAAe,GAAGQ,YAAYD,GAAGE,SAEtC,OACE,eAACC,EAAA,EAAD,CACEC,SAAO,EACPC,QAAM,EAENC,UAAWC,cAAiB,SAACC,EAAWC,GAAZ,OAG1B,aAFA,CAEC,IAAD,aACEC,GAAE,oBAAelC,GAGjBiC,IAAKA,GACDD,OAZV,UAgBE,cAACG,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAOC,aAAclB,EAAgBhB,MAAM,UAA3C,SACE,cAAC,IAAD,QAGJ,cAACmC,EAAA,EAAD,CAAcC,QAAO,kBAAajB,EAAb,cAA4BE,S,yBClD1CgB,EAGR,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,aAAcC,EAAkB,EAAlBA,YACpB,OACE,eAACf,EAAA,EAAD,CAEEC,SAAO,EACPC,QAAM,EACNtB,QAAS,kBAAMmC,EAAYD,EAAazB,MAJ1C,UAME,cAACmB,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAOC,aAAcI,EAAarB,SAAW,EAAI,EAAGjB,MAAM,UAA1D,SACE,cAAC,IAAD,QAGJ,cAACmC,EAAA,EAAD,CAAcC,QAASE,EAAa9C,YAV/B8C,EAAazB,MCaxB,SAAS2B,EAASC,GAAuB,IAC/BC,EAAqCD,EAArCC,SAAUC,EAA2BF,EAA3BE,MAAOC,EAAoBH,EAApBG,MAAUC,EADG,YACOJ,EADP,8BAGtC,OACE,6CACEK,KAAK,WACLC,OAAQJ,IAAUC,EAClB/C,GAAE,8BAAyB+C,GAC3BjD,kBAAA,yBAAmCiD,IAC/BC,GALN,aAOGF,IAAUC,GAAS,cAACI,EAAA,EAAD,CAAKC,EAAG,EAAR,SAAYP,OAKtC,SAASQ,EAAUN,GACjB,MAAO,CACL/C,GAAG,kBAAD,OAAoB+C,GACtB,gBAAgB,uBAAhB,OAAwCA,IASrC,IAAMO,EAAwD,SACnEV,GACI,IAAD,IACGW,EAAUC,cACVC,EAAQC,cACRhD,EAAKC,cAHR,EAIuBoB,WAAuB,GAJ9C,mBAIIe,EAJJ,KAIWa,EAJX,KAKGC,EAAa,UAAGhB,EAAMnC,gBAAT,aAAG,EAAgBI,QACpC,SAACC,GAAD,MAA0C,mBAA7BA,EAAQI,OAAOK,aAExBd,EAAQ,UAAGmC,EAAMnC,gBAAT,aAAG,EAAgBI,QAC/B,SAACC,GAAD,MAA0C,mBAA7BA,EAAQI,OAAOK,aAExBsC,EAA4BC,IAAEC,QAClCtD,GACA,SAACK,GAAD,OAAaA,EAAQW,YAAYT,OAE7BgD,EAAyBC,OAAOC,QAAQL,GAA2BM,MACvE,SAACC,EAAGC,GAAJ,OAAUD,EAAE,GAAGE,cAAcD,EAAE,OAE3BE,EAAgBP,EAAuBQ,KAAI,SAACC,GAAD,OAAUA,EAAK,MAAIC,OAC9DC,EAAwB,OAAGf,QAAH,IAAGA,OAAH,EAAGA,EAAe/C,QAC9C,SAAC+D,GAAD,OAAQA,EAAExD,YACVC,OACIwD,EAAcN,EAAc1D,QAChC,SAACiE,GAAD,OAAQA,EAAE1D,UAAY0D,EAAE5D,OAAOF,OAAT,OAAiBN,QAAjB,IAAiBA,OAAjB,EAAiBA,EAAIM,QAC3CK,OASF,OACE,sBAAK0D,UAAWxB,EAAQyB,MAAxB,UACE,cAACC,EAAA,EAAD,CACEC,SAAS,SACT/E,MAAM,cACNgF,MAAO,CAAEC,UAAW,QAHtB,SAKE,eAACC,EAAA,EAAD,CACEvC,MAAOA,EACPwC,SAhBa,SAACC,EAA+BC,GACnD7B,EAAS6B,IAgBHL,MAAO,CAAEhF,MAAO,WAChBsF,eAAe,YACfC,UAAU,UACVC,QAAQ,YACRC,aAAW,gBAPb,UASE,cAACC,EAAA,EAAD,aACEC,KAAM,cAAC,IAAD,IACNC,MACE,cAAC3D,EAAA,EAAD,CAAOC,aAAcwC,EAAa1E,MAAM,UAAxC,uBAIEkD,EAAU,KAEhB,cAACwC,EAAA,EAAD,aACEC,KAAM,cAAC,IAAD,IACNC,MACE,cAAC3D,EAAA,EAAD,CAAOC,aAAcsC,EAA0BxE,MAAM,UAArD,wBAIEkD,EAAU,UAIpB,eAAC,IAAD,CACE2C,KAA0B,QAApBvC,EAAMwC,UAAsB,YAAc,IAChDlD,MAAOD,EACPoD,cA3CoB,SAACnD,GACzBY,EAASZ,IAuCP,UAKE,cAACJ,EAAD,CAAUG,MAAOA,EAAOC,MAAO,EAAGoD,IAAK1C,EAAMwC,UAA7C,SACE,cAACG,EAAA,EAAD,UACGpC,EAAuBQ,KAAI,SAAC6B,GAAD,OAC1B,cAAC,EAAD,CAA2B5F,SAAU4F,EAAG,GAAIrG,GAAIqG,EAAG,IAA/BA,EAAG,WAI7B,cAAC1D,EAAD,CAAUG,MAAOA,EAAOC,MAAO,EAAGoD,IAAK1C,EAAMwC,UAA7C,SACE,cAACG,EAAA,EAAD,iBACGxC,QADH,IACGA,OADH,EACGA,EAAeY,KAAI,SAAC/B,GAAD,OAClB,cAAC,EAAD,CAEEA,aAAcA,EACdC,YAAaE,EAAM0D,yBAFd7D,EAAazB,mBC5EnBuF,UAvDiC,WAAO,IAAD,MACnBC,YAAiB,CAChDC,YAAa,eACbC,QAAS,SAACC,GACRlE,YAAa,CACXmE,KAAM,QACN9F,QAAS6F,EAAM7F,aALb+F,EAD4C,EAC5CA,KAAMC,EADsC,EACtCA,QAASH,EAD6B,EAC7BA,MAD6B,EAUtBI,YAAuB,CACnDL,QAAS,SAACC,GACRlE,YAAa,CACXmE,KAAM,QACN9F,QAAS6F,EAAM7F,aAd+B,mBAU7CkG,EAV6C,KAUhCC,EAVgC,OAkB5BlF,YAAe,GAlBa,mBAkB7CtC,EAlB6C,KAkBvCyH,EAlBuC,KA2BpD,OAAIJ,EACK,cAACK,EAAA,EAAD,IAGLR,EAAc,wCAGhB,eAACS,EAAA,EAAD,CAAWtF,UAAU,OAAOuF,SAAS,KAArC,UACE,cAACC,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,IACA,cAAC,EAAD,CACE9G,SAAQ,OAAEoG,QAAF,IAAEA,OAAF,EAAEA,EAAMpG,SAChB6F,wBAjB0B,SAACtG,GAC/BgH,EAAY,CAAEQ,UAAW,CAAExH,GAAIA,KAC/BkH,GAAQ,MAiBLD,EAAOH,QACN,cAACK,EAAA,EAAD,IAEA,cAAC,EAAD,CACE1H,KAAMA,EACNC,YA3BY,WAClBwH,GAAQ,IA2BFvH,QAAO,UAAEsH,EAAOJ,YAAT,iBAAE,EAAa/F,eAAf,aAAE,EAAsBnB,QAC/BmH,QAASG,EAAOH","file":"static/js/13.be1b464d.chunk.js","sourcesContent":["import * as React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nexport const NotificationModal: React.FC<{\n  open: boolean;\n  handleClose: () => void;\n  content?: string;\n  loading: boolean;\n}> = ({ open, handleClose, content }) => {\n  return (\n    <div>\n      <Dialog\n        open={open}\n        onClose={handleClose}\n        aria-labelledby='responsive-dialog-title'\n      >\n        <DialogTitle id='responsive-dialog-title'>{'Notifica app'}</DialogTitle>\n        <DialogContent>\n          <DialogContentText color='primary'>{content}</DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={handleClose} color='primary'>\n            Chiudi\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n};\n","/* eslint-disable @typescript-eslint/restrict-template-expressions */\nimport * as React from 'react';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport MailOutlineIcon from '@material-ui/icons/MailOutline';\nimport Badge from '@material-ui/core/Badge';\nimport { Link as RouterLink } from '@reach/router';\nimport { myInfo } from '../../cache';\nimport { MessagesQuery } from '../../generated/graphql';\n\nexport const MessageListEl: React.FC<{\n  id: string;\n  messages: MessagesQuery['messages'];\n}> = ({ messages, id }) => {\n  const me = myInfo();\n  if (!messages) return null;\n  const messagesForMe = messages.filter(\n    (message) => message.sentTo._id === me?._id\n  );\n  const messagesFromMe = messages.filter(\n    (message) => message.sentBy._id === me?._id\n  );\n  const unreadMessages = messagesForMe?.filter(\n    (message) => !message.isViewed\n  ).length;\n  const recipient = messagesForMe.length\n    ? messagesForMe[0].sentBy.firstName\n    : messagesFromMe[0].sentTo.firstName;\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  const ad = messagesForMe.length\n    ? //@ts-expect-error I know is a adWine\n      (messagesForMe[0].negotiation.ad.wineName as string)\n    : //@ts-expect-error I know is a adWine\n      (messagesFromMe[0].negotiation.ad.wineName as string);\n\n  return (\n    <ListItem\n      divider\n      button\n      // eslint-disable-next-line react/display-name\n      component={React.forwardRef((itemProps, ref) => (\n        //ts ignore because followed the mui docs\n\n        <RouterLink\n          to={`/messaggi/${id}`}\n          // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n          //@ts-ignore\n          ref={ref}\n          {...itemProps}\n        />\n      ))}\n    >\n      <ListItemIcon>\n        <Badge badgeContent={unreadMessages} color='primary'>\n          <MailOutlineIcon />\n        </Badge>\n      </ListItemIcon>\n      <ListItemText primary={`Cantina ${recipient} - ${ad}`} />\n    </ListItem>\n  );\n};\n","import * as React from 'react';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport NotificationsNoneOutlinedIcon from '@material-ui/icons/MailOutline';\nimport Badge from '@material-ui/core/Badge';\nimport { MessageDetailsFragment } from '../../generated/graphql';\n\nexport const NotificationListEl: React.FC<{\n  notification: MessageDetailsFragment;\n  handleClick: (id: string) => void;\n}> = ({ notification, handleClick }) => {\n  return (\n    <ListItem\n      key={notification._id}\n      divider\n      button\n      onClick={() => handleClick(notification._id)}\n    >\n      <ListItemIcon>\n        <Badge badgeContent={notification.isViewed ? 0 : 1} color='primary'>\n          <NotificationsNoneOutlinedIcon />\n        </Badge>\n      </ListItemIcon>\n      <ListItemText primary={notification.content} />\n    </ListItem>\n  );\n};\n","import {\n  AppBar,\n  Tabs,\n  Badge,\n  Box,\n  Tab,\n  useTheme,\n  List,\n} from '@material-ui/core';\nimport NotificationsNoneOutlinedIcon from '@material-ui/icons/NotificationsNoneOutlined';\nimport ChatBubbleOutlineIcon from '@material-ui/icons/ChatBubbleOutline';\nimport * as React from 'react';\nimport SwipeableViews from 'react-swipeable-views';\nimport { MessageListEl } from './MessageListEl';\nimport _ from 'lodash';\nimport { useStyles } from '../../utils/styleHook';\nimport { MessagesQuery } from '../../generated/graphql';\nimport { myInfo } from '../../cache';\nimport { NotificationListEl } from './NotificationListEl';\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  dir?: string;\n  index: number;\n  value: number;\n}\n\nfunction TabPanel(props: TabPanelProps) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role='tabpanel'\n      hidden={value !== index}\n      id={`full-width-tabpanel-${index}`}\n      aria-labelledby={`full-width-tab-${index}`}\n      {...other}\n    >\n      {value === index && <Box p={3}>{children}</Box>}\n    </div>\n  );\n}\n\nfunction a11yProps(index: number) {\n  return {\n    id: `full-width-tab-${index}`,\n    'aria-controls': `full-width-tabpanel-${index}`,\n  };\n}\n\ninterface NotificationProps {\n  messages: MessagesQuery['messages'];\n  handleClickNotification: (id: string) => void;\n}\n\nexport const SwipableTabsNotification: React.FC<NotificationProps> = (\n  props\n) => {\n  const classes = useStyles();\n  const theme = useTheme();\n  const me = myInfo();\n  const [value, setValue] = React.useState<number>(0);\n  const notifications = props.messages?.filter(\n    (message) => message.sentBy.firstName === 'Amministratore'\n  );\n  const messages = props.messages?.filter(\n    (message) => message.sentBy.firstName !== 'Amministratore'\n  );\n  const messagesForNegotiationObj = _.groupBy(\n    messages,\n    (message) => message.negotiation._id\n  );\n  const messagesForNegotiation = Object.entries(messagesForNegotiationObj).sort(\n    (a, b) => a[0].localeCompare(b[0])\n  );\n  const messNumberRaw = messagesForNegotiation.map((mess) => mess[1]).flat();\n  const unreadNotificationsBadge = notifications?.filter(\n    (n) => !n.isViewed\n  ).length;\n  const unreadBadge = messNumberRaw.filter(\n    (m) => !m.isViewed && m.sentBy._id !== me?._id\n  ).length;\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  const handleChange = (_event: React.ChangeEvent<{}>, newValue: number) => {\n    setValue(newValue);\n  };\n  const handleChangeIndex = (index: number) => {\n    setValue(index);\n  };\n\n  return (\n    <div className={classes.paper}>\n      <AppBar\n        position='static'\n        color='transparent'\n        style={{ boxShadow: 'none' }}\n      >\n        <Tabs\n          value={value}\n          onChange={handleChange}\n          style={{ color: '#6d1331' }}\n          indicatorColor='secondary'\n          textColor='inherit'\n          variant='fullWidth'\n          aria-label='notifications'\n        >\n          <Tab\n            icon={<ChatBubbleOutlineIcon />}\n            label={\n              <Badge badgeContent={unreadBadge} color='primary'>\n                Messaggi\n              </Badge>\n            }\n            {...a11yProps(0)}\n          />\n          <Tab\n            icon={<NotificationsNoneOutlinedIcon />}\n            label={\n              <Badge badgeContent={unreadNotificationsBadge} color='primary'>\n                Notifiche\n              </Badge>\n            }\n            {...a11yProps(1)}\n          />\n        </Tabs>\n      </AppBar>\n      <SwipeableViews\n        axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\n        index={value}\n        onChangeIndex={handleChangeIndex}\n      >\n        <TabPanel value={value} index={0} dir={theme.direction}>\n          <List>\n            {messagesForNegotiation.map((el) => (\n              <MessageListEl key={el[0]} messages={el[1]} id={el[0]} />\n            ))}\n          </List>\n        </TabPanel>\n        <TabPanel value={value} index={1} dir={theme.direction}>\n          <List>\n            {notifications?.map((notification) => (\n              <NotificationListEl\n                key={notification._id}\n                notification={notification}\n                handleClick={props.handleClickNotification}\n              />\n            ))}\n          </List>\n        </TabPanel>\n      </SwipeableViews>\n    </div>\n  );\n};\n","import * as React from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Container from '@material-ui/core/Container';\nimport { useMessagesQuery, useGetMessageLazyQuery } from '../generated/graphql';\nimport { notification } from '../cache';\nimport { RouteComponentProps } from '@reach/router';\nimport { BackButton } from '../components/BackButton';\nimport { Loading } from '../components/Loading';\nimport { NotificationModal } from '../components/NotificationModal';\nimport { SwipableTabsNotification } from '../components/SwipableTabsNotification';\n\nconst Messages: React.FC<RouteComponentProps> = () => {\n  const { data, loading, error } = useMessagesQuery({\n    fetchPolicy: 'network-only',\n    onError: (error) => {\n      notification({\n        type: 'error',\n        message: error.message,\n      });\n    },\n  });\n  const [lazyMessage, result] = useGetMessageLazyQuery({\n    onError: (error) => {\n      notification({\n        type: 'error',\n        message: error.message,\n      });\n    },\n  });\n  const [open, setOpen] = React.useState(false);\n  const handleClose = () => {\n    setOpen(false);\n  };\n  const handleClickNotification = (id: string) => {\n    lazyMessage({ variables: { id: id } });\n    setOpen(true);\n  };\n\n  if (loading) {\n    return <Loading />;\n  }\n\n  if (error) return <div>error</div>;\n\n  return (\n    <Container component='main' maxWidth='sm'>\n      <CssBaseline />\n      <BackButton />\n      <SwipableTabsNotification\n        messages={data?.messages}\n        handleClickNotification={handleClickNotification}\n      />\n      {result.loading ? (\n        <Loading />\n      ) : (\n        <NotificationModal\n          open={open}\n          handleClose={handleClose}\n          content={result.data?.message?.content}\n          loading={result.loading}\n        />\n      )}\n    </Container>\n  );\n};\n\nexport default Messages;\n"],"sourceRoot":""}