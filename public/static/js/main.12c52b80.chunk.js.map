{"version":3,"sources":["utils/styleHook.tsx","generated/graphql.tsx","components/FormFields/TextField.tsx","components/FormFields/PasswordField.tsx","cache.ts","containers/LogoutButton.tsx","components/Navigation/Drawer.tsx","components/Notification.tsx","components/LoginModal/LoginForm.tsx","components/LoginModal/index.tsx","components/Navigation/AppBar.tsx","components/Navigation/index.tsx","pages/index.tsx","App.tsx","reportWebVitals.ts","index.tsx","utils/updateCache.ts"],"names":["useStyles","makeStyles","theme","createStyles","backdrop","zIndex","drawer","color","paper","marginTop","spacing","display","flexDirection","alignItems","buyButton","palette","primary","main","backgroundColor","grey","sellButton","dark","secondary","light","buyHome","sellHome","cruiseHome","index","useStylesForms","form","borderRadius","margin","padding","width","submit","formSell","borderColor","borderStyle","borderWidth","submitSell","input","inputSell","underline","borderBottom","disabled","focused","error","underlineSell","useStyleRating","root","list","bottomPush","position","bottom","textAlign","paddingBottom","StyledRating","withStyles","iconFilled","iconHover","Rating","Province","Regioni","TypeAd","TypeProduct","Menzione","MetodoProduttivo","Colore","EspressioneComunitaria","DenomZona","QueryOrderBy","AlertStatus","gql","NegotiationDetailsFragmentDoc","MessageDetailsFragmentDoc","ReviewDetailsFragmentDoc","LoginDocument","useLoginMutation","baseOptions","Apollo","CreateUserDocument","useCreateUserMutation","CreateAdWineDocument","useCreateAdWineMutation","SaveAdDocument","useSaveAdMutation","CreateNegotiationDocument","useCreateNegotiationMutation","UpdateNegotiationDocument","useUpdateNegotiationMutation","CreateMessageDocument","useCreateMessageMutation","CreateReviewDocument","useCreateReviewMutation","FavoriteDocument","useFavoriteQuery","MeDocument","useMeLazyQuery","IsUserLoggedInDocument","useIsUserLoggedInQuery","NotificationDocument","useNotificationQuery","WineSearchedDocument","useWineSearchedLazyQuery","AdsWineDocument","useAdsWineLazyQuery","AdDocument","useAdQuery","WinesDocument","useWinesQuery","NegotiationsDocument","useNegotiationsLazyQuery","NegotiationDocument","useNegotiationQuery","MessagesDocument","useMessagesQuery","MessagesNegotiationDocument","useMessagesNegotiationQuery","ReviewsDocument","useReviewsQuery","NegotiationsForAdDocument","useNegotiationsForAdLazyQuery","AdsForUserDocument","useAdsForUserLazyQuery","AdPostedFollowUpDocument","useAdPostedFollowUpSubscription","MessageSentDocument","useMessageSentSubscription","NegotiationCreatedDocument","useNegotiationCreatedSubscription","NegotiationClosedDocument","useNegotiationClosedSubscription","ReviewCreatedDocument","useReviewCreatedSubscription","TextField","props","useField","name","type","field","touched","fullWidth","InputLabelProps","style","labelTextColor","multiline","className","class","InputProps","inputTextColor","classes","underlineColor","inputProps","min","max","step","undefined","data-testid","placeholder","label","helperText","PasswordField","React","show","setShow","htmlFor","endAdornment","aria-label","onClick","onMouseDown","event","preventDefault","cache","InMemoryCache","typePolicies","Query","fields","ads","keyArgs","merge","existing","incoming","args","merged","slice","offset","i","length","push","apply","__typeName","pageCount","adsForUser","_","unionBy","messagesForNegotiation","messages","negotiations","isLoggedIn","read","isLoggedInVar","notification","searchedWine","myInfo","makeVar","localStorage","getItem","_id","LogoutButton","client","useApolloClient","gc","removeItem","Divider","ListItem","button","ListItemIcon","ListItemText","Drawer","state","toggleDrawer","data","SwipeableDrawer","anchor","open","onClose","onOpen","role","onKeyDown","Box","component","mb","pt","Avatar","Typography","Link","RouterLink","to","value","rating","readOnly","precision","List","forwardRef","itemProps","ref","Badge","badgeContent","numAds","numOpenNegs","savedAds","Notification","setIsVisible","loading","isVisible","timeoutId","clearTimeout","current","window","setTimeout","message","Alert","severity","avatar","LoginForm","onSubmit","initialValues","password","email","validationSchema","Yup","required","isValid","dirty","Container","CssBaseline","variant","Button","Grid","container","item","xs","href","LoginModal","handleClose","Dialog","aria-labelledby","DialogContent","DialogActions","flexGrow","menuButton","marginRight","title","HeaderBar","meQueryResult","onSubmitLogin","setState","openModal","setOpenModal","badgeNumber","me","filter","isViewed","sentBy","handleClickOpen","a","loggedUser","myReviews","reviews","r","forUser","reducedReview","reduce","acc","val","drawerData","isLoading","neg","isConcluded","numClosedNegs","firstName","SigninButton","IconButton","navigate","fontSize","AppBar","Toolbar","edge","textDecoration","Header","onCompleted","onError","lazyQuery","result","login","errors","setItem","response","token","user","address","loginMutation","variables","onSubscriptionData","subscriptionData","updateCacheNegotiations","negotiationCreated","updateCacheMessagesAdmin","negotiationClosed","wineName","__typename","updateCacheMessages","messageSent","review","reviewCreated","createdBy","updateCacheReview","createLazyRoute","RouteComponent","fallback","SignUp","Home","Buy","Ads","Ad","MyAds","Negotiations","Negotiation","Messages","Message","SavedAds","Reviews","Pages","path","map","createMuiTheme","typography","fontFamily","join","text","App","ThemeProvider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","typeDefs","authLink","setContext","headers","authorization","httpLink","HttpLink","uri","wsLink","WebSocketLink","options","reconnect","connectionParams","authToken","splitLink","split","query","definition","getMainDefinition","kind","operation","concat","ApolloClient","link","resolvers","ReactDOM","render","document","getElementById","negotiation","cachedDataMeLocal","cloneDeep","readQuery","cachedDataNegotiationsLocal","writeQuery","cachedDataMessagesLocal","content","sentTo","dateSent","Date","toISOString","indexNegToClose","findIndex","ad","updateCacheAd","searchedWineCache","variablesCacheUpdate","typeProduct","typeAd","cachedDataAdsLocal","cachedMessagesLocal","id","cachedMessagesNegotiationsLocal","unshift"],"mappings":"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","file":"static/js/main.12c52b80.chunk.js","sourcesContent":["import { grey } from '@material-ui/core/colors';\nimport { makeStyles, Theme, createStyles, withStyles } from '@material-ui/core';\nimport { Rating } from '@material-ui/lab';\n\nexport const useStyles = makeStyles(\n  (theme: Theme) =>\n    createStyles({\n      backdrop: {\n        zIndex: theme.zIndex.drawer + 1,\n        color: '#fff',\n      },\n      paper: {\n        marginTop: theme.spacing(4),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'flex-start',\n      },\n      buyButton: {\n        color: theme.palette.primary.main,\n        backgroundColor: grey[50],\n        '&:hover': {\n          backgroundColor: grey[100],\n        },\n      },\n      sellButton: {\n        color: '#fff',\n        backgroundColor: theme.palette.primary.main,\n        '&:hover': {\n          backgroundColor: theme.palette.primary.dark,\n        },\n        '&:disabled': {\n          color: '#fefefe',\n          backgroundColor: theme.palette.secondary.light,\n        },\n      },\n      buyHome: {\n        '&:hover': {\n          backgroundColor: 'rgb(100, 10, 40)',\n        },\n      },\n      sellHome: {\n        '&:hover': {\n          backgroundColor: 'rgb(250, 250, 241)',\n        },\n      },\n      cruiseHome: {\n        '&:hover': {\n          backgroundColor: 'rgb(250, 232, 250)',\n        },\n      },\n    }),\n  { index: 1 }\n);\n\nexport const useStylesForms = makeStyles(\n  (theme: Theme) => ({\n    paper: {\n      marginTop: theme.spacing(4),\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n    },\n    form: {\n      borderRadius: 16,\n      color: '#fff',\n      margin: 6,\n      padding: 6,\n      backgroundColor: '#6d1331',\n      width: '100%', // Fix IE 11 issue.\n      marginTop: theme.spacing(4),\n    },\n    submit: {\n      color: theme.palette.primary.main,\n      backgroundColor: grey[50],\n      '&:hover': {\n        backgroundColor: grey[100],\n      },\n      margin: theme.spacing(3, 0, 2),\n      display: 'flex',\n      alignItems: 'center',\n    },\n    formSell: {\n      borderRadius: 16,\n      borderColor: '#6d1331',\n      borderStyle: 'solid',\n      borderWidth: '1px',\n      color: '#6d1331',\n      margin: 6,\n      padding: 6,\n      backgroundColor: '#fff',\n      width: '100%', // Fix IE 11 issue.\n      marginTop: theme.spacing(4),\n    },\n    submitSell: {\n      color: '#fff',\n      backgroundColor: theme.palette.primary.main,\n      '&:hover': {\n        backgroundColor: theme.palette.primary.dark,\n      },\n      '&:disabled': {\n        color: '#fefefe',\n        backgroundColor: theme.palette.secondary.light,\n      },\n      margin: theme.spacing(3, 0, 2),\n      display: 'flex',\n      alignItems: 'center',\n    },\n\n    input: {\n      color: 'white',\n    },\n    inputSell: {\n      color: '#6d1331',\n    },\n    underline: {\n      color: 'white',\n      '&:before': {\n        borderBottom: '1px solid white',\n      },\n      '&&&&:hover:before': {\n        borderBottom: '2px solid white',\n      },\n      '&:after': {\n        borderBottom: '3px solid white',\n      },\n      disabled: {},\n      focused: {},\n      error: {},\n    },\n    underlineSell: {\n      color: '#6d1331',\n      '&:before': {\n        borderBottom: '1px solid #6d1331',\n      },\n      '&&&&:hover:before': {\n        borderBottom: '2px solid #6d1331',\n      },\n      '&:after': {\n        borderBottom: '3px solid #6d1331',\n      },\n      disabled: {},\n      focused: {},\n      error: {},\n    },\n  }),\n  { index: 1 }\n);\n\nexport const useStyleRating = makeStyles(\n  () => ({\n    root: {\n      width: 250,\n      display: 'flex',\n      alignItems: 'center',\n    },\n    list: {\n      width: 250,\n    },\n    bottomPush: {\n      width: 250,\n      position: 'fixed',\n      bottom: 0,\n      textAlign: 'center',\n      paddingBottom: 10,\n    },\n  }),\n  { index: 1 }\n);\n\nexport const StyledRating = withStyles({\n  iconFilled: {\n    color: '#6d1331',\n  },\n  iconHover: {\n    color: '#6d1331',\n  },\n})(Rating);\n","import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = {\n  [K in keyof T]: T[K];\n};\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> &\n  { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> &\n  { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  Date: any;\n};\n\nexport type Address = {\n  __typename?: 'Address';\n  via?: Maybe<Scalars['String']>;\n  CAP?: Maybe<Scalars['String']>;\n  comune: Scalars['String'];\n  provincia: Province;\n  regione: Regioni;\n};\n\nexport type AddressInput = {\n  via?: Maybe<Scalars['String']>;\n  CAP?: Maybe<Scalars['String']>;\n  comune: Scalars['String'];\n  provincia: Province;\n  regione: Regioni;\n};\n\nexport type AdInput = {\n  typeAd: TypeAd;\n  typeProduct: TypeProduct;\n  content: Scalars['String'];\n  address: AddressInput;\n  harvest: Scalars['Int'];\n  abv: Scalars['Float'];\n  wine?: Maybe<Scalars['ID']>;\n  wineName?: Maybe<Scalars['String']>;\n  vineyard?: Maybe<Scalars['ID']>;\n  vineyardName?: Maybe<Scalars['String']>;\n  sottoZona?: Maybe<Scalars['String']>;\n  menzione?: Maybe<Menzione>;\n  metodoProduttivo?: Maybe<MetodoProduttivo>;\n  priceFrom: Scalars['Float'];\n  priceTo: Scalars['Float'];\n  litersFrom?: Maybe<Scalars['Int']>;\n  litersTo?: Maybe<Scalars['Int']>;\n  kgFrom?: Maybe<Scalars['Int']>;\n  kgTo?: Maybe<Scalars['Int']>;\n  needsFollowUp?: Maybe<Scalars['Boolean']>;\n};\n\nexport type AdInputUpdate = {\n  _id: Scalars['ID'];\n  wine?: Maybe<Scalars['ID']>;\n  wineName?: Maybe<Scalars['String']>;\n  vineyard?: Maybe<Scalars['ID']>;\n  vineyardName?: Maybe<Scalars['String']>;\n  sottoZona?: Maybe<Scalars['String']>;\n  menzione?: Maybe<Menzione>;\n  metodoProduttivo?: Maybe<MetodoProduttivo>;\n  harvest?: Maybe<Scalars['Int']>;\n  abv?: Maybe<Scalars['Float']>;\n  priceFrom?: Maybe<Scalars['Float']>;\n  priceTo?: Maybe<Scalars['Float']>;\n  litersFrom?: Maybe<Scalars['Int']>;\n  litersTo?: Maybe<Scalars['Int']>;\n  content?: Maybe<Scalars['String']>;\n  address?: Maybe<AddressInput>;\n  isActive?: Maybe<Scalars['Boolean']>;\n  needsFollowUp?: Maybe<Scalars['Boolean']>;\n};\n\nexport type Ad = {\n  _id: Scalars['ID'];\n  postedBy: User;\n  harvest: Scalars['Int'];\n  abv: Scalars['Float'];\n  priceFrom: Scalars['Float'];\n  priceTo: Scalars['Float'];\n  content: Scalars['String'];\n  address: Address;\n  negotiations?: Maybe<Array<Negotiation>>;\n  activeNegotiations?: Maybe<Scalars['Int']>;\n  /** viewedBy: [User] */\n  numberViews?: Maybe<Scalars['Int']>;\n  typeAd: TypeAd;\n  typeProduct: TypeProduct;\n  isActive: Scalars['Boolean'];\n  datePosted?: Maybe<Scalars['String']>;\n  needsFollowUp?: Maybe<Scalars['Boolean']>;\n};\n\nexport type AdDatePostedArgs = {\n  format?: Maybe<Scalars['String']>;\n};\n\nexport type AdWine = Ad & {\n  __typename?: 'AdWine';\n  _id: Scalars['ID'];\n  postedBy: User;\n  wineName: Scalars['String'];\n  wine?: Maybe<Wine>;\n  sottoZona?: Maybe<Scalars['String']>;\n  menzione?: Maybe<Menzione>;\n  metodoProduttivo?: Maybe<MetodoProduttivo>;\n  harvest: Scalars['Int'];\n  abv: Scalars['Float'];\n  priceFrom: Scalars['Float'];\n  priceTo: Scalars['Float'];\n  litersFrom?: Maybe<Scalars['Int']>;\n  litersTo?: Maybe<Scalars['Int']>;\n  content: Scalars['String'];\n  address: Address;\n  negotiations?: Maybe<Array<Negotiation>>;\n  activeNegotiations?: Maybe<Scalars['Int']>;\n  /** viewedBy: [User] */\n  numberViews?: Maybe<Scalars['Int']>;\n  typeAd: TypeAd;\n  typeProduct: TypeProduct;\n  isActive: Scalars['Boolean'];\n  datePosted?: Maybe<Scalars['String']>;\n  needsFollowUp?: Maybe<Scalars['Boolean']>;\n};\n\nexport type AdWineDatePostedArgs = {\n  format?: Maybe<Scalars['String']>;\n};\n\nexport type AdGrape = Ad & {\n  __typename?: 'AdGrape';\n  _id: Scalars['ID'];\n  postedBy: User;\n  vineyardName: Scalars['String'];\n  vineyard?: Maybe<Vineyard>;\n  harvest: Scalars['Int'];\n  abv: Scalars['Float'];\n  priceFrom: Scalars['Float'];\n  priceTo: Scalars['Float'];\n  kgFrom: Scalars['Int'];\n  kgTo: Scalars['Int'];\n  content: Scalars['String'];\n  address: Address;\n  negotiations?: Maybe<Array<Negotiation>>;\n  activeNegotiations?: Maybe<Scalars['Int']>;\n  /** viewedBy: [User] */\n  numberViews?: Maybe<Scalars['Int']>;\n  typeAd: TypeAd;\n  typeProduct: TypeProduct;\n  isActive: Scalars['Boolean'];\n  datePosted?: Maybe<Scalars['String']>;\n  needsFollowUp?: Maybe<Scalars['Boolean']>;\n};\n\nexport type AdGrapeDatePostedArgs = {\n  format?: Maybe<Scalars['String']>;\n};\n\nexport type AdsResult = {\n  __typename?: 'AdsResult';\n  ads?: Maybe<Array<Maybe<Ad>>>;\n  pageCount?: Maybe<Scalars['Int']>;\n};\n\nexport type AdPayload = {\n  __typename?: 'AdPayload';\n  response?: Maybe<Ad>;\n  errors?: Maybe<Array<Maybe<Errors>>>;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  ad?: Maybe<Ad>;\n  ads?: Maybe<AdsResult>;\n  adsForUser?: Maybe<AdsResult>;\n  isLoggedIn: Scalars['Boolean'];\n  me?: Maybe<User>;\n  message?: Maybe<Message>;\n  messages?: Maybe<Array<Message>>;\n  messagesForNegotiation?: Maybe<MessageResult>;\n  messagesToUser?: Maybe<Array<Message>>;\n  myInfo?: Maybe<User>;\n  negotiation?: Maybe<Negotiation>;\n  negotiations?: Maybe<NegotiationResult>;\n  negotiationsForAd?: Maybe<Array<Negotiation>>;\n  negotiationsWithUser?: Maybe<Array<Negotiation>>;\n  notification?: Maybe<Notification>;\n  review?: Maybe<Review>;\n  reviews?: Maybe<ReviewResult>;\n  searchedWine?: Maybe<WineSearched>;\n  user?: Maybe<User>;\n  users?: Maybe<Array<User>>;\n  vineyard?: Maybe<Vineyard>;\n  vineyards?: Maybe<Array<Vineyard>>;\n  wine?: Maybe<Wine>;\n  wines?: Maybe<Array<Wine>>;\n};\n\nexport type QueryAdArgs = {\n  id: Scalars['ID'];\n};\n\nexport type QueryAdsArgs = {\n  typeAd: TypeAd;\n  typeProduct: TypeProduct;\n  wineName?: Maybe<Scalars['String']>;\n  vineyardName?: Maybe<Scalars['String']>;\n  offset?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<QueryOrderBy>;\n  limit?: Maybe<Scalars['Int']>;\n};\n\nexport type QueryAdsForUserArgs = {\n  offset?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<QueryOrderBy>;\n  limit?: Maybe<Scalars['Int']>;\n  isActive?: Maybe<Scalars['Boolean']>;\n  user: Scalars['ID'];\n};\n\nexport type QueryMessageArgs = {\n  id: Scalars['ID'];\n};\n\nexport type QueryMessagesForNegotiationArgs = {\n  negotiation: Scalars['ID'];\n  offset?: Maybe<Scalars['Int']>;\n  limit?: Maybe<Scalars['Int']>;\n};\n\nexport type QueryMessagesToUserArgs = {\n  sentTo: Scalars['ID'];\n};\n\nexport type QueryNegotiationArgs = {\n  id: Scalars['ID'];\n};\n\nexport type QueryNegotiationsArgs = {\n  offset?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<QueryOrderBy>;\n  limit?: Maybe<Scalars['Int']>;\n  isConcluded?: Maybe<Scalars['Boolean']>;\n};\n\nexport type QueryNegotiationsForAdArgs = {\n  ad: Scalars['ID'];\n};\n\nexport type QueryNegotiationsWithUserArgs = {\n  forUserAd: Scalars['ID'];\n};\n\nexport type QueryReviewArgs = {\n  id: Scalars['ID'];\n};\n\nexport type QueryReviewsArgs = {\n  offset?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<QueryOrderBy>;\n  limit?: Maybe<Scalars['Int']>;\n};\n\nexport type QueryUserArgs = {\n  id: Scalars['ID'];\n};\n\nexport type QueryVineyardArgs = {\n  id: Scalars['ID'];\n};\n\nexport type QueryWineArgs = {\n  id: Scalars['ID'];\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  createAd?: Maybe<AdPayload>;\n  updateAd?: Maybe<AdPayload>;\n  deleteAd?: Maybe<AdPayload>;\n  saveAd?: Maybe<AdPayload>;\n  createMessage?: Maybe<MessagePayload>;\n  createNegotiation?: Maybe<NegotiationPayload>;\n  updateNegotiation?: Maybe<NegotiationPayload>;\n  deleteNegotiation?: Maybe<NegotiationPayload>;\n  createReview?: Maybe<ReviewPayload>;\n  updateReview?: Maybe<ReviewPayload>;\n  deleteReview?: Maybe<ReviewPayload>;\n  createUser?: Maybe<AuthUserPayload>;\n  updateUser?: Maybe<UserPayload>;\n  deleteUser?: Maybe<UserPayload>;\n  login?: Maybe<AuthUserPayload>;\n  createWine?: Maybe<WinePayload>;\n  updateWine?: Maybe<WinePayload>;\n  deleteWine?: Maybe<WinePayload>;\n  createVineyard?: Maybe<VineyardPayload>;\n  updateVineyard?: Maybe<VineyardPayload>;\n  deleteVineyard?: Maybe<VineyardPayload>;\n};\n\nexport type MutationCreateAdArgs = {\n  input: AdInput;\n};\n\nexport type MutationUpdateAdArgs = {\n  input: AdInputUpdate;\n};\n\nexport type MutationDeleteAdArgs = {\n  id: Scalars['ID'];\n};\n\nexport type MutationSaveAdArgs = {\n  id: Scalars['ID'];\n};\n\nexport type MutationCreateMessageArgs = {\n  message: MessageInput;\n};\n\nexport type MutationCreateNegotiationArgs = {\n  negotiation: NegotiationInput;\n};\n\nexport type MutationUpdateNegotiationArgs = {\n  negotiation: NegotiationInputUpdate;\n};\n\nexport type MutationDeleteNegotiationArgs = {\n  id: Scalars['ID'];\n};\n\nexport type MutationCreateReviewArgs = {\n  review: ReviewInput;\n};\n\nexport type MutationUpdateReviewArgs = {\n  review: ReviewInputUpdate;\n};\n\nexport type MutationDeleteReviewArgs = {\n  id: Scalars['ID'];\n};\n\nexport type MutationCreateUserArgs = {\n  user: UserInput;\n};\n\nexport type MutationUpdateUserArgs = {\n  user: UserInputUpdate;\n};\n\nexport type MutationDeleteUserArgs = {\n  id: Scalars['ID'];\n};\n\nexport type MutationLoginArgs = {\n  email: Scalars['String'];\n  password: Scalars['String'];\n};\n\nexport type MutationCreateWineArgs = {\n  wine: WineInput;\n};\n\nexport type MutationUpdateWineArgs = {\n  wine: WineInputUpdate;\n};\n\nexport type MutationDeleteWineArgs = {\n  id: Scalars['ID'];\n};\n\nexport type MutationCreateVineyardArgs = {\n  vineyard: VineyardInput;\n};\n\nexport type MutationUpdateVineyardArgs = {\n  vineyard: VineyardInputUpdate;\n};\n\nexport type MutationDeleteVineyardArgs = {\n  id: Scalars['ID'];\n};\n\nexport type Subscription = {\n  __typename?: 'Subscription';\n  adPostedFollowUp: Ad;\n  adRemoved: Ad;\n  messageSent: Message;\n  negotiationCreated: Negotiation;\n  negotiationClosed: Ad;\n  reviewCreated: Review;\n};\n\nexport type MessageInput = {\n  content: Scalars['String'];\n  sentTo: Scalars['ID'];\n  negotiation: Scalars['ID'];\n};\n\nexport type Message = {\n  __typename?: 'Message';\n  _id: Scalars['ID'];\n  content: Scalars['String'];\n  sentBy: User;\n  sentTo: User;\n  negotiation: Negotiation;\n  dateSent?: Maybe<Scalars['String']>;\n  isViewed: Scalars['Boolean'];\n};\n\nexport type MessageDateSentArgs = {\n  format?: Maybe<Scalars['String']>;\n};\n\nexport type MessagePayload = {\n  __typename?: 'MessagePayload';\n  response?: Maybe<Message>;\n  errors?: Maybe<Array<Maybe<Errors>>>;\n};\n\nexport type MessageResult = {\n  __typename?: 'MessageResult';\n  messages?: Maybe<Array<Maybe<Message>>>;\n  pageCount?: Maybe<Scalars['Int']>;\n};\n\nexport type NegotiationInput = {\n  ad: Scalars['ID'];\n  forUserAd: Scalars['ID'];\n  type: TypeAd;\n};\n\nexport type NegotiationInputUpdate = {\n  _id: Scalars['ID'];\n  isConcluded?: Maybe<Scalars['Boolean']>;\n};\n\nexport type Negotiation = {\n  __typename?: 'Negotiation';\n  _id: Scalars['ID'];\n  createdBy: User;\n  ad: Ad;\n  forUserAd: User;\n  messages?: Maybe<Array<Message>>;\n  isConcluded: Scalars['Boolean'];\n  dateCreated?: Maybe<Scalars['String']>;\n  dateConcluded?: Maybe<Scalars['String']>;\n  review?: Maybe<Array<Maybe<Review>>>;\n  type: TypeAd;\n};\n\nexport type NegotiationDateCreatedArgs = {\n  format?: Maybe<Scalars['String']>;\n};\n\nexport type NegotiationDateConcludedArgs = {\n  format?: Maybe<Scalars['String']>;\n};\n\nexport type NegotiationResult = {\n  __typename?: 'NegotiationResult';\n  negotiations?: Maybe<Array<Maybe<Negotiation>>>;\n  pageCount?: Maybe<Scalars['Int']>;\n};\n\nexport type NegotiationPayload = {\n  __typename?: 'NegotiationPayload';\n  response?: Maybe<Negotiation>;\n  errors?: Maybe<Array<Maybe<Errors>>>;\n};\n\nexport type ReviewInput = {\n  negotiation: Scalars['ID'];\n  forUser: Scalars['ID'];\n  rating: Scalars['Float'];\n  content: Scalars['String'];\n  type: TypeAd;\n};\n\nexport type ReviewInputUpdate = {\n  _id: Scalars['ID'];\n  rating?: Maybe<Scalars['Float']>;\n  content?: Maybe<Scalars['String']>;\n};\n\nexport type ReviewResult = {\n  __typename?: 'ReviewResult';\n  reviews?: Maybe<Array<Maybe<Review>>>;\n  pageCount?: Maybe<Scalars['Int']>;\n};\n\nexport type Review = {\n  __typename?: 'Review';\n  _id: Scalars['ID'];\n  createdBy: User;\n  negotiation: Negotiation;\n  forUser: User;\n  rating: Scalars['Float'];\n  dateCreated?: Maybe<Scalars['String']>;\n  content: Scalars['String'];\n  type: TypeAd;\n};\n\nexport type ReviewDateCreatedArgs = {\n  format?: Maybe<Scalars['String']>;\n};\n\nexport type ReviewPayload = {\n  __typename?: 'ReviewPayload';\n  response?: Maybe<Review>;\n  errors?: Maybe<Array<Maybe<Errors>>>;\n};\n\nexport type ProducedWines = {\n  __typename?: 'ProducedWines';\n  wine: Wine;\n  bottlesProduced: Scalars['Int'];\n  metodoProduttivo: MetodoProduttivo;\n};\n\nexport type OwnedVineyards = {\n  __typename?: 'OwnedVineyards';\n  vineyard: Vineyard;\n  tonsProduced: Scalars['Int'];\n  metodoProduttivo: MetodoProduttivo;\n};\n\nexport type ProducedWinesInput = {\n  wine: Scalars['ID'];\n  bottlesProduced?: Maybe<Scalars['Int']>;\n  metodoProduttivo?: Maybe<MetodoProduttivo>;\n};\n\nexport type OwnedVineyardsInput = {\n  vineyard: Scalars['ID'];\n  tonsProduced?: Maybe<Scalars['Int']>;\n  metodoProduttivo?: Maybe<MetodoProduttivo>;\n};\n\nexport type UserInput = {\n  email: Scalars['String'];\n  password: Scalars['String'];\n  firstName: Scalars['String'];\n  lastName: Scalars['String'];\n  pIva: Scalars['String'];\n  phoneNumber: Scalars['String'];\n  address: AddressInput;\n  hideContact: Scalars['Boolean'];\n  producedWines?: Maybe<ProducedWinesInput>;\n  ownedVineyards?: Maybe<OwnedVineyardsInput>;\n};\n\nexport type UserInputUpdate = {\n  _id: Scalars['ID'];\n  email?: Maybe<Scalars['String']>;\n  password?: Maybe<Scalars['String']>;\n  firstName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  pIva?: Maybe<Scalars['String']>;\n  phoneNumber?: Maybe<Scalars['String']>;\n  address?: Maybe<AddressInput>;\n  isVerified?: Maybe<Scalars['Boolean']>;\n  isPremium?: Maybe<Scalars['Boolean']>;\n  hideContact: Scalars['Boolean'];\n  producedWines?: Maybe<ProducedWinesInput>;\n  ownedVineyards?: Maybe<OwnedVineyardsInput>;\n};\n\nexport type User = {\n  __typename?: 'User';\n  _id: Scalars['ID'];\n  email: Scalars['String'];\n  firstName: Scalars['String'];\n  lastName: Scalars['String'];\n  pIva: Scalars['String'];\n  phoneNumber: Scalars['String'];\n  address: Address;\n  isVerified: Scalars['Boolean'];\n  isPremium?: Maybe<Scalars['Boolean']>;\n  isAdmin: Scalars['Boolean'];\n  hideContact: Scalars['Boolean'];\n  ads?: Maybe<Array<Ad>>;\n  savedAds?: Maybe<Array<Ad>>;\n  messages?: Maybe<Array<Message>>;\n  negotiations?: Maybe<Array<Negotiation>>;\n  reviews?: Maybe<Array<Review>>;\n  adsRemaining?: Maybe<Scalars['Int']>;\n  dateCreated?: Maybe<Scalars['String']>;\n  producedWines?: Maybe<ProducedWines>;\n  ownedVineyards?: Maybe<OwnedVineyards>;\n};\n\nexport type UserDateCreatedArgs = {\n  format?: Maybe<Scalars['String']>;\n};\n\nexport type AuthUser = {\n  __typename?: 'AuthUser';\n  token: Scalars['String'];\n  user: User;\n};\n\nexport type AuthUserPayload = {\n  __typename?: 'AuthUserPayload';\n  response?: Maybe<AuthUser>;\n  errors?: Maybe<Array<Maybe<Errors>>>;\n};\n\nexport type UserPayload = {\n  __typename?: 'UserPayload';\n  response?: Maybe<User>;\n  errors?: Maybe<Array<Maybe<Errors>>>;\n};\n\nexport type WineInput = {\n  denominazioneVino: Scalars['String'];\n  aka?: Maybe<Scalars['String']>;\n  espressioneComunitaria: EspressioneComunitaria;\n  denominazioneZona: DenomZona;\n  regione: Array<Regioni>;\n};\n\nexport type WineInputUpdate = {\n  _id: Scalars['ID'];\n  denominazioneVino?: Maybe<Scalars['String']>;\n  aka?: Maybe<Scalars['String']>;\n  espressioneComunitaria?: Maybe<EspressioneComunitaria>;\n  denominazioneZona?: Maybe<DenomZona>;\n  regione?: Maybe<Array<Maybe<Regioni>>>;\n};\n\nexport type Wine = {\n  __typename?: 'Wine';\n  _id: Scalars['ID'];\n  denominazioneVino: Scalars['String'];\n  aka?: Maybe<Scalars['String']>;\n  espressioneComunitaria: EspressioneComunitaria;\n  denominazioneZona: DenomZona;\n  regione: Array<Regioni>;\n};\n\nexport type WinePayload = {\n  __typename?: 'WinePayload';\n  response?: Maybe<Wine>;\n  errors?: Maybe<Array<Maybe<Errors>>>;\n};\n\nexport type Vineyard = {\n  __typename?: 'Vineyard';\n  _id: Scalars['ID'];\n  name: Scalars['String'];\n  colore?: Maybe<Colore>;\n};\n\nexport type VineyardInput = {\n  name: Scalars['String'];\n  colore?: Maybe<Colore>;\n};\n\nexport type VineyardInputUpdate = {\n  _id: Scalars['ID'];\n  name?: Maybe<Scalars['String']>;\n  colore?: Maybe<Colore>;\n};\n\nexport type VineyardPayload = {\n  __typename?: 'VineyardPayload';\n  response?: Maybe<Vineyard>;\n  errors?: Maybe<Array<Maybe<Errors>>>;\n};\n\nexport enum Province {\n  AG = 'AG',\n  AL = 'AL',\n  AN = 'AN',\n  AO = 'AO',\n  AP = 'AP',\n  AQ = 'AQ',\n  AR = 'AR',\n  AT = 'AT',\n  AV = 'AV',\n  BA = 'BA',\n  BG = 'BG',\n  BI = 'BI',\n  BL = 'BL',\n  BN = 'BN',\n  BO = 'BO',\n  BR = 'BR',\n  BS = 'BS',\n  BT = 'BT',\n  BZ = 'BZ',\n  CA = 'CA',\n  CB = 'CB',\n  CE = 'CE',\n  CH = 'CH',\n  CL = 'CL',\n  CN = 'CN',\n  CO = 'CO',\n  CR = 'CR',\n  CS = 'CS',\n  CT = 'CT',\n  CZ = 'CZ',\n  EN = 'EN',\n  FC = 'FC',\n  FE = 'FE',\n  FG = 'FG',\n  FI = 'FI',\n  FM = 'FM',\n  FR = 'FR',\n  GE = 'GE',\n  GO = 'GO',\n  GR = 'GR',\n  IM = 'IM',\n  IS = 'IS',\n  KR = 'KR',\n  LC = 'LC',\n  LE = 'LE',\n  LI = 'LI',\n  LO = 'LO',\n  LT = 'LT',\n  LU = 'LU',\n  MB = 'MB',\n  MC = 'MC',\n  ME = 'ME',\n  MI = 'MI',\n  MN = 'MN',\n  MO = 'MO',\n  MS = 'MS',\n  MT = 'MT',\n  NA = 'NA',\n  NO = 'NO',\n  NU = 'NU',\n  OR = 'OR',\n  PA = 'PA',\n  PC = 'PC',\n  PD = 'PD',\n  PE = 'PE',\n  PG = 'PG',\n  PI = 'PI',\n  PN = 'PN',\n  PO = 'PO',\n  PR = 'PR',\n  PT = 'PT',\n  PU = 'PU',\n  PV = 'PV',\n  PZ = 'PZ',\n  RA = 'RA',\n  RC = 'RC',\n  RE = 'RE',\n  RG = 'RG',\n  RI = 'RI',\n  RM = 'RM',\n  RN = 'RN',\n  RO = 'RO',\n  SA = 'SA',\n  SI = 'SI',\n  SO = 'SO',\n  SP = 'SP',\n  SR = 'SR',\n  SS = 'SS',\n  SU = 'SU',\n  SV = 'SV',\n  TA = 'TA',\n  TE = 'TE',\n  TN = 'TN',\n  TO = 'TO',\n  TP = 'TP',\n  TR = 'TR',\n  TS = 'TS',\n  TV = 'TV',\n  UD = 'UD',\n  VA = 'VA',\n  VB = 'VB',\n  VC = 'VC',\n  VE = 'VE',\n  VI = 'VI',\n  VR = 'VR',\n  VT = 'VT',\n  VV = 'VV',\n}\n\nexport enum Regioni {\n  Abruzzo = 'ABRUZZO',\n  Basilicata = 'BASILICATA',\n  Calabria = 'CALABRIA',\n  Campania = 'CAMPANIA',\n  Emilia = 'EMILIA',\n  Friuli = 'FRIULI',\n  Lazio = 'LAZIO',\n  Liguria = 'LIGURIA',\n  Lombardia = 'LOMBARDIA',\n  Marche = 'MARCHE',\n  Molise = 'MOLISE',\n  Piemonte = 'PIEMONTE',\n  Puglia = 'PUGLIA',\n  Sardegna = 'SARDEGNA',\n  Sicilia = 'SICILIA',\n  Toscana = 'TOSCANA',\n  Trentino = 'TRENTINO',\n  Umbria = 'UMBRIA',\n  Valdaosta = 'VALDAOSTA',\n  Veneto = 'VENETO',\n}\n\nexport enum TypeAd {\n  Sell = 'SELL',\n  Buy = 'BUY',\n}\n\nexport enum TypeProduct {\n  AdWine = 'AdWine',\n  AdGrape = 'AdGrape',\n}\n\nexport enum Menzione {\n  Classico = 'CLASSICO',\n  Riserva = 'RISERVA',\n  Superiore = 'SUPERIORE',\n  Vigna = 'VIGNA',\n}\n\nexport enum MetodoProduttivo {\n  Convenzionale = 'CONVENZIONALE',\n  Biologico = 'BIOLOGICO',\n  Biodinamico = 'BIODINAMICO',\n  Naturale = 'NATURALE',\n  Vegano = 'VEGANO',\n}\n\nexport enum Colore {\n  Bianca = 'BIANCA',\n  Rossa = 'ROSSA',\n}\n\nexport enum EspressioneComunitaria {\n  Dop = 'DOP',\n  Igp = 'IGP',\n  Nd = 'ND',\n}\n\nexport enum DenomZona {\n  Doc = 'DOC',\n  Docg = 'DOCG',\n  Igt = 'IGT',\n  Varietale = 'VARIETALE',\n  Vino = 'VINO',\n}\n\nexport enum QueryOrderBy {\n  CreatedAtAsc = 'createdAt_ASC',\n  CreatedAtDesc = 'createdAt_DESC',\n  PriceAsc = 'price_ASC',\n  PriceDesc = 'price_DESC',\n}\n\nexport type Errors = {\n  __typename?: 'Errors';\n  name?: Maybe<Scalars['String']>;\n  text?: Maybe<Scalars['String']>;\n};\n\nexport enum AlertStatus {\n  Success = 'success',\n  Warning = 'warning',\n  Info = 'info',\n  Error = 'error',\n}\n\nexport type WineSearched = {\n  __typename?: 'WineSearched';\n  typeAd?: Maybe<TypeAd>;\n  typeProduct?: Maybe<TypeProduct>;\n  wineName?: Maybe<Scalars['String']>;\n  harvest?: Maybe<Scalars['Int']>;\n  abv?: Maybe<Scalars['Float']>;\n  price?: Maybe<Scalars['Float']>;\n  liters?: Maybe<Scalars['Int']>;\n  isPost?: Maybe<Scalars['Boolean']>;\n};\n\nexport type Notification = {\n  __typename?: 'Notification';\n  type?: AlertStatus;\n  message?: Maybe<Scalars['String']>;\n};\n\nexport type LoginMutationVariables = Exact<{\n  email: Scalars['String'];\n  password: Scalars['String'];\n}>;\n\nexport type LoginMutation = { __typename?: 'Mutation' } & {\n  login?: Maybe<\n    { __typename?: 'AuthUserPayload' } & {\n      response?: Maybe<\n        { __typename?: 'AuthUser' } & Pick<AuthUser, 'token'> & {\n            user: { __typename?: 'User' } & Pick<User, '_id' | 'firstName'> & {\n                address: { __typename?: 'Address' } & Pick<\n                  Address,\n                  'regione' | 'provincia' | 'comune'\n                >;\n              };\n          }\n      >;\n      errors?: Maybe<\n        Array<Maybe<{ __typename?: 'Errors' } & Pick<Errors, 'name' | 'text'>>>\n      >;\n    }\n  >;\n};\n\nexport type CreateUserMutationVariables = Exact<{\n  userInput: UserInput;\n}>;\n\nexport type CreateUserMutation = { __typename?: 'Mutation' } & {\n  createUser?: Maybe<\n    { __typename?: 'AuthUserPayload' } & {\n      response?: Maybe<\n        { __typename?: 'AuthUser' } & Pick<AuthUser, 'token'> & {\n            user: { __typename?: 'User' } & Pick<User, '_id' | 'firstName'>;\n          }\n      >;\n      errors?: Maybe<\n        Array<Maybe<{ __typename?: 'Errors' } & Pick<Errors, 'name' | 'text'>>>\n      >;\n    }\n  >;\n};\n\nexport type UpdateUserMutationVariables = Exact<{\n  user: UserInputUpdate;\n}>;\n\nexport type UpdateUserMutation = { __typename?: 'Mutation' } & {\n  updateUser?: Maybe<\n    { __typename?: 'UserPayload' } & {\n      response?: Maybe<\n        { __typename?: 'User' } & Pick<User, '_id' | 'firstName'>\n      >;\n      errors?: Maybe<\n        Array<Maybe<{ __typename?: 'Errors' } & Pick<Errors, 'name' | 'text'>>>\n      >;\n    }\n  >;\n};\n\nexport type DeleteUserMutationVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\nexport type DeleteUserMutation = { __typename?: 'Mutation' } & {\n  deleteUser?: Maybe<\n    { __typename?: 'UserPayload' } & {\n      response?: Maybe<\n        { __typename?: 'User' } & Pick<User, '_id' | 'firstName'>\n      >;\n      errors?: Maybe<\n        Array<Maybe<{ __typename?: 'Errors' } & Pick<Errors, 'name' | 'text'>>>\n      >;\n    }\n  >;\n};\n\nexport type CreateAdWineMutationVariables = Exact<{\n  input: AdInput;\n}>;\n\nexport type CreateAdWineMutation = { __typename?: 'Mutation' } & {\n  createAd?: Maybe<\n    { __typename?: 'AdPayload' } & {\n      response?: Maybe<\n        | ({ __typename?: 'AdWine' } & Pick<\n            AdWine,\n            | 'wineName'\n            | 'litersFrom'\n            | 'litersTo'\n            | 'metodoProduttivo'\n            | '_id'\n            | 'harvest'\n            | 'abv'\n            | 'priceFrom'\n            | 'priceTo'\n            | 'typeAd'\n            | 'activeNegotiations'\n            | 'numberViews'\n            | 'datePosted'\n          > & {\n              wine?: Maybe<\n                { __typename?: 'Wine' } & Pick<\n                  Wine,\n                  'denominazioneZona' | 'regione'\n                >\n              >;\n              postedBy: { __typename?: 'User' } & Pick<User, '_id'>;\n              address: { __typename?: 'Address' } & Pick<\n                Address,\n                'regione' | 'provincia' | 'comune'\n              >;\n            })\n        | ({ __typename?: 'AdGrape' } & Pick<\n            AdGrape,\n            | '_id'\n            | 'harvest'\n            | 'abv'\n            | 'priceFrom'\n            | 'priceTo'\n            | 'typeAd'\n            | 'activeNegotiations'\n            | 'numberViews'\n            | 'datePosted'\n          > & {\n              postedBy: { __typename?: 'User' } & Pick<User, '_id'>;\n              address: { __typename?: 'Address' } & Pick<\n                Address,\n                'regione' | 'provincia' | 'comune'\n              >;\n            })\n      >;\n      errors?: Maybe<\n        Array<Maybe<{ __typename?: 'Errors' } & Pick<Errors, 'name' | 'text'>>>\n      >;\n    }\n  >;\n};\n\nexport type UpdateAdWineMutationVariables = Exact<{\n  input: AdInputUpdate;\n}>;\n\nexport type UpdateAdWineMutation = { __typename?: 'Mutation' } & {\n  updateAd?: Maybe<\n    { __typename?: 'AdPayload' } & {\n      response?: Maybe<\n        | ({ __typename?: 'AdWine' } & Pick<AdWine, '_id'>)\n        | ({ __typename?: 'AdGrape' } & Pick<AdGrape, '_id'>)\n      >;\n      errors?: Maybe<\n        Array<Maybe<{ __typename?: 'Errors' } & Pick<Errors, 'name' | 'text'>>>\n      >;\n    }\n  >;\n};\n\nexport type SaveAdMutationVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\nexport type SaveAdMutation = { __typename?: 'Mutation' } & {\n  saveAd?: Maybe<\n    { __typename?: 'AdPayload' } & {\n      response?: Maybe<\n        | ({ __typename?: 'AdWine' } & Pick<\n            AdWine,\n            | 'wineName'\n            | 'litersFrom'\n            | 'litersTo'\n            | '_id'\n            | 'harvest'\n            | 'abv'\n            | 'priceFrom'\n            | 'priceTo'\n            | 'datePosted'\n          > & {\n              wine?: Maybe<\n                { __typename?: 'Wine' } & Pick<Wine, 'denominazioneZona'>\n              >;\n            })\n        | ({ __typename?: 'AdGrape' } & Pick<\n            AdGrape,\n            '_id' | 'harvest' | 'abv' | 'priceFrom' | 'priceTo' | 'datePosted'\n          >)\n      >;\n      errors?: Maybe<\n        Array<Maybe<{ __typename?: 'Errors' } & Pick<Errors, 'name' | 'text'>>>\n      >;\n    }\n  >;\n};\n\nexport type DeleteAdMutationVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\nexport type DeleteAdMutation = { __typename?: 'Mutation' } & {\n  deleteAd?: Maybe<\n    { __typename?: 'AdPayload' } & {\n      response?: Maybe<\n        | ({ __typename?: 'AdWine' } & Pick<AdWine, '_id'>)\n        | ({ __typename?: 'AdGrape' } & Pick<AdGrape, '_id'>)\n      >;\n      errors?: Maybe<\n        Array<Maybe<{ __typename?: 'Errors' } & Pick<Errors, 'name' | 'text'>>>\n      >;\n    }\n  >;\n};\n\nexport type CreateNegotiationMutationVariables = Exact<{\n  negotiation: NegotiationInput;\n}>;\n\nexport type CreateNegotiationMutation = { __typename?: 'Mutation' } & {\n  createNegotiation?: Maybe<\n    { __typename?: 'NegotiationPayload' } & {\n      response?: Maybe<\n        { __typename?: 'Negotiation' } & NegotiationDetailsFragment\n      >;\n      errors?: Maybe<\n        Array<Maybe<{ __typename?: 'Errors' } & Pick<Errors, 'name' | 'text'>>>\n      >;\n    }\n  >;\n};\n\nexport type UpdateNegotiationMutationVariables = Exact<{\n  negotiation: NegotiationInputUpdate;\n}>;\n\nexport type UpdateNegotiationMutation = { __typename?: 'Mutation' } & {\n  updateNegotiation?: Maybe<\n    { __typename?: 'NegotiationPayload' } & {\n      response?: Maybe<\n        { __typename?: 'Negotiation' } & NegotiationDetailsFragment\n      >;\n      errors?: Maybe<\n        Array<Maybe<{ __typename?: 'Errors' } & Pick<Errors, 'name' | 'text'>>>\n      >;\n    }\n  >;\n};\n\nexport type DeleteNegotiationMutationVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\nexport type DeleteNegotiationMutation = { __typename?: 'Mutation' } & {\n  deleteNegotiation?: Maybe<\n    { __typename?: 'NegotiationPayload' } & {\n      response?: Maybe<\n        { __typename?: 'Negotiation' } & Pick<Negotiation, '_id'>\n      >;\n      errors?: Maybe<\n        Array<Maybe<{ __typename?: 'Errors' } & Pick<Errors, 'name' | 'text'>>>\n      >;\n    }\n  >;\n};\n\nexport type CreateMessageMutationVariables = Exact<{\n  message: MessageInput;\n}>;\n\nexport type CreateMessageMutation = { __typename?: 'Mutation' } & {\n  createMessage?: Maybe<\n    { __typename?: 'MessagePayload' } & {\n      response?: Maybe<{ __typename?: 'Message' } & MessageDetailsFragment>;\n      errors?: Maybe<\n        Array<Maybe<{ __typename?: 'Errors' } & Pick<Errors, 'name' | 'text'>>>\n      >;\n    }\n  >;\n};\n\nexport type CreateReviewMutationVariables = Exact<{\n  review: ReviewInput;\n}>;\n\nexport type CreateReviewMutation = { __typename?: 'Mutation' } & {\n  createReview?: Maybe<\n    { __typename?: 'ReviewPayload' } & {\n      response?: Maybe<{ __typename?: 'Review' } & ReviewDetailsFragment>;\n      errors?: Maybe<\n        Array<Maybe<{ __typename?: 'Errors' } & Pick<Errors, 'name' | 'text'>>>\n      >;\n    }\n  >;\n};\n\ntype AdDetails_AdWine_Fragment = { __typename?: 'AdWine' } & Pick<\n  AdWine,\n  | 'wineName'\n  | 'litersFrom'\n  | 'litersTo'\n  | 'metodoProduttivo'\n  | '_id'\n  | 'needsFollowUp'\n  | 'harvest'\n  | 'abv'\n  | 'priceFrom'\n  | 'priceTo'\n  | 'typeAd'\n  | 'activeNegotiations'\n  | 'datePosted'\n> & {\n    wine?: Maybe<\n      { __typename?: 'Wine' } & Pick<Wine, 'denominazioneZona' | 'regione'>\n    >;\n    postedBy: { __typename?: 'User' } & Pick<\n      User,\n      '_id' | 'firstName' | 'lastName' | 'hideContact'\n    >;\n    address: { __typename?: 'Address' } & Pick<\n      Address,\n      'regione' | 'provincia'\n    >;\n  };\n\ntype AdDetails_AdGrape_Fragment = { __typename?: 'AdGrape' } & Pick<\n  AdGrape,\n  | '_id'\n  | 'needsFollowUp'\n  | 'harvest'\n  | 'abv'\n  | 'priceFrom'\n  | 'priceTo'\n  | 'typeAd'\n  | 'activeNegotiations'\n  | 'datePosted'\n> & {\n    postedBy: { __typename?: 'User' } & Pick<\n      User,\n      '_id' | 'firstName' | 'lastName' | 'hideContact'\n    >;\n    address: { __typename?: 'Address' } & Pick<\n      Address,\n      'regione' | 'provincia'\n    >;\n  };\n\nexport type AdDetailsFragment =\n  | AdDetails_AdWine_Fragment\n  | AdDetails_AdGrape_Fragment;\n\nexport type NegotiationDetailsFragment = { __typename?: 'Negotiation' } & Pick<\n  Negotiation,\n  '_id' | 'type' | 'dateCreated' | 'dateConcluded' | 'isConcluded'\n> & {\n    createdBy: { __typename?: 'User' } & Pick<User, '_id' | 'firstName'>;\n    ad:\n      | ({ __typename?: 'AdWine' } & Pick<AdWine, 'wineName' | '_id'> & {\n            postedBy: { __typename?: 'User' } & Pick<\n              User,\n              '_id' | 'firstName' | 'lastName'\n            >;\n          })\n      | ({ __typename?: 'AdGrape' } & Pick<AdGrape, '_id'> & {\n            postedBy: { __typename?: 'User' } & Pick<\n              User,\n              '_id' | 'firstName' | 'lastName'\n            >;\n          });\n    forUserAd: { __typename?: 'User' } & Pick<User, '_id' | 'firstName'>;\n    review?: Maybe<\n      Array<\n        Maybe<\n          { __typename?: 'Review' } & Pick<Review, '_id'> & {\n              createdBy: { __typename?: 'User' } & Pick<User, '_id'>;\n            }\n        >\n      >\n    >;\n  };\n\nexport type MessageDetailsFragment = { __typename?: 'Message' } & Pick<\n  Message,\n  '_id' | 'content' | 'isViewed' | 'dateSent'\n> & {\n    sentBy: { __typename?: 'User' } & Pick<\n      User,\n      '_id' | 'firstName' | 'lastName'\n    >;\n    sentTo: { __typename?: 'User' } & Pick<\n      User,\n      '_id' | 'firstName' | 'lastName'\n    >;\n    negotiation: { __typename?: 'Negotiation' } & Pick<\n      Negotiation,\n      '_id' | 'type' | 'isConcluded'\n    > & {\n        ad:\n          | ({ __typename?: 'AdWine' } & Pick<AdWine, 'wineName' | '_id'>)\n          | ({ __typename?: 'AdGrape' } & Pick<AdGrape, '_id'>);\n      };\n  };\n\nexport type ReviewDetailsFragment = { __typename?: 'Review' } & Pick<\n  Review,\n  '_id' | 'rating' | 'dateCreated' | 'content' | 'type'\n> & {\n    createdBy: { __typename?: 'User' } & Pick<\n      User,\n      '_id' | 'firstName' | 'lastName'\n    >;\n    negotiation: { __typename?: 'Negotiation' } & Pick<Negotiation, '_id'> & {\n        ad:\n          | ({ __typename?: 'AdWine' } & Pick<AdWine, 'wineName' | '_id'>)\n          | ({ __typename?: 'AdGrape' } & Pick<AdGrape, '_id'>);\n      };\n    forUser: { __typename?: 'User' } & Pick<\n      User,\n      '_id' | 'firstName' | 'lastName'\n    >;\n  };\n\nexport type FavoriteQueryVariables = Exact<{ [key: string]: never }>;\n\nexport type FavoriteQuery = { __typename?: 'Query' } & {\n  me?: Maybe<\n    { __typename?: 'User' } & {\n      savedAds?: Maybe<\n        Array<\n          | ({ __typename?: 'AdWine' } & Pick<\n              AdWine,\n              | 'wineName'\n              | 'litersFrom'\n              | 'litersTo'\n              | 'metodoProduttivo'\n              | '_id'\n              | 'harvest'\n              | 'abv'\n              | 'priceFrom'\n              | 'priceTo'\n              | 'typeAd'\n              | 'activeNegotiations'\n              | 'numberViews'\n              | 'datePosted'\n              | 'isActive'\n            > & {\n                wine?: Maybe<\n                  { __typename?: 'Wine' } & Pick<\n                    Wine,\n                    'denominazioneZona' | 'regione'\n                  >\n                >;\n                postedBy: { __typename?: 'User' } & Pick<User, '_id'>;\n                address: { __typename?: 'Address' } & Pick<\n                  Address,\n                  'regione' | 'provincia' | 'comune'\n                >;\n              })\n          | ({ __typename?: 'AdGrape' } & Pick<\n              AdGrape,\n              | '_id'\n              | 'harvest'\n              | 'abv'\n              | 'priceFrom'\n              | 'priceTo'\n              | 'typeAd'\n              | 'activeNegotiations'\n              | 'numberViews'\n              | 'datePosted'\n            > & {\n                postedBy: { __typename?: 'User' } & Pick<User, '_id'>;\n                address: { __typename?: 'Address' } & Pick<\n                  Address,\n                  'regione' | 'provincia' | 'comune'\n                >;\n              })\n        >\n      >;\n    }\n  >;\n};\n\nexport type LightMeQueryVariables = Exact<{ [key: string]: never }>;\n\nexport type LightMeQuery = { __typename?: 'Query' } & {\n  me?: Maybe<\n    { __typename?: 'User' } & Pick<User, '_id' | 'firstName'> & {\n        address: { __typename?: 'Address' } & Pick<\n          Address,\n          'regione' | 'provincia' | 'comune'\n        >;\n      }\n  >;\n};\n\nexport type MeQueryVariables = Exact<{ [key: string]: never }>;\n\nexport type MeQuery = { __typename?: 'Query' } & {\n  me?: Maybe<\n    { __typename?: 'User' } & Pick<User, '_id' | 'firstName' | 'lastName'> & {\n        address: { __typename?: 'Address' } & Pick<\n          Address,\n          'regione' | 'provincia' | 'comune'\n        >;\n        ads?: Maybe<\n          Array<\n            | ({ __typename?: 'AdWine' } & Pick<AdWine, '_id' | 'isActive'> & {\n                  postedBy: { __typename?: 'User' } & Pick<User, '_id'>;\n                })\n            | ({ __typename?: 'AdGrape' } & Pick<\n                AdGrape,\n                '_id' | 'isActive'\n              > & { postedBy: { __typename?: 'User' } & Pick<User, '_id'> })\n          >\n        >;\n        savedAds?: Maybe<\n          Array<\n            | ({ __typename?: 'AdWine' } & Pick<AdWine, '_id'>)\n            | ({ __typename?: 'AdGrape' } & Pick<AdGrape, '_id'>)\n          >\n        >;\n        messages?: Maybe<\n          Array<\n            { __typename?: 'Message' } & Pick<Message, '_id' | 'isViewed'> & {\n                sentBy: { __typename?: 'User' } & Pick<User, '_id'>;\n              }\n          >\n        >;\n        negotiations?: Maybe<\n          Array<\n            { __typename?: 'Negotiation' } & Pick<\n              Negotiation,\n              '_id' | 'isConcluded'\n            > & {\n                ad:\n                  | ({ __typename?: 'AdWine' } & Pick<AdWine, '_id'>)\n                  | ({ __typename?: 'AdGrape' } & Pick<AdGrape, '_id'>);\n              }\n          >\n        >;\n        reviews?: Maybe<\n          Array<\n            { __typename?: 'Review' } & Pick<Review, '_id' | 'rating'> & {\n                forUser: { __typename?: 'User' } & Pick<User, '_id'>;\n              }\n          >\n        >;\n      }\n  >;\n};\n\nexport type IsUserLoggedInQueryVariables = Exact<{ [key: string]: never }>;\n\nexport type IsUserLoggedInQuery = { __typename?: 'Query' } & Pick<\n  Query,\n  'isLoggedIn'\n>;\n\nexport type NotificationQueryVariables = Exact<{ [key: string]: never }>;\n\nexport type NotificationQuery = { __typename?: 'Query' } & {\n  notification?: Maybe<\n    { __typename?: 'Notification' } & Pick<Notification, 'type' | 'message'>\n  >;\n};\n\nexport type MyInfoQueryVariables = Exact<{ [key: string]: never }>;\n\nexport type MyInfoQuery = { __typename?: 'Query' } & {\n  myInfo?: Maybe<\n    { __typename?: 'User' } & Pick<User, '_id' | 'firstName' | 'lastName'> & {\n        address: { __typename?: 'Address' } & Pick<\n          Address,\n          'regione' | 'provincia' | 'comune'\n        >;\n        ads?: Maybe<\n          Array<\n            | ({ __typename?: 'AdWine' } & Pick<AdWine, '_id' | 'isActive'> & {\n                  postedBy: { __typename?: 'User' } & Pick<User, '_id'>;\n                })\n            | ({ __typename?: 'AdGrape' } & Pick<\n                AdGrape,\n                '_id' | 'isActive'\n              > & { postedBy: { __typename?: 'User' } & Pick<User, '_id'> })\n          >\n        >;\n        savedAds?: Maybe<\n          Array<\n            | ({ __typename?: 'AdWine' } & Pick<AdWine, '_id'>)\n            | ({ __typename?: 'AdGrape' } & Pick<AdGrape, '_id'>)\n          >\n        >;\n        messages?: Maybe<\n          Array<\n            { __typename?: 'Message' } & Pick<Message, '_id' | 'isViewed'> & {\n                sentBy: { __typename?: 'User' } & Pick<User, '_id'>;\n              }\n          >\n        >;\n        negotiations?: Maybe<\n          Array<\n            { __typename?: 'Negotiation' } & Pick<\n              Negotiation,\n              '_id' | 'isConcluded'\n            > & {\n                ad:\n                  | ({ __typename?: 'AdWine' } & Pick<AdWine, '_id'>)\n                  | ({ __typename?: 'AdGrape' } & Pick<AdGrape, '_id'>);\n              }\n          >\n        >;\n        reviews?: Maybe<\n          Array<{ __typename?: 'Review' } & Pick<Review, '_id' | 'rating'>>\n        >;\n      }\n  >;\n};\n\nexport type WineSearchedQueryVariables = Exact<{ [key: string]: never }>;\n\nexport type WineSearchedQuery = { __typename?: 'Query' } & {\n  searchedWine?: Maybe<\n    { __typename?: 'WineSearched' } & Pick<\n      WineSearched,\n      | 'typeAd'\n      | 'typeProduct'\n      | 'wineName'\n      | 'harvest'\n      | 'abv'\n      | 'price'\n      | 'liters'\n      | 'isPost'\n    >\n  >;\n};\n\nexport type AdsWineQueryVariables = Exact<{\n  typeAd: TypeAd;\n  typeProduct: TypeProduct;\n  wineName?: Maybe<Scalars['String']>;\n  offset?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<QueryOrderBy>;\n  limit?: Maybe<Scalars['Int']>;\n}>;\n\nexport type AdsWineQuery = { __typename?: 'Query' } & {\n  ads?: Maybe<\n    { __typename?: 'AdsResult' } & Pick<AdsResult, 'pageCount'> & {\n        ads?: Maybe<\n          Array<\n            Maybe<\n              | ({ __typename?: 'AdWine' } & Pick<\n                  AdWine,\n                  | 'wineName'\n                  | 'litersFrom'\n                  | 'litersTo'\n                  | 'metodoProduttivo'\n                  | '_id'\n                  | 'harvest'\n                  | 'abv'\n                  | 'priceFrom'\n                  | 'priceTo'\n                  | 'typeAd'\n                  | 'activeNegotiations'\n                  | 'numberViews'\n                  | 'isActive'\n                  | 'datePosted'\n                > & {\n                    wine?: Maybe<\n                      { __typename?: 'Wine' } & Pick<\n                        Wine,\n                        'denominazioneZona' | 'regione'\n                      >\n                    >;\n                    postedBy: { __typename?: 'User' } & Pick<User, '_id'>;\n                    address: { __typename?: 'Address' } & Pick<\n                      Address,\n                      'regione' | 'provincia' | 'comune'\n                    >;\n                  })\n              | ({ __typename?: 'AdGrape' } & Pick<\n                  AdGrape,\n                  | '_id'\n                  | 'harvest'\n                  | 'abv'\n                  | 'priceFrom'\n                  | 'priceTo'\n                  | 'typeAd'\n                  | 'activeNegotiations'\n                  | 'numberViews'\n                  | 'isActive'\n                  | 'datePosted'\n                > & {\n                    postedBy: { __typename?: 'User' } & Pick<User, '_id'>;\n                    address: { __typename?: 'Address' } & Pick<\n                      Address,\n                      'regione' | 'provincia' | 'comune'\n                    >;\n                  })\n            >\n          >\n        >;\n      }\n  >;\n};\n\nexport type AdQueryVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\nexport type AdQuery = { __typename?: 'Query' } & {\n  ad?: Maybe<\n    | ({ __typename?: 'AdWine' } & Pick<\n        AdWine,\n        | 'wineName'\n        | 'litersFrom'\n        | 'litersTo'\n        | 'metodoProduttivo'\n        | '_id'\n        | 'needsFollowUp'\n        | 'harvest'\n        | 'abv'\n        | 'priceFrom'\n        | 'priceTo'\n        | 'typeAd'\n        | 'activeNegotiations'\n        | 'numberViews'\n        | 'datePosted'\n        | 'isActive'\n      > & {\n          wine?: Maybe<\n            { __typename?: 'Wine' } & Pick<\n              Wine,\n              'denominazioneZona' | 'regione'\n            >\n          >;\n          postedBy: { __typename?: 'User' } & Pick<\n            User,\n            | '_id'\n            | 'firstName'\n            | 'lastName'\n            | 'hideContact'\n            | 'email'\n            | 'phoneNumber'\n          >;\n          address: { __typename?: 'Address' } & Pick<\n            Address,\n            'regione' | 'provincia' | 'comune'\n          >;\n        })\n    | ({ __typename?: 'AdGrape' } & Pick<\n        AdGrape,\n        | '_id'\n        | 'needsFollowUp'\n        | 'harvest'\n        | 'abv'\n        | 'priceFrom'\n        | 'priceTo'\n        | 'typeAd'\n        | 'activeNegotiations'\n        | 'numberViews'\n        | 'datePosted'\n        | 'isActive'\n      > & {\n          postedBy: { __typename?: 'User' } & Pick<\n            User,\n            | '_id'\n            | 'firstName'\n            | 'lastName'\n            | 'hideContact'\n            | 'email'\n            | 'phoneNumber'\n          >;\n          address: { __typename?: 'Address' } & Pick<\n            Address,\n            'regione' | 'provincia' | 'comune'\n          >;\n        })\n  >;\n  me?: Maybe<\n    { __typename?: 'User' } & Pick<User, '_id'> & {\n        negotiations?: Maybe<\n          Array<\n            { __typename?: 'Negotiation' } & Pick<Negotiation, '_id'> & {\n                ad:\n                  | ({ __typename?: 'AdWine' } & Pick<AdWine, '_id'>)\n                  | ({ __typename?: 'AdGrape' } & Pick<AdGrape, '_id'>);\n              }\n          >\n        >;\n      }\n  >;\n};\n\nexport type WinesQueryVariables = Exact<{ [key: string]: never }>;\n\nexport type WinesQuery = { __typename?: 'Query' } & {\n  wines?: Maybe<\n    Array<\n      { __typename?: 'Wine' } & Pick<\n        Wine,\n        | '_id'\n        | 'denominazioneVino'\n        | 'espressioneComunitaria'\n        | 'denominazioneZona'\n        | 'regione'\n      >\n    >\n  >;\n};\n\nexport type NegotiationsQueryVariables = Exact<{\n  offset?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<QueryOrderBy>;\n  limit?: Maybe<Scalars['Int']>;\n  isConcluded?: Maybe<Scalars['Boolean']>;\n}>;\n\nexport type NegotiationsQuery = { __typename?: 'Query' } & {\n  negotiations?: Maybe<\n    { __typename?: 'NegotiationResult' } & Pick<\n      NegotiationResult,\n      'pageCount'\n    > & {\n        negotiations?: Maybe<\n          Array<\n            Maybe<{ __typename?: 'Negotiation' } & NegotiationDetailsFragment>\n          >\n        >;\n      }\n  >;\n};\n\nexport type NegotiationQueryVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\nexport type NegotiationQuery = { __typename?: 'Query' } & {\n  negotiation?: Maybe<\n    { __typename?: 'Negotiation' } & {\n      ad:\n        | ({ __typename?: 'AdWine' } & {\n            wine?: Maybe<\n              { __typename?: 'Wine' } & Pick<Wine, 'denominazioneZona'>\n            >;\n            postedBy: { __typename?: 'User' } & Pick<\n              User,\n              'hideContact' | 'phoneNumber' | 'email'\n            >;\n          })\n        | ({ __typename?: 'AdGrape' } & {\n            postedBy: { __typename?: 'User' } & Pick<\n              User,\n              'hideContact' | 'phoneNumber' | 'email'\n            >;\n          });\n    } & NegotiationDetailsFragment\n  >;\n};\n\nexport type MessagesQueryVariables = Exact<{ [key: string]: never }>;\n\nexport type MessagesQuery = { __typename?: 'Query' } & {\n  messages?: Maybe<Array<{ __typename?: 'Message' } & MessageDetailsFragment>>;\n};\n\nexport type MessagesNegotiationQueryVariables = Exact<{\n  id: Scalars['ID'];\n  offset?: Maybe<Scalars['Int']>;\n  limit?: Maybe<Scalars['Int']>;\n}>;\n\nexport type MessagesNegotiationQuery = { __typename?: 'Query' } & {\n  messagesForNegotiation?: Maybe<\n    { __typename?: 'MessageResult' } & Pick<MessageResult, 'pageCount'> & {\n        messages?: Maybe<\n          Array<Maybe<{ __typename?: 'Message' } & MessageDetailsFragment>>\n        >;\n      }\n  >;\n};\n\nexport type ReviewsQueryVariables = Exact<{\n  offset?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<QueryOrderBy>;\n  limit?: Maybe<Scalars['Int']>;\n}>;\n\nexport type ReviewsQuery = { __typename?: 'Query' } & {\n  reviews?: Maybe<\n    { __typename?: 'ReviewResult' } & Pick<ReviewResult, 'pageCount'> & {\n        reviews?: Maybe<\n          Array<Maybe<{ __typename?: 'Review' } & ReviewDetailsFragment>>\n        >;\n      }\n  >;\n};\n\nexport type ReviewQueryVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\nexport type ReviewQuery = { __typename?: 'Query' } & {\n  review?: Maybe<{ __typename?: 'Review' } & ReviewDetailsFragment>;\n};\n\nexport type NegotiationsForAdQueryVariables = Exact<{\n  ad: Scalars['ID'];\n}>;\n\nexport type NegotiationsForAdQuery = { __typename?: 'Query' } & {\n  negotiationsForAd?: Maybe<\n    Array<\n      { __typename?: 'Negotiation' } & Pick<\n        Negotiation,\n        '_id' | 'isConcluded' | 'dateCreated' | 'dateConcluded'\n      > & {\n          createdBy: { __typename?: 'User' } & Pick<\n            User,\n            '_id' | 'firstName' | 'lastName'\n          >;\n        }\n    >\n  >;\n};\n\nexport type AdsForUserQueryVariables = Exact<{\n  offset?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<QueryOrderBy>;\n  limit?: Maybe<Scalars['Int']>;\n  isActive?: Maybe<Scalars['Boolean']>;\n  user: Scalars['ID'];\n}>;\n\nexport type AdsForUserQuery = { __typename?: 'Query' } & {\n  adsForUser?: Maybe<\n    { __typename?: 'AdsResult' } & Pick<AdsResult, 'pageCount'> & {\n        ads?: Maybe<\n          Array<\n            Maybe<\n              | ({ __typename?: 'AdWine' } & Pick<\n                  AdWine,\n                  | 'wineName'\n                  | 'litersFrom'\n                  | 'litersTo'\n                  | 'metodoProduttivo'\n                  | '_id'\n                  | 'needsFollowUp'\n                  | 'harvest'\n                  | 'abv'\n                  | 'priceFrom'\n                  | 'priceTo'\n                  | 'typeAd'\n                  | 'activeNegotiations'\n                  | 'numberViews'\n                  | 'datePosted'\n                  | 'isActive'\n                > & {\n                    wine?: Maybe<\n                      { __typename?: 'Wine' } & Pick<\n                        Wine,\n                        'denominazioneZona' | 'regione'\n                      >\n                    >;\n                    postedBy: { __typename?: 'User' } & Pick<\n                      User,\n                      '_id' | 'firstName' | 'lastName' | 'hideContact'\n                    >;\n                    address: { __typename?: 'Address' } & Pick<\n                      Address,\n                      'regione' | 'provincia' | 'comune'\n                    >;\n                  })\n              | ({ __typename?: 'AdGrape' } & Pick<\n                  AdGrape,\n                  | '_id'\n                  | 'needsFollowUp'\n                  | 'harvest'\n                  | 'abv'\n                  | 'priceFrom'\n                  | 'priceTo'\n                  | 'typeAd'\n                  | 'activeNegotiations'\n                  | 'numberViews'\n                  | 'datePosted'\n                  | 'isActive'\n                > & {\n                    postedBy: { __typename?: 'User' } & Pick<\n                      User,\n                      '_id' | 'firstName' | 'lastName' | 'hideContact'\n                    >;\n                    address: { __typename?: 'Address' } & Pick<\n                      Address,\n                      'regione' | 'provincia' | 'comune'\n                    >;\n                  })\n            >\n          >\n        >;\n      }\n  >;\n};\n\nexport type AdPostedFollowUpSubscriptionVariables = Exact<{\n  [key: string]: never;\n}>;\n\nexport type AdPostedFollowUpSubscription = { __typename?: 'Subscription' } & {\n  adPostedFollowUp:\n    | ({ __typename?: 'AdWine' } & Pick<\n        AdWine,\n        | 'wineName'\n        | 'litersFrom'\n        | 'litersTo'\n        | 'metodoProduttivo'\n        | '_id'\n        | 'harvest'\n        | 'abv'\n        | 'priceFrom'\n        | 'priceTo'\n        | 'typeAd'\n        | 'activeNegotiations'\n        | 'numberViews'\n        | 'datePosted'\n      > & {\n          wine?: Maybe<\n            { __typename?: 'Wine' } & Pick<\n              Wine,\n              'denominazioneZona' | 'regione'\n            >\n          >;\n          postedBy: { __typename?: 'User' } & Pick<User, '_id'>;\n          address: { __typename?: 'Address' } & Pick<\n            Address,\n            'regione' | 'provincia' | 'comune'\n          >;\n        })\n    | ({ __typename?: 'AdGrape' } & Pick<\n        AdGrape,\n        | '_id'\n        | 'harvest'\n        | 'abv'\n        | 'priceFrom'\n        | 'priceTo'\n        | 'typeAd'\n        | 'activeNegotiations'\n        | 'numberViews'\n        | 'datePosted'\n      > & {\n          postedBy: { __typename?: 'User' } & Pick<User, '_id'>;\n          address: { __typename?: 'Address' } & Pick<\n            Address,\n            'regione' | 'provincia' | 'comune'\n          >;\n        });\n};\n\nexport type AdRemovedSubscriptionVariables = Exact<{ [key: string]: never }>;\n\nexport type AdRemovedSubscription = { __typename?: 'Subscription' } & {\n  adRemoved:\n    | ({ __typename?: 'AdWine' } & Pick<AdWine, '_id'>)\n    | ({ __typename?: 'AdGrape' } & Pick<AdGrape, '_id'>);\n};\n\nexport type MessageSentSubscriptionVariables = Exact<{ [key: string]: never }>;\n\nexport type MessageSentSubscription = { __typename?: 'Subscription' } & {\n  messageSent: { __typename?: 'Message' } & MessageDetailsFragment;\n};\n\nexport type NegotiationCreatedSubscriptionVariables = Exact<{\n  [key: string]: never;\n}>;\n\nexport type NegotiationCreatedSubscription = { __typename?: 'Subscription' } & {\n  negotiationCreated: {\n    __typename?: 'Negotiation';\n  } & NegotiationDetailsFragment;\n};\n\nexport type NegotiationClosedSubscriptionVariables = Exact<{\n  [key: string]: never;\n}>;\n\nexport type NegotiationClosedSubscription = { __typename?: 'Subscription' } & {\n  negotiationClosed:\n    | ({ __typename?: 'AdWine' } & Pick<\n        AdWine,\n        | 'wineName'\n        | 'litersFrom'\n        | 'litersTo'\n        | 'metodoProduttivo'\n        | '_id'\n        | 'harvest'\n        | 'abv'\n        | 'priceFrom'\n        | 'priceTo'\n        | 'typeAd'\n        | 'activeNegotiations'\n        | 'numberViews'\n        | 'datePosted'\n      > & {\n          wine?: Maybe<\n            { __typename?: 'Wine' } & Pick<\n              Wine,\n              'denominazioneZona' | 'regione'\n            >\n          >;\n          postedBy: { __typename?: 'User' } & Pick<User, '_id'>;\n          address: { __typename?: 'Address' } & Pick<\n            Address,\n            'regione' | 'provincia' | 'comune'\n          >;\n        })\n    | ({ __typename?: 'AdGrape' } & Pick<\n        AdGrape,\n        | '_id'\n        | 'harvest'\n        | 'abv'\n        | 'priceFrom'\n        | 'priceTo'\n        | 'typeAd'\n        | 'activeNegotiations'\n        | 'numberViews'\n        | 'datePosted'\n      > & {\n          postedBy: { __typename?: 'User' } & Pick<User, '_id'>;\n          address: { __typename?: 'Address' } & Pick<\n            Address,\n            'regione' | 'provincia' | 'comune'\n          >;\n        });\n};\n\nexport type ReviewCreatedSubscriptionVariables = Exact<{\n  [key: string]: never;\n}>;\n\nexport type ReviewCreatedSubscription = { __typename?: 'Subscription' } & {\n  reviewCreated: { __typename?: 'Review' } & ReviewDetailsFragment;\n};\n\nexport const AdDetailsFragmentDoc = gql`\n  fragment AdDetails on Ad {\n    _id\n    postedBy {\n      _id\n      firstName\n      lastName\n      hideContact\n    }\n    needsFollowUp\n    harvest\n    abv\n    priceFrom\n    priceTo\n    ... on AdWine {\n      wineName\n      litersFrom\n      litersTo\n      metodoProduttivo\n      wine {\n        denominazioneZona\n        regione\n      }\n    }\n    typeAd\n    address {\n      regione\n      provincia\n    }\n    activeNegotiations\n    datePosted\n  }\n`;\nexport const NegotiationDetailsFragmentDoc = gql`\n  fragment NegotiationDetails on Negotiation {\n    _id\n    createdBy {\n      _id\n      firstName\n    }\n    ad {\n      _id\n      postedBy {\n        _id\n        firstName\n        lastName\n      }\n      ... on AdWine {\n        wineName\n      }\n    }\n    forUserAd {\n      _id\n      firstName\n    }\n    type\n    review {\n      _id\n      createdBy {\n        _id\n      }\n    }\n    dateCreated\n    dateConcluded\n    isConcluded\n  }\n`;\nexport const MessageDetailsFragmentDoc = gql`\n  fragment MessageDetails on Message {\n    _id\n    content\n    isViewed\n    sentBy {\n      _id\n      firstName\n      lastName\n    }\n    sentTo {\n      _id\n      firstName\n      lastName\n    }\n    negotiation {\n      _id\n      ad {\n        _id\n        ... on AdWine {\n          wineName\n        }\n      }\n      type\n      isConcluded\n    }\n    dateSent\n  }\n`;\nexport const ReviewDetailsFragmentDoc = gql`\n  fragment ReviewDetails on Review {\n    _id\n    createdBy {\n      _id\n      firstName\n      lastName\n    }\n    negotiation {\n      _id\n      ad {\n        _id\n        ... on AdWine {\n          wineName\n        }\n      }\n    }\n    forUser {\n      _id\n      firstName\n      lastName\n    }\n    rating\n    dateCreated\n    content\n    type\n  }\n`;\nexport const LoginDocument = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      response {\n        token\n        user {\n          _id\n          firstName\n          address {\n            regione\n            provincia\n            comune\n          }\n        }\n      }\n      errors {\n        name\n        text\n      }\n    }\n  }\n`;\nexport type LoginMutationFn = Apollo.MutationFunction<\n  LoginMutation,\n  LoginMutationVariables\n>;\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      email: // value for 'email'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useLoginMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    LoginMutation,\n    LoginMutationVariables\n  >\n) {\n  return Apollo.useMutation<LoginMutation, LoginMutationVariables>(\n    LoginDocument,\n    baseOptions\n  );\n}\nexport type LoginMutationHookResult = ReturnType<typeof useLoginMutation>;\nexport type LoginMutationResult = Apollo.MutationResult<LoginMutation>;\nexport type LoginMutationOptions = Apollo.BaseMutationOptions<\n  LoginMutation,\n  LoginMutationVariables\n>;\nexport const CreateUserDocument = gql`\n  mutation CreateUser($userInput: UserInput!) {\n    createUser(user: $userInput) {\n      response {\n        token\n        user {\n          _id\n          firstName\n        }\n      }\n      errors {\n        name\n        text\n      }\n    }\n  }\n`;\nexport type CreateUserMutationFn = Apollo.MutationFunction<\n  CreateUserMutation,\n  CreateUserMutationVariables\n>;\n\n/**\n * __useCreateUserMutation__\n *\n * To run a mutation, you first call `useCreateUserMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateUserMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createUserMutation, { data, loading, error }] = useCreateUserMutation({\n *   variables: {\n *      userInput: // value for 'userInput'\n *   },\n * });\n */\nexport function useCreateUserMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    CreateUserMutation,\n    CreateUserMutationVariables\n  >\n) {\n  return Apollo.useMutation<CreateUserMutation, CreateUserMutationVariables>(\n    CreateUserDocument,\n    baseOptions\n  );\n}\nexport type CreateUserMutationHookResult = ReturnType<\n  typeof useCreateUserMutation\n>;\nexport type CreateUserMutationResult = Apollo.MutationResult<CreateUserMutation>;\nexport type CreateUserMutationOptions = Apollo.BaseMutationOptions<\n  CreateUserMutation,\n  CreateUserMutationVariables\n>;\nexport const UpdateUserDocument = gql`\n  mutation UpdateUser($user: UserInputUpdate!) {\n    updateUser(user: $user) {\n      response {\n        _id\n        firstName\n      }\n      errors {\n        name\n        text\n      }\n    }\n  }\n`;\nexport type UpdateUserMutationFn = Apollo.MutationFunction<\n  UpdateUserMutation,\n  UpdateUserMutationVariables\n>;\n\n/**\n * __useUpdateUserMutation__\n *\n * To run a mutation, you first call `useUpdateUserMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateUserMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateUserMutation, { data, loading, error }] = useUpdateUserMutation({\n *   variables: {\n *      user: // value for 'user'\n *   },\n * });\n */\nexport function useUpdateUserMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    UpdateUserMutation,\n    UpdateUserMutationVariables\n  >\n) {\n  return Apollo.useMutation<UpdateUserMutation, UpdateUserMutationVariables>(\n    UpdateUserDocument,\n    baseOptions\n  );\n}\nexport type UpdateUserMutationHookResult = ReturnType<\n  typeof useUpdateUserMutation\n>;\nexport type UpdateUserMutationResult = Apollo.MutationResult<UpdateUserMutation>;\nexport type UpdateUserMutationOptions = Apollo.BaseMutationOptions<\n  UpdateUserMutation,\n  UpdateUserMutationVariables\n>;\nexport const DeleteUserDocument = gql`\n  mutation DeleteUser($id: ID!) {\n    deleteUser(id: $id) {\n      response {\n        _id\n        firstName\n      }\n      errors {\n        name\n        text\n      }\n    }\n  }\n`;\nexport type DeleteUserMutationFn = Apollo.MutationFunction<\n  DeleteUserMutation,\n  DeleteUserMutationVariables\n>;\n\n/**\n * __useDeleteUserMutation__\n *\n * To run a mutation, you first call `useDeleteUserMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteUserMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteUserMutation, { data, loading, error }] = useDeleteUserMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDeleteUserMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    DeleteUserMutation,\n    DeleteUserMutationVariables\n  >\n) {\n  return Apollo.useMutation<DeleteUserMutation, DeleteUserMutationVariables>(\n    DeleteUserDocument,\n    baseOptions\n  );\n}\nexport type DeleteUserMutationHookResult = ReturnType<\n  typeof useDeleteUserMutation\n>;\nexport type DeleteUserMutationResult = Apollo.MutationResult<DeleteUserMutation>;\nexport type DeleteUserMutationOptions = Apollo.BaseMutationOptions<\n  DeleteUserMutation,\n  DeleteUserMutationVariables\n>;\nexport const CreateAdWineDocument = gql`\n  mutation CreateAdWine($input: AdInput!) {\n    createAd(input: $input) {\n      response {\n        _id\n        postedBy {\n          _id\n        }\n        harvest\n        abv\n        priceFrom\n        priceTo\n        ... on AdWine {\n          wineName\n          litersFrom\n          litersTo\n          metodoProduttivo\n          wine {\n            denominazioneZona\n            regione\n          }\n        }\n        typeAd\n        address {\n          regione\n          provincia\n          comune\n        }\n        activeNegotiations\n        numberViews\n        datePosted\n      }\n      errors {\n        name\n        text\n      }\n    }\n  }\n`;\nexport type CreateAdWineMutationFn = Apollo.MutationFunction<\n  CreateAdWineMutation,\n  CreateAdWineMutationVariables\n>;\n\n/**\n * __useCreateAdWineMutation__\n *\n * To run a mutation, you first call `useCreateAdWineMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateAdWineMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createAdWineMutation, { data, loading, error }] = useCreateAdWineMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useCreateAdWineMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    CreateAdWineMutation,\n    CreateAdWineMutationVariables\n  >\n) {\n  return Apollo.useMutation<\n    CreateAdWineMutation,\n    CreateAdWineMutationVariables\n  >(CreateAdWineDocument, baseOptions);\n}\nexport type CreateAdWineMutationHookResult = ReturnType<\n  typeof useCreateAdWineMutation\n>;\nexport type CreateAdWineMutationResult = Apollo.MutationResult<CreateAdWineMutation>;\nexport type CreateAdWineMutationOptions = Apollo.BaseMutationOptions<\n  CreateAdWineMutation,\n  CreateAdWineMutationVariables\n>;\nexport const UpdateAdWineDocument = gql`\n  mutation UpdateAdWine($input: AdInputUpdate!) {\n    updateAd(input: $input) {\n      response {\n        _id\n      }\n      errors {\n        name\n        text\n      }\n    }\n  }\n`;\nexport type UpdateAdWineMutationFn = Apollo.MutationFunction<\n  UpdateAdWineMutation,\n  UpdateAdWineMutationVariables\n>;\n\n/**\n * __useUpdateAdWineMutation__\n *\n * To run a mutation, you first call `useUpdateAdWineMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateAdWineMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateAdWineMutation, { data, loading, error }] = useUpdateAdWineMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useUpdateAdWineMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    UpdateAdWineMutation,\n    UpdateAdWineMutationVariables\n  >\n) {\n  return Apollo.useMutation<\n    UpdateAdWineMutation,\n    UpdateAdWineMutationVariables\n  >(UpdateAdWineDocument, baseOptions);\n}\nexport type UpdateAdWineMutationHookResult = ReturnType<\n  typeof useUpdateAdWineMutation\n>;\nexport type UpdateAdWineMutationResult = Apollo.MutationResult<UpdateAdWineMutation>;\nexport type UpdateAdWineMutationOptions = Apollo.BaseMutationOptions<\n  UpdateAdWineMutation,\n  UpdateAdWineMutationVariables\n>;\nexport const SaveAdDocument = gql`\n  mutation SaveAd($id: ID!) {\n    saveAd(id: $id) {\n      response {\n        _id\n        harvest\n        abv\n        priceFrom\n        priceTo\n        ... on AdWine {\n          wineName\n          litersFrom\n          litersTo\n          wine {\n            denominazioneZona\n          }\n        }\n        datePosted\n      }\n      errors {\n        name\n        text\n      }\n    }\n  }\n`;\nexport type SaveAdMutationFn = Apollo.MutationFunction<\n  SaveAdMutation,\n  SaveAdMutationVariables\n>;\n\n/**\n * __useSaveAdMutation__\n *\n * To run a mutation, you first call `useSaveAdMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSaveAdMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [saveAdMutation, { data, loading, error }] = useSaveAdMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useSaveAdMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    SaveAdMutation,\n    SaveAdMutationVariables\n  >\n) {\n  return Apollo.useMutation<SaveAdMutation, SaveAdMutationVariables>(\n    SaveAdDocument,\n    baseOptions\n  );\n}\nexport type SaveAdMutationHookResult = ReturnType<typeof useSaveAdMutation>;\nexport type SaveAdMutationResult = Apollo.MutationResult<SaveAdMutation>;\nexport type SaveAdMutationOptions = Apollo.BaseMutationOptions<\n  SaveAdMutation,\n  SaveAdMutationVariables\n>;\nexport const DeleteAdDocument = gql`\n  mutation DeleteAd($id: ID!) {\n    deleteAd(id: $id) {\n      response {\n        _id\n      }\n      errors {\n        name\n        text\n      }\n    }\n  }\n`;\nexport type DeleteAdMutationFn = Apollo.MutationFunction<\n  DeleteAdMutation,\n  DeleteAdMutationVariables\n>;\n\n/**\n * __useDeleteAdMutation__\n *\n * To run a mutation, you first call `useDeleteAdMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteAdMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteAdMutation, { data, loading, error }] = useDeleteAdMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDeleteAdMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    DeleteAdMutation,\n    DeleteAdMutationVariables\n  >\n) {\n  return Apollo.useMutation<DeleteAdMutation, DeleteAdMutationVariables>(\n    DeleteAdDocument,\n    baseOptions\n  );\n}\nexport type DeleteAdMutationHookResult = ReturnType<typeof useDeleteAdMutation>;\nexport type DeleteAdMutationResult = Apollo.MutationResult<DeleteAdMutation>;\nexport type DeleteAdMutationOptions = Apollo.BaseMutationOptions<\n  DeleteAdMutation,\n  DeleteAdMutationVariables\n>;\nexport const CreateNegotiationDocument = gql`\n  mutation CreateNegotiation($negotiation: NegotiationInput!) {\n    createNegotiation(negotiation: $negotiation) {\n      response {\n        ...NegotiationDetails\n      }\n      errors {\n        name\n        text\n      }\n    }\n  }\n  ${NegotiationDetailsFragmentDoc}\n`;\nexport type CreateNegotiationMutationFn = Apollo.MutationFunction<\n  CreateNegotiationMutation,\n  CreateNegotiationMutationVariables\n>;\n\n/**\n * __useCreateNegotiationMutation__\n *\n * To run a mutation, you first call `useCreateNegotiationMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateNegotiationMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createNegotiationMutation, { data, loading, error }] = useCreateNegotiationMutation({\n *   variables: {\n *      negotiation: // value for 'negotiation'\n *   },\n * });\n */\nexport function useCreateNegotiationMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    CreateNegotiationMutation,\n    CreateNegotiationMutationVariables\n  >\n) {\n  return Apollo.useMutation<\n    CreateNegotiationMutation,\n    CreateNegotiationMutationVariables\n  >(CreateNegotiationDocument, baseOptions);\n}\nexport type CreateNegotiationMutationHookResult = ReturnType<\n  typeof useCreateNegotiationMutation\n>;\nexport type CreateNegotiationMutationResult = Apollo.MutationResult<CreateNegotiationMutation>;\nexport type CreateNegotiationMutationOptions = Apollo.BaseMutationOptions<\n  CreateNegotiationMutation,\n  CreateNegotiationMutationVariables\n>;\nexport const UpdateNegotiationDocument = gql`\n  mutation UpdateNegotiation($negotiation: NegotiationInputUpdate!) {\n    updateNegotiation(negotiation: $negotiation) {\n      response {\n        ...NegotiationDetails\n      }\n      errors {\n        name\n        text\n      }\n    }\n  }\n  ${NegotiationDetailsFragmentDoc}\n`;\nexport type UpdateNegotiationMutationFn = Apollo.MutationFunction<\n  UpdateNegotiationMutation,\n  UpdateNegotiationMutationVariables\n>;\n\n/**\n * __useUpdateNegotiationMutation__\n *\n * To run a mutation, you first call `useUpdateNegotiationMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateNegotiationMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateNegotiationMutation, { data, loading, error }] = useUpdateNegotiationMutation({\n *   variables: {\n *      negotiation: // value for 'negotiation'\n *   },\n * });\n */\nexport function useUpdateNegotiationMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    UpdateNegotiationMutation,\n    UpdateNegotiationMutationVariables\n  >\n) {\n  return Apollo.useMutation<\n    UpdateNegotiationMutation,\n    UpdateNegotiationMutationVariables\n  >(UpdateNegotiationDocument, baseOptions);\n}\nexport type UpdateNegotiationMutationHookResult = ReturnType<\n  typeof useUpdateNegotiationMutation\n>;\nexport type UpdateNegotiationMutationResult = Apollo.MutationResult<UpdateNegotiationMutation>;\nexport type UpdateNegotiationMutationOptions = Apollo.BaseMutationOptions<\n  UpdateNegotiationMutation,\n  UpdateNegotiationMutationVariables\n>;\nexport const DeleteNegotiationDocument = gql`\n  mutation DeleteNegotiation($id: ID!) {\n    deleteNegotiation(id: $id) {\n      response {\n        _id\n      }\n      errors {\n        name\n        text\n      }\n    }\n  }\n`;\nexport type DeleteNegotiationMutationFn = Apollo.MutationFunction<\n  DeleteNegotiationMutation,\n  DeleteNegotiationMutationVariables\n>;\n\n/**\n * __useDeleteNegotiationMutation__\n *\n * To run a mutation, you first call `useDeleteNegotiationMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteNegotiationMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteNegotiationMutation, { data, loading, error }] = useDeleteNegotiationMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDeleteNegotiationMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    DeleteNegotiationMutation,\n    DeleteNegotiationMutationVariables\n  >\n) {\n  return Apollo.useMutation<\n    DeleteNegotiationMutation,\n    DeleteNegotiationMutationVariables\n  >(DeleteNegotiationDocument, baseOptions);\n}\nexport type DeleteNegotiationMutationHookResult = ReturnType<\n  typeof useDeleteNegotiationMutation\n>;\nexport type DeleteNegotiationMutationResult = Apollo.MutationResult<DeleteNegotiationMutation>;\nexport type DeleteNegotiationMutationOptions = Apollo.BaseMutationOptions<\n  DeleteNegotiationMutation,\n  DeleteNegotiationMutationVariables\n>;\nexport const CreateMessageDocument = gql`\n  mutation CreateMessage($message: MessageInput!) {\n    createMessage(message: $message) {\n      response {\n        ...MessageDetails\n      }\n      errors {\n        name\n        text\n      }\n    }\n  }\n  ${MessageDetailsFragmentDoc}\n`;\nexport type CreateMessageMutationFn = Apollo.MutationFunction<\n  CreateMessageMutation,\n  CreateMessageMutationVariables\n>;\n\n/**\n * __useCreateMessageMutation__\n *\n * To run a mutation, you first call `useCreateMessageMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateMessageMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createMessageMutation, { data, loading, error }] = useCreateMessageMutation({\n *   variables: {\n *      message: // value for 'message'\n *   },\n * });\n */\nexport function useCreateMessageMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    CreateMessageMutation,\n    CreateMessageMutationVariables\n  >\n) {\n  return Apollo.useMutation<\n    CreateMessageMutation,\n    CreateMessageMutationVariables\n  >(CreateMessageDocument, baseOptions);\n}\nexport type CreateMessageMutationHookResult = ReturnType<\n  typeof useCreateMessageMutation\n>;\nexport type CreateMessageMutationResult = Apollo.MutationResult<CreateMessageMutation>;\nexport type CreateMessageMutationOptions = Apollo.BaseMutationOptions<\n  CreateMessageMutation,\n  CreateMessageMutationVariables\n>;\nexport const CreateReviewDocument = gql`\n  mutation CreateReview($review: ReviewInput!) {\n    createReview(review: $review) {\n      response {\n        ...ReviewDetails\n      }\n      errors {\n        name\n        text\n      }\n    }\n  }\n  ${ReviewDetailsFragmentDoc}\n`;\nexport type CreateReviewMutationFn = Apollo.MutationFunction<\n  CreateReviewMutation,\n  CreateReviewMutationVariables\n>;\n\n/**\n * __useCreateReviewMutation__\n *\n * To run a mutation, you first call `useCreateReviewMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateReviewMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createReviewMutation, { data, loading, error }] = useCreateReviewMutation({\n *   variables: {\n *      review: // value for 'review'\n *   },\n * });\n */\nexport function useCreateReviewMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    CreateReviewMutation,\n    CreateReviewMutationVariables\n  >\n) {\n  return Apollo.useMutation<\n    CreateReviewMutation,\n    CreateReviewMutationVariables\n  >(CreateReviewDocument, baseOptions);\n}\nexport type CreateReviewMutationHookResult = ReturnType<\n  typeof useCreateReviewMutation\n>;\nexport type CreateReviewMutationResult = Apollo.MutationResult<CreateReviewMutation>;\nexport type CreateReviewMutationOptions = Apollo.BaseMutationOptions<\n  CreateReviewMutation,\n  CreateReviewMutationVariables\n>;\nexport const FavoriteDocument = gql`\n  query Favorite {\n    me {\n      savedAds {\n        _id\n        postedBy {\n          _id\n        }\n        harvest\n        abv\n        priceFrom\n        priceTo\n        ... on AdWine {\n          wineName\n          litersFrom\n          litersTo\n          metodoProduttivo\n          wine {\n            denominazioneZona\n            regione\n          }\n        }\n        typeAd\n        address {\n          regione\n          provincia\n          comune\n        }\n        activeNegotiations\n        numberViews\n        datePosted\n        isActive\n      }\n    }\n  }\n`;\n\n/**\n * __useFavoriteQuery__\n *\n * To run a query within a React component, call `useFavoriteQuery` and pass it any options that fit your needs.\n * When your component renders, `useFavoriteQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFavoriteQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useFavoriteQuery(\n  baseOptions?: Apollo.QueryHookOptions<FavoriteQuery, FavoriteQueryVariables>\n) {\n  return Apollo.useQuery<FavoriteQuery, FavoriteQueryVariables>(\n    FavoriteDocument,\n    baseOptions\n  );\n}\nexport function useFavoriteLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    FavoriteQuery,\n    FavoriteQueryVariables\n  >\n) {\n  return Apollo.useLazyQuery<FavoriteQuery, FavoriteQueryVariables>(\n    FavoriteDocument,\n    baseOptions\n  );\n}\nexport type FavoriteQueryHookResult = ReturnType<typeof useFavoriteQuery>;\nexport type FavoriteLazyQueryHookResult = ReturnType<\n  typeof useFavoriteLazyQuery\n>;\nexport type FavoriteQueryResult = Apollo.QueryResult<\n  FavoriteQuery,\n  FavoriteQueryVariables\n>;\nexport const LightMeDocument = gql`\n  query LightMe {\n    me {\n      _id\n      firstName\n      address {\n        regione\n        provincia\n        comune\n      }\n    }\n  }\n`;\n\n/**\n * __useLightMeQuery__\n *\n * To run a query within a React component, call `useLightMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useLightMeQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useLightMeQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useLightMeQuery(\n  baseOptions?: Apollo.QueryHookOptions<LightMeQuery, LightMeQueryVariables>\n) {\n  return Apollo.useQuery<LightMeQuery, LightMeQueryVariables>(\n    LightMeDocument,\n    baseOptions\n  );\n}\nexport function useLightMeLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<LightMeQuery, LightMeQueryVariables>\n) {\n  return Apollo.useLazyQuery<LightMeQuery, LightMeQueryVariables>(\n    LightMeDocument,\n    baseOptions\n  );\n}\nexport type LightMeQueryHookResult = ReturnType<typeof useLightMeQuery>;\nexport type LightMeLazyQueryHookResult = ReturnType<typeof useLightMeLazyQuery>;\nexport type LightMeQueryResult = Apollo.QueryResult<\n  LightMeQuery,\n  LightMeQueryVariables\n>;\nexport const MeDocument = gql`\n  query Me {\n    me {\n      _id\n      firstName\n      lastName\n      address {\n        regione\n        provincia\n        comune\n      }\n      ads {\n        _id\n        postedBy {\n          _id\n        }\n        isActive\n      }\n      savedAds {\n        _id\n      }\n      messages {\n        _id\n        isViewed\n        sentBy {\n          _id\n        }\n      }\n      negotiations {\n        _id\n        isConcluded\n        ad {\n          _id\n        }\n      }\n      reviews {\n        _id\n        forUser {\n          _id\n        }\n        rating\n      }\n    }\n  }\n`;\n\n/**\n * __useMeQuery__\n *\n * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMeQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useMeQuery(\n  baseOptions?: Apollo.QueryHookOptions<MeQuery, MeQueryVariables>\n) {\n  return Apollo.useQuery<MeQuery, MeQueryVariables>(MeDocument, baseOptions);\n}\nexport function useMeLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<MeQuery, MeQueryVariables>\n) {\n  return Apollo.useLazyQuery<MeQuery, MeQueryVariables>(\n    MeDocument,\n    baseOptions\n  );\n}\nexport type MeQueryHookResult = ReturnType<typeof useMeQuery>;\nexport type MeLazyQueryHookResult = ReturnType<typeof useMeLazyQuery>;\nexport type MeQueryResult = Apollo.QueryResult<MeQuery, MeQueryVariables>;\nexport const IsUserLoggedInDocument = gql`\n  query IsUserLoggedIn {\n    isLoggedIn @client\n  }\n`;\n\n/**\n * __useIsUserLoggedInQuery__\n *\n * To run a query within a React component, call `useIsUserLoggedInQuery` and pass it any options that fit your needs.\n * When your component renders, `useIsUserLoggedInQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useIsUserLoggedInQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useIsUserLoggedInQuery(\n  baseOptions?: Apollo.QueryHookOptions<\n    IsUserLoggedInQuery,\n    IsUserLoggedInQueryVariables\n  >\n) {\n  return Apollo.useQuery<IsUserLoggedInQuery, IsUserLoggedInQueryVariables>(\n    IsUserLoggedInDocument,\n    baseOptions\n  );\n}\nexport function useIsUserLoggedInLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    IsUserLoggedInQuery,\n    IsUserLoggedInQueryVariables\n  >\n) {\n  return Apollo.useLazyQuery<IsUserLoggedInQuery, IsUserLoggedInQueryVariables>(\n    IsUserLoggedInDocument,\n    baseOptions\n  );\n}\nexport type IsUserLoggedInQueryHookResult = ReturnType<\n  typeof useIsUserLoggedInQuery\n>;\nexport type IsUserLoggedInLazyQueryHookResult = ReturnType<\n  typeof useIsUserLoggedInLazyQuery\n>;\nexport type IsUserLoggedInQueryResult = Apollo.QueryResult<\n  IsUserLoggedInQuery,\n  IsUserLoggedInQueryVariables\n>;\nexport const NotificationDocument = gql`\n  query Notification {\n    notification @client {\n      type @client\n      message @client\n    }\n  }\n`;\n\n/**\n * __useNotificationQuery__\n *\n * To run a query within a React component, call `useNotificationQuery` and pass it any options that fit your needs.\n * When your component renders, `useNotificationQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useNotificationQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useNotificationQuery(\n  baseOptions?: Apollo.QueryHookOptions<\n    NotificationQuery,\n    NotificationQueryVariables\n  >\n) {\n  return Apollo.useQuery<NotificationQuery, NotificationQueryVariables>(\n    NotificationDocument,\n    baseOptions\n  );\n}\nexport function useNotificationLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    NotificationQuery,\n    NotificationQueryVariables\n  >\n) {\n  return Apollo.useLazyQuery<NotificationQuery, NotificationQueryVariables>(\n    NotificationDocument,\n    baseOptions\n  );\n}\nexport type NotificationQueryHookResult = ReturnType<\n  typeof useNotificationQuery\n>;\nexport type NotificationLazyQueryHookResult = ReturnType<\n  typeof useNotificationLazyQuery\n>;\nexport type NotificationQueryResult = Apollo.QueryResult<\n  NotificationQuery,\n  NotificationQueryVariables\n>;\nexport const MyInfoDocument = gql`\n  query MyInfo {\n    myInfo @client {\n      _id\n      firstName\n      lastName\n      address {\n        regione\n        provincia\n        comune\n      }\n      ads {\n        _id\n        postedBy {\n          _id\n        }\n        isActive\n      }\n      savedAds {\n        _id\n      }\n      messages {\n        _id\n        isViewed\n        sentBy {\n          _id\n        }\n      }\n      negotiations {\n        _id\n        isConcluded\n        ad {\n          _id\n        }\n      }\n      reviews {\n        _id\n        rating\n      }\n    }\n  }\n`;\n\n/**\n * __useMyInfoQuery__\n *\n * To run a query within a React component, call `useMyInfoQuery` and pass it any options that fit your needs.\n * When your component renders, `useMyInfoQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMyInfoQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useMyInfoQuery(\n  baseOptions?: Apollo.QueryHookOptions<MyInfoQuery, MyInfoQueryVariables>\n) {\n  return Apollo.useQuery<MyInfoQuery, MyInfoQueryVariables>(\n    MyInfoDocument,\n    baseOptions\n  );\n}\nexport function useMyInfoLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<MyInfoQuery, MyInfoQueryVariables>\n) {\n  return Apollo.useLazyQuery<MyInfoQuery, MyInfoQueryVariables>(\n    MyInfoDocument,\n    baseOptions\n  );\n}\nexport type MyInfoQueryHookResult = ReturnType<typeof useMyInfoQuery>;\nexport type MyInfoLazyQueryHookResult = ReturnType<typeof useMyInfoLazyQuery>;\nexport type MyInfoQueryResult = Apollo.QueryResult<\n  MyInfoQuery,\n  MyInfoQueryVariables\n>;\nexport const WineSearchedDocument = gql`\n  query WineSearched {\n    searchedWine @client {\n      typeAd @client\n      typeProduct @client\n      wineName @client\n      harvest @client\n      abv @client\n      price @client\n      liters @client\n      isPost @client\n    }\n  }\n`;\n\n/**\n * __useWineSearchedQuery__\n *\n * To run a query within a React component, call `useWineSearchedQuery` and pass it any options that fit your needs.\n * When your component renders, `useWineSearchedQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWineSearchedQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useWineSearchedQuery(\n  baseOptions?: Apollo.QueryHookOptions<\n    WineSearchedQuery,\n    WineSearchedQueryVariables\n  >\n) {\n  return Apollo.useQuery<WineSearchedQuery, WineSearchedQueryVariables>(\n    WineSearchedDocument,\n    baseOptions\n  );\n}\nexport function useWineSearchedLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    WineSearchedQuery,\n    WineSearchedQueryVariables\n  >\n) {\n  return Apollo.useLazyQuery<WineSearchedQuery, WineSearchedQueryVariables>(\n    WineSearchedDocument,\n    baseOptions\n  );\n}\nexport type WineSearchedQueryHookResult = ReturnType<\n  typeof useWineSearchedQuery\n>;\nexport type WineSearchedLazyQueryHookResult = ReturnType<\n  typeof useWineSearchedLazyQuery\n>;\nexport type WineSearchedQueryResult = Apollo.QueryResult<\n  WineSearchedQuery,\n  WineSearchedQueryVariables\n>;\nexport const AdsWineDocument = gql`\n  query AdsWine(\n    $typeAd: TypeAd!\n    $typeProduct: TypeProduct!\n    $wineName: String\n    $offset: Int\n    $orderBy: QueryOrderBy\n    $limit: Int\n  ) {\n    ads(\n      typeAd: $typeAd\n      typeProduct: $typeProduct\n      wineName: $wineName\n      offset: $offset\n      orderBy: $orderBy\n      limit: $limit\n    ) {\n      ads {\n        _id\n        postedBy {\n          _id\n        }\n        harvest\n        abv\n        priceFrom\n        priceTo\n        ... on AdWine {\n          wineName\n          litersFrom\n          litersTo\n          metodoProduttivo\n          wine {\n            denominazioneZona\n            regione\n          }\n        }\n        typeAd\n        address {\n          regione\n          provincia\n          comune\n        }\n        activeNegotiations\n        numberViews\n        isActive\n        datePosted\n      }\n      pageCount\n    }\n  }\n`;\n\n/**\n * __useAdsWineQuery__\n *\n * To run a query within a React component, call `useAdsWineQuery` and pass it any options that fit your needs.\n * When your component renders, `useAdsWineQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAdsWineQuery({\n *   variables: {\n *      typeAd: // value for 'typeAd'\n *      typeProduct: // value for 'typeProduct'\n *      wineName: // value for 'wineName'\n *      offset: // value for 'offset'\n *      orderBy: // value for 'orderBy'\n *      limit: // value for 'limit'\n *   },\n * });\n */\nexport function useAdsWineQuery(\n  baseOptions: Apollo.QueryHookOptions<AdsWineQuery, AdsWineQueryVariables>\n) {\n  return Apollo.useQuery<AdsWineQuery, AdsWineQueryVariables>(\n    AdsWineDocument,\n    baseOptions\n  );\n}\nexport function useAdsWineLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<AdsWineQuery, AdsWineQueryVariables>\n) {\n  return Apollo.useLazyQuery<AdsWineQuery, AdsWineQueryVariables>(\n    AdsWineDocument,\n    baseOptions\n  );\n}\nexport type AdsWineQueryHookResult = ReturnType<typeof useAdsWineQuery>;\nexport type AdsWineLazyQueryHookResult = ReturnType<typeof useAdsWineLazyQuery>;\nexport type AdsWineQueryResult = Apollo.QueryResult<\n  AdsWineQuery,\n  AdsWineQueryVariables\n>;\nexport const AdDocument = gql`\n  query Ad($id: ID!) {\n    ad(id: $id) {\n      _id\n      postedBy {\n        _id\n        firstName\n        lastName\n        hideContact\n        email\n        phoneNumber\n      }\n      needsFollowUp\n      harvest\n      abv\n      priceFrom\n      priceTo\n      ... on AdWine {\n        wineName\n        litersFrom\n        litersTo\n        metodoProduttivo\n        wine {\n          denominazioneZona\n          regione\n        }\n      }\n      typeAd\n      address {\n        regione\n        provincia\n        comune\n      }\n      activeNegotiations\n      numberViews\n      datePosted\n      isActive\n    }\n    me {\n      _id\n      negotiations {\n        _id\n        ad {\n          _id\n        }\n      }\n    }\n  }\n`;\n\n/**\n * __useAdQuery__\n *\n * To run a query within a React component, call `useAdQuery` and pass it any options that fit your needs.\n * When your component renders, `useAdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAdQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useAdQuery(\n  baseOptions: Apollo.QueryHookOptions<AdQuery, AdQueryVariables>\n) {\n  return Apollo.useQuery<AdQuery, AdQueryVariables>(AdDocument, baseOptions);\n}\nexport function useAdLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<AdQuery, AdQueryVariables>\n) {\n  return Apollo.useLazyQuery<AdQuery, AdQueryVariables>(\n    AdDocument,\n    baseOptions\n  );\n}\nexport type AdQueryHookResult = ReturnType<typeof useAdQuery>;\nexport type AdLazyQueryHookResult = ReturnType<typeof useAdLazyQuery>;\nexport type AdQueryResult = Apollo.QueryResult<AdQuery, AdQueryVariables>;\nexport const WinesDocument = gql`\n  query Wines {\n    wines {\n      _id\n      denominazioneVino\n      espressioneComunitaria\n      denominazioneZona\n      regione\n    }\n  }\n`;\n\n/**\n * __useWinesQuery__\n *\n * To run a query within a React component, call `useWinesQuery` and pass it any options that fit your needs.\n * When your component renders, `useWinesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWinesQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useWinesQuery(\n  baseOptions?: Apollo.QueryHookOptions<WinesQuery, WinesQueryVariables>\n) {\n  return Apollo.useQuery<WinesQuery, WinesQueryVariables>(\n    WinesDocument,\n    baseOptions\n  );\n}\nexport function useWinesLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<WinesQuery, WinesQueryVariables>\n) {\n  return Apollo.useLazyQuery<WinesQuery, WinesQueryVariables>(\n    WinesDocument,\n    baseOptions\n  );\n}\nexport type WinesQueryHookResult = ReturnType<typeof useWinesQuery>;\nexport type WinesLazyQueryHookResult = ReturnType<typeof useWinesLazyQuery>;\nexport type WinesQueryResult = Apollo.QueryResult<\n  WinesQuery,\n  WinesQueryVariables\n>;\nexport const NegotiationsDocument = gql`\n  query Negotiations(\n    $offset: Int\n    $orderBy: QueryOrderBy\n    $limit: Int\n    $isConcluded: Boolean\n  ) {\n    negotiations(\n      offset: $offset\n      orderBy: $orderBy\n      limit: $limit\n      isConcluded: $isConcluded\n    ) {\n      negotiations {\n        ...NegotiationDetails\n      }\n      pageCount\n    }\n  }\n  ${NegotiationDetailsFragmentDoc}\n`;\n\n/**\n * __useNegotiationsQuery__\n *\n * To run a query within a React component, call `useNegotiationsQuery` and pass it any options that fit your needs.\n * When your component renders, `useNegotiationsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useNegotiationsQuery({\n *   variables: {\n *      offset: // value for 'offset'\n *      orderBy: // value for 'orderBy'\n *      limit: // value for 'limit'\n *      isConcluded: // value for 'isConcluded'\n *   },\n * });\n */\nexport function useNegotiationsQuery(\n  baseOptions?: Apollo.QueryHookOptions<\n    NegotiationsQuery,\n    NegotiationsQueryVariables\n  >\n) {\n  return Apollo.useQuery<NegotiationsQuery, NegotiationsQueryVariables>(\n    NegotiationsDocument,\n    baseOptions\n  );\n}\nexport function useNegotiationsLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    NegotiationsQuery,\n    NegotiationsQueryVariables\n  >\n) {\n  return Apollo.useLazyQuery<NegotiationsQuery, NegotiationsQueryVariables>(\n    NegotiationsDocument,\n    baseOptions\n  );\n}\nexport type NegotiationsQueryHookResult = ReturnType<\n  typeof useNegotiationsQuery\n>;\nexport type NegotiationsLazyQueryHookResult = ReturnType<\n  typeof useNegotiationsLazyQuery\n>;\nexport type NegotiationsQueryResult = Apollo.QueryResult<\n  NegotiationsQuery,\n  NegotiationsQueryVariables\n>;\nexport const NegotiationDocument = gql`\n  query Negotiation($id: ID!) {\n    negotiation(id: $id) {\n      ...NegotiationDetails\n      ad {\n        ... on AdWine {\n          wine {\n            denominazioneZona\n          }\n        }\n        postedBy {\n          hideContact\n          phoneNumber\n          email\n        }\n      }\n    }\n  }\n  ${NegotiationDetailsFragmentDoc}\n`;\n\n/**\n * __useNegotiationQuery__\n *\n * To run a query within a React component, call `useNegotiationQuery` and pass it any options that fit your needs.\n * When your component renders, `useNegotiationQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useNegotiationQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useNegotiationQuery(\n  baseOptions: Apollo.QueryHookOptions<\n    NegotiationQuery,\n    NegotiationQueryVariables\n  >\n) {\n  return Apollo.useQuery<NegotiationQuery, NegotiationQueryVariables>(\n    NegotiationDocument,\n    baseOptions\n  );\n}\nexport function useNegotiationLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    NegotiationQuery,\n    NegotiationQueryVariables\n  >\n) {\n  return Apollo.useLazyQuery<NegotiationQuery, NegotiationQueryVariables>(\n    NegotiationDocument,\n    baseOptions\n  );\n}\nexport type NegotiationQueryHookResult = ReturnType<typeof useNegotiationQuery>;\nexport type NegotiationLazyQueryHookResult = ReturnType<\n  typeof useNegotiationLazyQuery\n>;\nexport type NegotiationQueryResult = Apollo.QueryResult<\n  NegotiationQuery,\n  NegotiationQueryVariables\n>;\nexport const MessagesDocument = gql`\n  query Messages {\n    messages {\n      ...MessageDetails\n    }\n  }\n  ${MessageDetailsFragmentDoc}\n`;\n\n/**\n * __useMessagesQuery__\n *\n * To run a query within a React component, call `useMessagesQuery` and pass it any options that fit your needs.\n * When your component renders, `useMessagesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMessagesQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useMessagesQuery(\n  baseOptions?: Apollo.QueryHookOptions<MessagesQuery, MessagesQueryVariables>\n) {\n  return Apollo.useQuery<MessagesQuery, MessagesQueryVariables>(\n    MessagesDocument,\n    baseOptions\n  );\n}\nexport function useMessagesLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    MessagesQuery,\n    MessagesQueryVariables\n  >\n) {\n  return Apollo.useLazyQuery<MessagesQuery, MessagesQueryVariables>(\n    MessagesDocument,\n    baseOptions\n  );\n}\nexport type MessagesQueryHookResult = ReturnType<typeof useMessagesQuery>;\nexport type MessagesLazyQueryHookResult = ReturnType<\n  typeof useMessagesLazyQuery\n>;\nexport type MessagesQueryResult = Apollo.QueryResult<\n  MessagesQuery,\n  MessagesQueryVariables\n>;\nexport const MessagesNegotiationDocument = gql`\n  query MessagesNegotiation($id: ID!, $offset: Int, $limit: Int) {\n    messagesForNegotiation(negotiation: $id, offset: $offset, limit: $limit) {\n      messages {\n        ...MessageDetails\n      }\n      pageCount\n    }\n  }\n  ${MessageDetailsFragmentDoc}\n`;\n\n/**\n * __useMessagesNegotiationQuery__\n *\n * To run a query within a React component, call `useMessagesNegotiationQuery` and pass it any options that fit your needs.\n * When your component renders, `useMessagesNegotiationQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMessagesNegotiationQuery({\n *   variables: {\n *      id: // value for 'id'\n *      offset: // value for 'offset'\n *      limit: // value for 'limit'\n *   },\n * });\n */\nexport function useMessagesNegotiationQuery(\n  baseOptions: Apollo.QueryHookOptions<\n    MessagesNegotiationQuery,\n    MessagesNegotiationQueryVariables\n  >\n) {\n  return Apollo.useQuery<\n    MessagesNegotiationQuery,\n    MessagesNegotiationQueryVariables\n  >(MessagesNegotiationDocument, baseOptions);\n}\nexport function useMessagesNegotiationLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    MessagesNegotiationQuery,\n    MessagesNegotiationQueryVariables\n  >\n) {\n  return Apollo.useLazyQuery<\n    MessagesNegotiationQuery,\n    MessagesNegotiationQueryVariables\n  >(MessagesNegotiationDocument, baseOptions);\n}\nexport type MessagesNegotiationQueryHookResult = ReturnType<\n  typeof useMessagesNegotiationQuery\n>;\nexport type MessagesNegotiationLazyQueryHookResult = ReturnType<\n  typeof useMessagesNegotiationLazyQuery\n>;\nexport type MessagesNegotiationQueryResult = Apollo.QueryResult<\n  MessagesNegotiationQuery,\n  MessagesNegotiationQueryVariables\n>;\nexport const ReviewsDocument = gql`\n  query Reviews($offset: Int, $orderBy: QueryOrderBy, $limit: Int) {\n    reviews(offset: $offset, orderBy: $orderBy, limit: $limit) {\n      reviews {\n        ...ReviewDetails\n      }\n      pageCount\n    }\n  }\n  ${ReviewDetailsFragmentDoc}\n`;\n\n/**\n * __useReviewsQuery__\n *\n * To run a query within a React component, call `useReviewsQuery` and pass it any options that fit your needs.\n * When your component renders, `useReviewsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useReviewsQuery({\n *   variables: {\n *      offset: // value for 'offset'\n *      orderBy: // value for 'orderBy'\n *      limit: // value for 'limit'\n *   },\n * });\n */\nexport function useReviewsQuery(\n  baseOptions?: Apollo.QueryHookOptions<ReviewsQuery, ReviewsQueryVariables>\n) {\n  return Apollo.useQuery<ReviewsQuery, ReviewsQueryVariables>(\n    ReviewsDocument,\n    baseOptions\n  );\n}\nexport function useReviewsLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<ReviewsQuery, ReviewsQueryVariables>\n) {\n  return Apollo.useLazyQuery<ReviewsQuery, ReviewsQueryVariables>(\n    ReviewsDocument,\n    baseOptions\n  );\n}\nexport type ReviewsQueryHookResult = ReturnType<typeof useReviewsQuery>;\nexport type ReviewsLazyQueryHookResult = ReturnType<typeof useReviewsLazyQuery>;\nexport type ReviewsQueryResult = Apollo.QueryResult<\n  ReviewsQuery,\n  ReviewsQueryVariables\n>;\nexport const ReviewDocument = gql`\n  query Review($id: ID!) {\n    review(id: $id) {\n      ...ReviewDetails\n    }\n  }\n  ${ReviewDetailsFragmentDoc}\n`;\n\n/**\n * __useReviewQuery__\n *\n * To run a query within a React component, call `useReviewQuery` and pass it any options that fit your needs.\n * When your component renders, `useReviewQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useReviewQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useReviewQuery(\n  baseOptions: Apollo.QueryHookOptions<ReviewQuery, ReviewQueryVariables>\n) {\n  return Apollo.useQuery<ReviewQuery, ReviewQueryVariables>(\n    ReviewDocument,\n    baseOptions\n  );\n}\nexport function useReviewLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<ReviewQuery, ReviewQueryVariables>\n) {\n  return Apollo.useLazyQuery<ReviewQuery, ReviewQueryVariables>(\n    ReviewDocument,\n    baseOptions\n  );\n}\nexport type ReviewQueryHookResult = ReturnType<typeof useReviewQuery>;\nexport type ReviewLazyQueryHookResult = ReturnType<typeof useReviewLazyQuery>;\nexport type ReviewQueryResult = Apollo.QueryResult<\n  ReviewQuery,\n  ReviewQueryVariables\n>;\nexport const NegotiationsForAdDocument = gql`\n  query NegotiationsForAd($ad: ID!) {\n    negotiationsForAd(ad: $ad) {\n      _id\n      isConcluded\n      createdBy {\n        _id\n        firstName\n        lastName\n      }\n      dateCreated\n      dateConcluded\n    }\n  }\n`;\n\n/**\n * __useNegotiationsForAdQuery__\n *\n * To run a query within a React component, call `useNegotiationsForAdQuery` and pass it any options that fit your needs.\n * When your component renders, `useNegotiationsForAdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useNegotiationsForAdQuery({\n *   variables: {\n *      ad: // value for 'ad'\n *   },\n * });\n */\nexport function useNegotiationsForAdQuery(\n  baseOptions: Apollo.QueryHookOptions<\n    NegotiationsForAdQuery,\n    NegotiationsForAdQueryVariables\n  >\n) {\n  return Apollo.useQuery<\n    NegotiationsForAdQuery,\n    NegotiationsForAdQueryVariables\n  >(NegotiationsForAdDocument, baseOptions);\n}\nexport function useNegotiationsForAdLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    NegotiationsForAdQuery,\n    NegotiationsForAdQueryVariables\n  >\n) {\n  return Apollo.useLazyQuery<\n    NegotiationsForAdQuery,\n    NegotiationsForAdQueryVariables\n  >(NegotiationsForAdDocument, baseOptions);\n}\nexport type NegotiationsForAdQueryHookResult = ReturnType<\n  typeof useNegotiationsForAdQuery\n>;\nexport type NegotiationsForAdLazyQueryHookResult = ReturnType<\n  typeof useNegotiationsForAdLazyQuery\n>;\nexport type NegotiationsForAdQueryResult = Apollo.QueryResult<\n  NegotiationsForAdQuery,\n  NegotiationsForAdQueryVariables\n>;\nexport const AdsForUserDocument = gql`\n  query AdsForUser(\n    $offset: Int\n    $orderBy: QueryOrderBy\n    $limit: Int\n    $isActive: Boolean\n    $user: ID!\n  ) {\n    adsForUser(\n      offset: $offset\n      orderBy: $orderBy\n      limit: $limit\n      user: $user\n      isActive: $isActive\n    ) {\n      ads {\n        _id\n        postedBy {\n          _id\n          firstName\n          lastName\n          hideContact\n        }\n        needsFollowUp\n        harvest\n        abv\n        priceFrom\n        priceTo\n        ... on AdWine {\n          wineName\n          litersFrom\n          litersTo\n          metodoProduttivo\n          wine {\n            denominazioneZona\n            regione\n          }\n        }\n        typeAd\n        address {\n          regione\n          provincia\n          comune\n        }\n        activeNegotiations\n        numberViews\n        datePosted\n        isActive\n      }\n      pageCount\n    }\n  }\n`;\n\n/**\n * __useAdsForUserQuery__\n *\n * To run a query within a React component, call `useAdsForUserQuery` and pass it any options that fit your needs.\n * When your component renders, `useAdsForUserQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAdsForUserQuery({\n *   variables: {\n *      offset: // value for 'offset'\n *      orderBy: // value for 'orderBy'\n *      limit: // value for 'limit'\n *      isActive: // value for 'isActive'\n *      user: // value for 'user'\n *   },\n * });\n */\nexport function useAdsForUserQuery(\n  baseOptions: Apollo.QueryHookOptions<\n    AdsForUserQuery,\n    AdsForUserQueryVariables\n  >\n) {\n  return Apollo.useQuery<AdsForUserQuery, AdsForUserQueryVariables>(\n    AdsForUserDocument,\n    baseOptions\n  );\n}\nexport function useAdsForUserLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    AdsForUserQuery,\n    AdsForUserQueryVariables\n  >\n) {\n  return Apollo.useLazyQuery<AdsForUserQuery, AdsForUserQueryVariables>(\n    AdsForUserDocument,\n    baseOptions\n  );\n}\nexport type AdsForUserQueryHookResult = ReturnType<typeof useAdsForUserQuery>;\nexport type AdsForUserLazyQueryHookResult = ReturnType<\n  typeof useAdsForUserLazyQuery\n>;\nexport type AdsForUserQueryResult = Apollo.QueryResult<\n  AdsForUserQuery,\n  AdsForUserQueryVariables\n>;\nexport const AdPostedFollowUpDocument = gql`\n  subscription AdPostedFollowUp {\n    adPostedFollowUp {\n      _id\n      postedBy {\n        _id\n      }\n      harvest\n      abv\n      priceFrom\n      priceTo\n      ... on AdWine {\n        wineName\n        litersFrom\n        litersTo\n        metodoProduttivo\n        wine {\n          denominazioneZona\n          regione\n        }\n      }\n      typeAd\n      address {\n        regione\n        provincia\n        comune\n      }\n      activeNegotiations\n      numberViews\n      datePosted\n    }\n  }\n`;\n\n/**\n * __useAdPostedFollowUpSubscription__\n *\n * To run a query within a React component, call `useAdPostedFollowUpSubscription` and pass it any options that fit your needs.\n * When your component renders, `useAdPostedFollowUpSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAdPostedFollowUpSubscription({\n *   variables: {\n *   },\n * });\n */\nexport function useAdPostedFollowUpSubscription(\n  baseOptions?: Apollo.SubscriptionHookOptions<\n    AdPostedFollowUpSubscription,\n    AdPostedFollowUpSubscriptionVariables\n  >\n) {\n  return Apollo.useSubscription<\n    AdPostedFollowUpSubscription,\n    AdPostedFollowUpSubscriptionVariables\n  >(AdPostedFollowUpDocument, baseOptions);\n}\nexport type AdPostedFollowUpSubscriptionHookResult = ReturnType<\n  typeof useAdPostedFollowUpSubscription\n>;\nexport type AdPostedFollowUpSubscriptionResult = Apollo.SubscriptionResult<AdPostedFollowUpSubscription>;\nexport const AdRemovedDocument = gql`\n  subscription AdRemoved {\n    adRemoved {\n      _id\n    }\n  }\n`;\n\n/**\n * __useAdRemovedSubscription__\n *\n * To run a query within a React component, call `useAdRemovedSubscription` and pass it any options that fit your needs.\n * When your component renders, `useAdRemovedSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAdRemovedSubscription({\n *   variables: {\n *   },\n * });\n */\nexport function useAdRemovedSubscription(\n  baseOptions?: Apollo.SubscriptionHookOptions<\n    AdRemovedSubscription,\n    AdRemovedSubscriptionVariables\n  >\n) {\n  return Apollo.useSubscription<\n    AdRemovedSubscription,\n    AdRemovedSubscriptionVariables\n  >(AdRemovedDocument, baseOptions);\n}\nexport type AdRemovedSubscriptionHookResult = ReturnType<\n  typeof useAdRemovedSubscription\n>;\nexport type AdRemovedSubscriptionResult = Apollo.SubscriptionResult<AdRemovedSubscription>;\nexport const MessageSentDocument = gql`\n  subscription MessageSent {\n    messageSent {\n      ...MessageDetails\n    }\n  }\n  ${MessageDetailsFragmentDoc}\n`;\n\n/**\n * __useMessageSentSubscription__\n *\n * To run a query within a React component, call `useMessageSentSubscription` and pass it any options that fit your needs.\n * When your component renders, `useMessageSentSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMessageSentSubscription({\n *   variables: {\n *   },\n * });\n */\nexport function useMessageSentSubscription(\n  baseOptions?: Apollo.SubscriptionHookOptions<\n    MessageSentSubscription,\n    MessageSentSubscriptionVariables\n  >\n) {\n  return Apollo.useSubscription<\n    MessageSentSubscription,\n    MessageSentSubscriptionVariables\n  >(MessageSentDocument, baseOptions);\n}\nexport type MessageSentSubscriptionHookResult = ReturnType<\n  typeof useMessageSentSubscription\n>;\nexport type MessageSentSubscriptionResult = Apollo.SubscriptionResult<MessageSentSubscription>;\nexport const NegotiationCreatedDocument = gql`\n  subscription NegotiationCreated {\n    negotiationCreated {\n      ...NegotiationDetails\n    }\n  }\n  ${NegotiationDetailsFragmentDoc}\n`;\n\n/**\n * __useNegotiationCreatedSubscription__\n *\n * To run a query within a React component, call `useNegotiationCreatedSubscription` and pass it any options that fit your needs.\n * When your component renders, `useNegotiationCreatedSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useNegotiationCreatedSubscription({\n *   variables: {\n *   },\n * });\n */\nexport function useNegotiationCreatedSubscription(\n  baseOptions?: Apollo.SubscriptionHookOptions<\n    NegotiationCreatedSubscription,\n    NegotiationCreatedSubscriptionVariables\n  >\n) {\n  return Apollo.useSubscription<\n    NegotiationCreatedSubscription,\n    NegotiationCreatedSubscriptionVariables\n  >(NegotiationCreatedDocument, baseOptions);\n}\nexport type NegotiationCreatedSubscriptionHookResult = ReturnType<\n  typeof useNegotiationCreatedSubscription\n>;\nexport type NegotiationCreatedSubscriptionResult = Apollo.SubscriptionResult<NegotiationCreatedSubscription>;\nexport const NegotiationClosedDocument = gql`\n  subscription NegotiationClosed {\n    negotiationClosed {\n      _id\n      postedBy {\n        _id\n      }\n      harvest\n      abv\n      priceFrom\n      priceTo\n      ... on AdWine {\n        wineName\n        litersFrom\n        litersTo\n        metodoProduttivo\n        wine {\n          denominazioneZona\n          regione\n        }\n      }\n      typeAd\n      address {\n        regione\n        provincia\n        comune\n      }\n      activeNegotiations\n      numberViews\n      datePosted\n    }\n  }\n`;\n\n/**\n * __useNegotiationClosedSubscription__\n *\n * To run a query within a React component, call `useNegotiationClosedSubscription` and pass it any options that fit your needs.\n * When your component renders, `useNegotiationClosedSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useNegotiationClosedSubscription({\n *   variables: {\n *   },\n * });\n */\nexport function useNegotiationClosedSubscription(\n  baseOptions?: Apollo.SubscriptionHookOptions<\n    NegotiationClosedSubscription,\n    NegotiationClosedSubscriptionVariables\n  >\n) {\n  return Apollo.useSubscription<\n    NegotiationClosedSubscription,\n    NegotiationClosedSubscriptionVariables\n  >(NegotiationClosedDocument, baseOptions);\n}\nexport type NegotiationClosedSubscriptionHookResult = ReturnType<\n  typeof useNegotiationClosedSubscription\n>;\nexport type NegotiationClosedSubscriptionResult = Apollo.SubscriptionResult<NegotiationClosedSubscription>;\nexport const ReviewCreatedDocument = gql`\n  subscription ReviewCreated {\n    reviewCreated {\n      ...ReviewDetails\n    }\n  }\n  ${ReviewDetailsFragmentDoc}\n`;\n\n/**\n * __useReviewCreatedSubscription__\n *\n * To run a query within a React component, call `useReviewCreatedSubscription` and pass it any options that fit your needs.\n * When your component renders, `useReviewCreatedSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useReviewCreatedSubscription({\n *   variables: {\n *   },\n * });\n */\nexport function useReviewCreatedSubscription(\n  baseOptions?: Apollo.SubscriptionHookOptions<\n    ReviewCreatedSubscription,\n    ReviewCreatedSubscriptionVariables\n  >\n) {\n  return Apollo.useSubscription<\n    ReviewCreatedSubscription,\n    ReviewCreatedSubscriptionVariables\n  >(ReviewCreatedDocument, baseOptions);\n}\nexport type ReviewCreatedSubscriptionHookResult = ReturnType<\n  typeof useReviewCreatedSubscription\n>;\nexport type ReviewCreatedSubscriptionResult = Apollo.SubscriptionResult<ReviewCreatedSubscription>;\n","import * as React from 'react';\nimport { useField } from 'formik';\nimport TextFieldMaterial from '@material-ui/core/TextField';\n\ninterface Props {\n  name: string;\n  placeholder: string;\n  label: string;\n  type: string;\n  min?: string;\n  max?: string;\n  step?: string;\n  multiline?: boolean;\n  class?: string;\n  inputTextColor?: string;\n  labelTextColor?: string;\n  underlineColor?: string;\n}\nexport const TextField: React.FC<Props> = (props) => {\n  const [field, { error, touched }] = useField({\n    name: props.name,\n    type: props.type,\n  });\n  return (\n    <TextFieldMaterial\n      {...field}\n      fullWidth\n      InputLabelProps={{\n        style: { color: props.labelTextColor },\n      }}\n      multiline={props.multiline}\n      type={props.type}\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      className={props.class}\n      InputProps={{\n        className: props.inputTextColor,\n        classes: {\n          underline: props.underlineColor,\n        },\n      }}\n      inputProps={{\n        'aria-label': props.name,\n        min: props.min,\n        max: props.max,\n        step: props.step,\n      }}\n      error={error !== undefined && touched}\n      data-testid={props.name}\n      placeholder={props.placeholder}\n      label={props.label}\n      helperText={error}\n    />\n  );\n};\n","import * as React from 'react';\nimport { useField } from 'formik';\nimport IconButton from '@material-ui/core/IconButton';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport FormControl from '@material-ui/core/FormControl';\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\nimport FormHelperText from '@material-ui/core/FormHelperText';\n\nexport const PasswordField: React.FC<{\n  name: string;\n  underlineColor?: string;\n}> = ({ name, underlineColor }) => {\n  const [show, setShow] = React.useState<boolean>(false);\n  const handleClick = (): void => setShow(!show);\n  const [field, { error, touched }] = useField({\n    name: name,\n    type: show ? 'text' : 'password',\n  });\n  const handleMouseDownPassword = (\n    event: React.MouseEvent<HTMLButtonElement>\n  ) => {\n    event.preventDefault();\n  };\n  return (\n    <FormControl error={touched && error !== undefined} fullWidth>\n      <InputLabel\n        style={{ color: '#6d1331' }}\n        htmlFor='standard-adornment-password'\n      >\n        Password\n      </InputLabel>\n      <Input\n        {...field}\n        inputProps={{ 'aria-label': name, 'data-testid': name }}\n        type={show ? 'text' : 'password'}\n        style={{ color: '#6d1331' }}\n        classes={{\n          underline: underlineColor,\n        }}\n        endAdornment={\n          <InputAdornment position='end'>\n            <IconButton\n              aria-label='toggle password visibility'\n              onClick={handleClick}\n              onMouseDown={handleMouseDownPassword}\n            >\n              {show ? <Visibility /> : <VisibilityOff />}\n            </IconButton>\n          </InputAdornment>\n        }\n      />\n      <FormHelperText>{error}</FormHelperText>\n    </FormControl>\n  );\n};\n","/* eslint-disable @typescript-eslint/no-unsafe-call */\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\nimport { InMemoryCache, makeVar } from '@apollo/client';\nimport { Address, TypeAd, TypeProduct } from './generated/graphql';\n// import { offsetLimitPagination } from '@apollo/client/utilities';\nimport _ from 'lodash';\nexport const cache: InMemoryCache = new InMemoryCache({\n  typePolicies: {\n    Query: {\n      fields: {\n        ads: {\n          // Don't cache separate results based on\n          // any of this field's arguments.\n          keyArgs: ['wineName', 'typeProduct', 'typeAd'],\n          merge(existing, incoming, { args }) {\n            const merged = existing ? existing.ads.slice(0) : [];\n            if (args) {\n              // Assume an offset of 0 if args.offset omitted.\n              const { offset = 0 } = args;\n              for (let i = 0; i < incoming.ads.length; ++i) {\n                merged[(offset as number) + i] = incoming.ads[i];\n              }\n            } else {\n              // It's unusual (probably a mistake) for a paginated field not\n              // to receive any arguments, so you might prefer to throw an\n              // exception here, instead of recovering by appending incoming\n              // onto the existing array.\n              // eslint-disable-next-line prefer-spread\n              merged.push.apply(merged, incoming.ads);\n            }\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n            return {\n              __typeName: 'AdsResult',\n              ads: merged,\n              pageCount: incoming.pageCount,\n            };\n          },\n        },\n        adsForUser: {\n          keyArgs: ['user'],\n          merge(existing = [], incoming) {\n            // const merged = existing ? existing.ads.slice(0) : [];\n            // if (args) {\n            //   // Assume an offset of 0 if args.offset omitted.\n            //   const { offset = 0 } = args;\n            //   for (let i = 0; i < incoming.ads.length; ++i) {\n            //     merged[(offset as number) + i] = incoming.ads[i];\n            //   }\n            // } else {\n            //   // It's unusual (probably a mistake) for a paginated field not\n            //   // to receive any arguments, so you might prefer to throw an\n            //   // exception here, instead of recovering by appending incoming\n            //   // onto the existing array.\n            //   // eslint-disable-next-line prefer-spread\n            //   merged.push.apply(merged, incoming.ads);\n            // }\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n            return {\n              __typeName: 'AdsResult',\n              ads: _.unionBy(existing.ads, incoming.ads, '__ref'),\n              pageCount: incoming.pageCount,\n            };\n          },\n        },\n        messagesForNegotiation: {\n          keyArgs: ['negotiation'],\n          merge(existing, incoming, { args }) {\n            const merged = existing ? existing.messages.slice(0) : [];\n            if (args) {\n              // Assume an offset of 0 if args.offset omitted.\n              const { offset = 0 } = args;\n              for (let i = 0; i < incoming.messages.length; ++i) {\n                merged[(offset as number) + i] = incoming.messages[i];\n              }\n            } else {\n              // It's unusual (probably a mistake) for a paginated field not\n              // to receive any arguments, so you might prefer to throw an\n              // exception here, instead of recovering by appending incoming\n              // onto the existing array.\n              // eslint-disable-next-line prefer-spread\n              merged.push.apply(merged, incoming.messages);\n            }\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n            return {\n              __typeName: 'MessageResult',\n              messages: merged,\n              pageCount: incoming.pageCount,\n            };\n          },\n        },\n        negotiations: {\n          keyArgs: false,\n          // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n          //@ts-ignore\n          merge(existing = [], incoming) {\n            // const merged = existing ? existing.negotiations.slice(0) : [];\n            // if (args && !args.isConcluded) {\n            //   // Assume an offset of 0 if args.offset omitted.\n            //   const { offset = 0 } = args;\n            //   for (let i = 0; i < incoming.negotiations.length; ++i) {\n            //     merged[(offset as number) + i] = incoming.negotiations[i];\n            //   }\n            // } else {\n            //   // It's unusual (probably a mistake) for a paginated field not\n            //   // to receive any arguments, so you might prefer to throw an\n            //   // exception here, instead of recovering by appending incoming\n            //   // onto the existing array.\n            //   // eslint-disable-next-line prefer-spread\n            //   console.log(merged, incoming.negotiations);\n            //   const negs = _.unionBy(merged, incoming.negotiations, '__ref');\n            //   console.log(negs  );\n            //   // merged.push(...negs);\n            // }\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n            return {\n              __typeName: 'NegotiationResult',\n              negotiations: _.unionBy(\n                existing.negotiations,\n                incoming.negotiations,\n                '__ref'\n              ),\n              pageCount: incoming.pageCount,\n            };\n          },\n        },\n        isLoggedIn: {\n          read() {\n            return isLoggedInVar();\n          },\n        },\n        notification: {\n          read() {\n            return notification();\n          },\n        },\n        searchedWine: {\n          read() {\n            return searchedWine();\n          },\n        },\n        myInfo: {\n          read() {\n            return myInfo();\n          },\n        },\n      },\n    },\n  },\n});\n\nexport const isLoggedInVar = makeVar<boolean>(\n  !!localStorage.getItem('wineapp-user-token')\n);\n\ntype AddressMyInfo = Omit<Address, 'via'>;\n\nexport const myInfo = makeVar<{\n  _id: string | null;\n  firstName?: string;\n  address?: AddressMyInfo;\n} | null>({ _id: localStorage.getItem('wineapp-user-id') });\n\ntype AlertStatus = 'success' | 'warning' | 'error' | 'info' | undefined;\n\ninterface WineSearched {\n  typeAd: TypeAd;\n  typeProduct: TypeProduct;\n  wineName: string;\n  harvest: number;\n  abv: number;\n  price: number;\n  liters: number;\n  isPost: boolean;\n}\n\nexport const searchedWine = makeVar<WineSearched | undefined>(undefined);\n\ninterface Notification {\n  type: AlertStatus;\n  message: string;\n}\n\nexport const notification = makeVar<Notification | undefined>(undefined);\n","import * as React from 'react';\nimport { isLoggedInVar, myInfo } from '../cache';\nimport { useApolloClient } from '@apollo/client';\n// import Button from '@material-ui/core/Button';\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\nimport { ListItem, ListItemIcon, ListItemText } from '@material-ui/core';\nimport Divider from '@material-ui/core/Divider';\n\nexport const LogoutButton: React.FC = () => {\n  const client = useApolloClient();\n  const handleCLick = () => {\n    client.cache.gc();\n\n    // Remove user details from localStorage.\n    localStorage.removeItem('wineapp-user-token');\n    localStorage.removeItem('wineapp-user-id');\n\n    //localStorage.removeItem('userId');\n\n    // Let other parts of the application that are relying on logged in\n    // state know we're now logged out.\n    isLoggedInVar(false);\n    myInfo(null);\n  };\n  return (\n    <div onClick={handleCLick}>\n      <Divider />\n      <ListItem button>\n        <ListItemIcon data-testid='logout-button'>\n          <ExitToAppIcon />\n        </ListItemIcon>\n        <ListItemText primary='Esci' />\n      </ListItem>\n    </div>\n  );\n};\n","import React from 'react';\nimport Box from '@material-ui/core/Box';\nimport Avatar from '@material-ui/core/Avatar';\nimport SwipeableDrawer from '@material-ui/core/SwipeableDrawer';\nimport List from '@material-ui/core/List';\nimport Divider from '@material-ui/core/Divider';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport AssignmentIcon from '@material-ui/icons/Assignment';\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\nimport Badge from '@material-ui/core/Badge';\nimport StoreIcon from '@material-ui/icons/Store';\nimport Typography from '@material-ui/core/Typography';\nimport { ApolloError } from '@apollo/client';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport { Link as RouterLink } from '@reach/router';\nimport { LogoutButton } from '../../containers/LogoutButton';\nimport { useStyleRating, StyledRating } from '../../utils/styleHook';\nimport Link from '@material-ui/core/Link';\n\nexport interface DrawerData {\n  isLoading: boolean;\n  error?: ApolloError;\n  data?: {\n    numAds?: number | null;\n    numOpenNegs?: number | null;\n    numClosedNegs?: number | null;\n    savedAds?: number | null;\n    name?: string | null;\n    rating?: number | null;\n  };\n}\n\nexport const Drawer: React.FC<{\n  state: boolean;\n  toggleDrawer: () => void;\n  data: DrawerData;\n}> = ({ state, toggleDrawer, data }) => {\n  const classes = useStyleRating();\n  const list = () => (\n    <div\n      className={classes.list}\n      role='presentation'\n      onClick={toggleDrawer}\n      onKeyDown={toggleDrawer}\n    >\n      <Box component='fieldset' mb={3} pt={3} borderColor='transparent'>\n        <Avatar>\n          <AccountCircleIcon />\n        </Avatar>\n        <Typography color='primary' component='h1'>\n          {data.data?.name}\n        </Typography>\n        <Link component={RouterLink} to='/recensioni'>\n          <div className={classes.root}>\n            <StyledRating\n              name='read-only'\n              value={data?.data?.rating}\n              readOnly\n              precision={0.1}\n            />\n            <Box>{data?.data?.rating ? `(${data?.data?.rating})` : null}</Box>\n          </div>\n        </Link>\n      </Box>\n      <Divider />\n      <List>\n        <ListItem button>\n          <ListItemIcon>\n            <AccountCircleIcon />\n          </ListItemIcon>\n          <ListItemText primary='Profilo' />\n        </ListItem>\n        <ListItem\n          button\n          // eslint-disable-next-line react/display-name\n          component={React.forwardRef((itemProps, ref) => (\n            //@ts-expect-error followed MUI docs\n            <RouterLink to={'/creati'} ref={ref} {...itemProps} />\n          ))}\n        >\n          <ListItemIcon>\n            <Badge badgeContent={data.data?.numAds} color='primary'>\n              <AssignmentIcon />\n            </Badge>\n          </ListItemIcon>\n          <ListItemText primary='Annunci pubblicati' />\n        </ListItem>\n        <ListItem\n          button\n          // eslint-disable-next-line react/display-name\n          component={React.forwardRef((itemProps, ref) => (\n            //@ts-expect-error followed MUI docs\n            <RouterLink to={'/trattative'} ref={ref} {...itemProps} />\n          ))}\n        >\n          <ListItemIcon>\n            <Badge badgeContent={data.data?.numOpenNegs} color='primary'>\n              <StoreIcon />\n            </Badge>\n          </ListItemIcon>\n          <ListItemText primary='Trattative in corso' />\n        </ListItem>\n        <ListItem\n          button\n          // eslint-disable-next-line react/display-name\n          component={React.forwardRef((itemProps, ref) => (\n            //@ts-expect-error followed MUI docs\n            <RouterLink to={'/salvati'} ref={ref} {...itemProps} />\n          ))}\n        >\n          <ListItemIcon>\n            <Badge badgeContent={data.data?.savedAds} color='primary'>\n              <FavoriteIcon />\n            </Badge>\n          </ListItemIcon>\n          <ListItemText primary='Annunci salvati' />\n        </ListItem>\n        <Divider />\n        <div className={classes.bottomPush}>\n          <LogoutButton />\n        </div>\n      </List>\n    </div>\n  );\n\n  return (\n    <div>\n      <SwipeableDrawer\n        anchor='left'\n        open={state}\n        onClose={toggleDrawer}\n        onOpen={toggleDrawer}\n      >\n        {list()}\n      </SwipeableDrawer>\n    </div>\n  );\n};\n","import { useApolloClient } from '@apollo/client';\nimport Alert from '@material-ui/lab/Alert';\n\nimport * as React from 'react';\nimport { notification } from '../cache';\nimport { useNotificationQuery } from '../generated/graphql';\n\nexport const Notification: React.FC = () => {\n  const client = useApolloClient();\n  const onClose = () => {\n    notification(undefined);\n    setIsVisible(false);\n    client.cache.gc();\n  };\n  const { data, loading, error } = useNotificationQuery();\n  const [isVisible, setIsVisible] = React.useState(false);\n  const timeoutId = React.useRef<number | undefined>(undefined);\n  React.useEffect(() => {\n    if (data && !loading) {\n      setIsVisible(true);\n    }\n    clearTimeout(timeoutId.current);\n  }, [data, loading]);\n\n  React.useEffect(() => {\n    if (isVisible) {\n      timeoutId.current = window.setTimeout(() => {\n        onClose();\n      }, 10000);\n    }\n  }, [isVisible, data?.notification?.message]);\n\n  if (!isVisible || error) {\n    return null;\n  }\n  return (\n    <Alert severity={data?.notification?.type} onClose={onClose}>\n      {data?.notification?.message}\n    </Alert>\n  );\n};\n","import { Form, Formik } from 'formik';\nimport * as React from 'react';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport { TextField } from '../FormFields/TextField';\nimport { PasswordField } from '../FormFields/PasswordField';\nimport * as Yup from 'yup';\nimport Avatar from '@material-ui/core/Avatar';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport LinkMUI from '@material-ui/core/Link';\nimport Grid from '@material-ui/core/Grid';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport { Link } from '@reach/router';\n\nexport interface LoginData {\n  email: string;\n  password: string;\n}\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  paper: {\n    marginTop: theme.spacing(0),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  input: {\n    color: '#6d1331',\n  },\n  underline: {\n    '&:before': {\n      borderBottom: '1px solid #6d1331',\n    },\n    '&&&&:hover:before': {\n      borderBottom: '2px solid #6d1331',\n    },\n    '&:after': {\n      borderBottom: '3px solid #6d1331',\n    },\n    disabled: {},\n    focused: {},\n    error: {},\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nexport const LoginForm: React.FC<{\n  onSubmit: (values: LoginData) => void;\n  onClose: () => void;\n}> = ({ onSubmit, onClose }) => {\n  const initialValues = { password: '', email: '' };\n  return (\n    <Formik\n      onSubmit={onSubmit}\n      initialValues={initialValues}\n      validationSchema={Yup.object({\n        email: Yup.string().email('Invalid email address').required('Required'),\n        password: Yup.string().required('Required'),\n      })}\n    >\n      {({ isValid, dirty }) => {\n        const classes = useStyles();\n        return (\n          <Container component='main'>\n            <CssBaseline />\n            <div className={classes.paper}>\n              <Avatar className={classes.avatar}>\n                <LockOutlinedIcon />\n              </Avatar>\n              <Typography component='h1' variant='h5'>\n                Sign in\n              </Typography>\n              <Form className={classes.form}>\n                <TextField\n                  name='email'\n                  type='email'\n                  label='Email'\n                  placeholder='Email address'\n                  underlineColor={classes.underline}\n                  labelTextColor={'#6d1331'}\n                  inputTextColor={classes.input}\n                />\n\n                <PasswordField\n                  name='password'\n                  underlineColor={classes.underline}\n                />\n                <Button\n                  //isLoading={isValidating || isSubmitting}\n                  type='submit'\n                  disabled={!dirty || !isValid}\n                  fullWidth\n                  variant='contained'\n                  color='primary'\n                  className={classes.submit}\n                >\n                  Submit\n                </Button>\n                <Grid container>\n                  <Grid item xs>\n                    <LinkMUI href='#' variant='body2'>\n                      Forgot password?\n                    </LinkMUI>\n                  </Grid>\n                  <Grid item>\n                    <LinkMUI\n                      component={Link}\n                      to='/signup'\n                      variant='body2'\n                      onClick={onClose}\n                    >\n                      {\"Don't have an account? Sign Up\"}\n                    </LinkMUI>\n                  </Grid>\n                </Grid>\n              </Form>\n            </div>\n          </Container>\n        );\n      }}\n    </Formik>\n  );\n};\n","import * as React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport { LoginForm } from './LoginForm';\nexport interface LoginData {\n  email: string;\n  password: string;\n}\nexport const LoginModal: React.FC<{\n  onSubmit: (values: LoginData) => void;\n  handleClose: () => void;\n  open: boolean;\n}> = ({ handleClose, open, onSubmit }) => {\n  return (\n    <Dialog\n      open={open}\n      onClose={handleClose}\n      aria-labelledby='form-dialog-title'\n    >\n      <DialogContent>\n        <LoginForm onSubmit={onSubmit} onClose={handleClose} />\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={handleClose} color='primary'>\n          Cancel\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n","import * as React from 'react';\nimport {\n  MeQuery,\n  Exact,\n  useIsUserLoggedInQuery,\n} from '../../generated/graphql';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport { Drawer, DrawerData } from './Drawer';\nimport { Notification } from '../Notification';\nimport ChatOutlinedIcon from '@material-ui/icons/ChatOutlined';\nimport { LoginModal } from '../LoginModal';\nimport Link from '@material-ui/core/Link';\nimport { Link as RouterLink, navigate } from '@reach/router';\nimport Box from '@material-ui/core/Box';\nimport { LazyQueryResult } from '@apollo/client';\nimport { Badge } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    title: {\n      flexGrow: 1,\n    },\n  })\n);\n\nexport const HeaderBar: React.FC<{\n  meQueryResult: LazyQueryResult<\n    MeQuery,\n    Exact<{\n      [key: string]: never;\n    }>\n  >;\n  onSubmitLogin: ({\n    email,\n    password,\n  }: {\n    email: string;\n    password: string;\n  }) => Promise<void>;\n}> = ({ meQueryResult, onSubmitLogin }) => {\n  const classes = useStyles();\n  const [state, setState] = React.useState(false);\n  const toggleDrawer = () => {\n    setState(!state);\n  };\n  const [openModal, setOpenModal] = React.useState(false);\n  const badgeNumber = meQueryResult.data?.me?.messages?.length\n    ? meQueryResult.data?.me?.messages?.filter(\n        (message) =>\n          !message.isViewed &&\n          message.sentBy._id !== meQueryResult.data?.me?._id\n      ).length\n    : 0;\n  const handleClickOpen = () => {\n    setOpenModal(true);\n  };\n\n  const handleClose = () => {\n    setOpenModal(false);\n  };\n  const onSubmit = async ({\n    email,\n    password,\n  }: {\n    email: string;\n    password: string;\n  }) => {\n    await onSubmitLogin({\n      email: email,\n      password: password,\n    });\n    handleClose();\n  };\n  const loggedUser = useIsUserLoggedInQuery();\n  const myReviews = meQueryResult.data?.me?.reviews?.length\n    ? meQueryResult.data?.me?.reviews?.filter(\n        (r) => r.forUser._id === meQueryResult.data?.me?._id\n      )\n    : null;\n  const reducedReview = myReviews?.length\n    ? //@ts-expect-error I didn't understand the error????\n      myReviews.reduce((acc, val) => ({\n        rating: val.rating + acc.rating,\n      }))\n    : null;\n\n  const rating = reducedReview\n    ? reducedReview.rating / (myReviews?.length as number)\n    : null;\n  const drawerData: DrawerData = {\n    isLoading: meQueryResult.loading,\n    error: meQueryResult.error,\n    data: {\n      numAds: meQueryResult.data?.me?.ads?.length,\n      numOpenNegs: meQueryResult.data?.me?.negotiations?.filter(\n        (neg) => neg && !neg.isConcluded\n      ).length,\n      numClosedNegs: meQueryResult.data?.me?.negotiations?.filter(\n        (neg) => neg && neg.isConcluded\n      ).length,\n      savedAds: meQueryResult.data?.me?.savedAds?.length,\n      name: meQueryResult.data?.me?.firstName,\n      // eslint-disable-next-line @typescript-eslint/restrict-plus-operands\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      //@ts-ignore\n      rating,\n    },\n  };\n\n  const SigninButton = () => {\n    if (loggedUser.data?.isLoggedIn) {\n      return (\n        <IconButton onClick={() => navigate('/messaggi')}>\n          <Badge badgeContent={badgeNumber} color='secondary'>\n            <ChatOutlinedIcon fontSize='large' style={{ color: '#fff' }} />\n          </Badge>\n        </IconButton>\n      );\n    }\n    return <Button onClick={handleClickOpen}>Log in</Button>;\n  };\n\n  const MenuButton = () => (\n    <IconButton\n      edge='start'\n      className={classes.menuButton}\n      color='inherit'\n      aria-label='menu'\n      onClick={toggleDrawer}\n    >\n      <MenuIcon />\n    </IconButton>\n  );\n  return (\n    <div className={classes.root}>\n      <AppBar position='static'>\n        <Toolbar>\n          {loggedUser.data?.isLoggedIn ? MenuButton() : null}\n          <Drawer state={state} toggleDrawer={toggleDrawer} data={drawerData} />\n          <Link\n            className={classes.title}\n            component={RouterLink}\n            to='/'\n            style={{ textDecoration: 'none' }}\n          >\n            <Box>\n              <Typography color='textSecondary' variant='h4'>\n                LOGO\n              </Typography>\n            </Box>\n          </Link>\n          <SigninButton />\n        </Toolbar>\n      </AppBar>\n      <Notification />\n      <LoginModal\n        handleClose={handleClose}\n        open={openModal}\n        onSubmit={onSubmit}\n      />\n    </div>\n  );\n};\n","import { useApolloClient } from '@apollo/client';\nimport * as React from 'react';\nimport { isLoggedInVar, myInfo, notification } from '../../cache';\nimport {\n  useNegotiationCreatedSubscription,\n  useNegotiationClosedSubscription,\n  useAdPostedFollowUpSubscription,\n  useMessageSentSubscription,\n  useIsUserLoggedInQuery,\n  useReviewCreatedSubscription,\n  useLoginMutation,\n  useMeLazyQuery,\n  Address,\n} from '../../generated/graphql';\nimport {\n  updateCacheMessages,\n  updateCacheMessagesAdmin,\n  updateCacheNegotiations,\n  updateCacheReview,\n} from '../../utils/updateCache';\nimport { HeaderBar } from './AppBar';\n\nexport const Header: React.FC = () => {\n  const loggedUser = useIsUserLoggedInQuery();\n  const client = useApolloClient();\n  const [lazyQuery, result] = useMeLazyQuery({\n    onCompleted: (data) => {\n      if (data.me) {\n        myInfo({\n          ...data.me,\n        });\n      }\n    },\n    onError: (error) => {\n      notification({\n        type: 'error',\n        message: error.message,\n      });\n    },\n  });\n  React.useEffect(() => {\n    if (loggedUser.data?.isLoggedIn) {\n      lazyQuery();\n    }\n  }, [loggedUser.data?.isLoggedIn]);\n\n  const [loginMutation] = useLoginMutation({\n    onError: (error) =>\n      notification({\n        type: 'error',\n        message: error.message,\n      }),\n    onCompleted: ({ login }) => {\n      if (login?.errors?.length === 0) {\n        localStorage.setItem(\n          'wineapp-user-token',\n          login?.response?.token as string\n        );\n        localStorage.setItem(\n          'wineapp-user-id',\n          login?.response?.user._id as string\n        );\n        isLoggedInVar(true);\n        notification({\n          type: 'success',\n          message: 'welcome back',\n        });\n        myInfo({\n          _id: login.response?.user._id as string,\n          firstName: login.response?.user.firstName as string,\n          address: login.response?.user.address as Address,\n        });\n      }\n      if (login?.errors?.length) {\n        notification({\n          type: 'error',\n          message: 'errore',\n        });\n      }\n    },\n  });\n  const onSubmitLogin = async ({\n    email,\n    password,\n  }: {\n    email: string;\n    password: string;\n  }) => {\n    await loginMutation({\n      variables: {\n        email: email,\n        password: password,\n      },\n    });\n  };\n  useNegotiationCreatedSubscription({\n    onSubscriptionData: ({ subscriptionData }) => {\n      notification({\n        type: 'success',\n        message: 'qualcuno ha aperto una trattativa con te',\n      });\n\n      updateCacheNegotiations(\n        client,\n        subscriptionData.data?.negotiationCreated\n      );\n    },\n  });\n  useNegotiationClosedSubscription({\n    onSubscriptionData: ({ subscriptionData }) => {\n      updateCacheMessagesAdmin(\n        client,\n        subscriptionData.data?.negotiationClosed\n      );\n      const wineName =\n        subscriptionData.data?.negotiationClosed.__typename === 'AdWine' &&\n        subscriptionData.data?.negotiationClosed.wineName;\n      notification({\n        type: 'info',\n        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n        message: `Una tua trattiva e stata dichiarata chiusa per il vino ${wineName}`,\n      });\n    },\n  });\n  useAdPostedFollowUpSubscription({\n    onSubscriptionData: () => {\n      notification({\n        type: 'info',\n        message: 'Qualcuno ha pubblicato un annuncio che ti interessa',\n      });\n    },\n  });\n  useMessageSentSubscription({\n    onSubscriptionData: ({ subscriptionData }) => {\n      updateCacheMessages(client, subscriptionData.data?.messageSent);\n    },\n  });\n  useReviewCreatedSubscription({\n    onSubscriptionData: ({ subscriptionData }) => {\n      const review = subscriptionData.data?.reviewCreated || null;\n      if (!review) return;\n      notification({\n        type: 'info',\n        message: `La cantina ${review.createdBy.firstName} ti ha lasciato una recensione`,\n      });\n      updateCacheReview(client, review);\n    },\n  });\n  return <HeaderBar meQueryResult={result} onSubmitLogin={onSubmitLogin} />;\n};\n","import * as React from 'react';\nimport { RouteComponentProps, Router } from '@reach/router';\nimport { Header } from '../components/Navigation';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nfunction createLazyRoute<T extends RouteComponentProps>(\n  RouteComponent: React.ComponentType<T>\n) {\n  // eslint-disable-next-line react/display-name\n  return function (props: T) {\n    return (\n      <React.Suspense fallback={<div>loading</div>}>\n        <RouteComponent {...props} />\n      </React.Suspense>\n    );\n  };\n}\n\nconst SignUp = createLazyRoute(React.lazy(() => import('./Signup')));\nconst Home = createLazyRoute(React.lazy(() => import('./Home')));\nconst Buy = createLazyRoute(React.lazy(() => import('./BuySell')));\nconst Ads = createLazyRoute(React.lazy(() => import('./Ads')));\nconst Ad = createLazyRoute(React.lazy(() => import('./Ad')));\nconst MyAds = createLazyRoute(React.lazy(() => import('./MyAds')));\nconst Negotiations = createLazyRoute(\n  React.lazy(() => import('./Negotiations'))\n);\nconst Negotiation = createLazyRoute(React.lazy(() => import('./Negotiation')));\nconst Messages = createLazyRoute(React.lazy(() => import('./Messages')));\nconst Message = createLazyRoute(React.lazy(() => import('./Message')));\nconst SavedAds = createLazyRoute(React.lazy(() => import('./SavedAds')));\nconst Reviews = createLazyRoute(React.lazy(() => import('./Reviews')));\n\nexport const Pages: React.FC = () => {\n  return (\n    <>\n      <CssBaseline />\n      <Header />\n      <main>\n        <Router primary={false} component={React.Fragment}>\n          <Home path='/' />\n          {['/buy', '/sell'].map((path) => (\n            <Buy key={path} path={path} />\n          ))}\n          <Ads path='/annunci' />\n          <Ad path='/annunci/:id' />\n          <Messages path='/messaggi' />\n          <Message path='/messaggi/:id' />\n          <MyAds path='/creati' />\n\n          <Negotiations path='/trattative' />\n          <Negotiation path='/trattative/:id' />\n          <Reviews path='/recensioni' />\n          {/* <Profile path='/profilo' /> */}\n          <SavedAds path='/salvati' />\n          <SignUp path='/signup' />\n        </Router>\n      </main>\n    </>\n  );\n};\n","/* eslint-disable @typescript-eslint/no-unsafe-assignment */\nimport * as React from 'react';\n\nimport { ThemeProvider } from '@material-ui/core/styles';\n\n//import { ColorModeSwitcher } from './ColorModeSwitcher';\nimport { Pages } from './pages';\n//import { Login } from './pages/Login';\n//\nimport { unstable_createMuiStrictModeTheme as createMuiTheme } from '@material-ui/core';\n\nconst theme = createMuiTheme({\n  typography: {\n    fontFamily: ['Montserrat'].join(','),\n  },\n  palette: {\n    primary: {\n      main: '#6d1331',\n      light: '#8a425a5',\n      dark: '#4c0d22',\n    },\n    secondary: {\n      main: '#707070',\n      light: '#8c8c8c',\n      dark: '#4e4e4e',\n    },\n    text: {\n      primary: '#000',\n      secondary: '#fff',\n    },\n  },\n});\n\nexport const App: React.FC = () => (\n  <ThemeProvider theme={theme}>\n    <Pages />\n  </ThemeProvider>\n);\n","/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\nimport { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    void import('web-vitals').then(\n      ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n        getCLS(onPerfEntry);\n        getFID(onPerfEntry);\n        getFCP(onPerfEntry);\n        getLCP(onPerfEntry);\n        getTTFB(onPerfEntry);\n      }\n    );\n  }\n};\n\nexport default reportWebVitals;\n","/* eslint-disable @typescript-eslint/no-unsafe-call */\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\nimport * as React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {\n  ApolloClient,\n  ApolloProvider,\n  HttpLink,\n  split,\n  gql,\n  NormalizedCacheObject,\n} from '@apollo/client';\nimport { setContext } from '@apollo/link-context';\nimport { getMainDefinition } from '@apollo/client/utilities';\nimport { WebSocketLink } from '@apollo/link-ws';\nimport { cache } from './cache';\n\nexport const typeDefs = gql`\n  enum AlertStatus {\n    success\n    warning\n    info\n    error\n  }\n\n  type WineSearched {\n    typeAd: TypeAd\n    typeProduct: TypeProduct\n    wineName: String\n    harvest: Int\n    abv: Float\n    price: Float\n    liters: Int\n    isPost: Boolean\n  }\n\n  type Notification {\n    type: AlertStatus\n    message: String\n  }\n  extend type Query {\n    isLoggedIn: Boolean!\n    notification: Notification\n    searchedWine: WineSearched\n    myInfo: User\n  }\n`;\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem('wineapp-user-token');\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? token : null,\n    },\n  };\n});\n\nconst httpLink = new HttpLink({\n  uri: 'https://vast-spire-83171.herokuapp.com//graphql',\n});\n\nconst wsLink = new WebSocketLink({\n  uri: `wss://vast-spire-83171.herokuapp.com//graphql`,\n  options: {\n    reconnect: true,\n    connectionParams: {\n      authToken: localStorage.getItem('wineapp-user-token'),\n    },\n  },\n});\n\nconst splitLink = split(\n  ({ query }) => {\n    const definition = getMainDefinition(query);\n    return (\n      definition.kind === 'OperationDefinition' &&\n      definition.operation === 'subscription'\n    );\n  },\n  wsLink,\n  authLink.concat(httpLink)\n);\n\nconst client: ApolloClient<NormalizedCacheObject> = new ApolloClient({\n  cache,\n  link: splitLink,\n  typeDefs,\n  resolvers: {},\n});\n\nReactDOM.render(\n  // <React.StrictMode>\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","/* eslint-disable @typescript-eslint/no-unsafe-assignment */\n/* eslint-disable @typescript-eslint/ban-types */\nimport { ApolloCache, ApolloClient, MutationResult } from '@apollo/client';\nimport _ from 'lodash';\nimport { DeepExtractType } from 'ts-deep-extract-types';\nimport { myInfo, searchedWine } from '../cache';\nimport {\n  AdsWineDocument,\n  AdWine,\n  CreateAdWineMutation,\n  CreateMessageMutation,\n  CreateNegotiationMutation,\n  CreateReviewMutation,\n  MeDocument,\n  Message,\n  MessagesDocument,\n  MessagesNegotiationDocument,\n  Negotiation,\n  NegotiationsDocument,\n  Review,\n  User,\n} from '../generated/graphql';\n\ninterface IAds {\n  ads: Array<AdWine>;\n  pageCount: number;\n}\n\ninterface ICachedDataAds {\n  ads: IAds;\n}\n\nexport interface ICachedMe {\n  me: User;\n}\n\nexport interface ICachedDataNegotiations {\n  negotiations: {\n    negotiations: Negotiation[];\n    pageCount: number;\n  };\n}\n\nexport interface ICachedMessages {\n  messages: Message[];\n}\n\nexport interface ICachedMessagesNegs {\n  messagesForNegotiation: {\n    messages: Message[];\n    pageCount: number;\n  };\n}\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport const updateCacheNegotiations = (\n  client: ApolloClient<{}> | ApolloCache<CreateNegotiationMutation>,\n  negotiation: MutationResult<\n    DeepExtractType<\n      CreateNegotiationMutation,\n      ['createNegotiation']\n    >['response']\n  >['data']\n): void => {\n  const cachedDataMeLocal: ICachedMe | null = _.cloneDeep(\n    //@ts-expect-error error\n    client.readQuery({\n      query: MeDocument,\n      variables: {},\n    })\n  );\n  const cachedDataNegotiationsLocal: ICachedDataNegotiations | null = _.cloneDeep(\n    //@ts-expect-error error\n    client.readQuery({\n      query: NegotiationsDocument,\n      variables: {},\n    })\n  );\n\n  cachedDataMeLocal?.me.negotiations?.push(negotiation as Negotiation);\n\n  //@ts-expect-error error\n  client.writeQuery({\n    query: MeDocument,\n    variables: {},\n    data: cachedDataMeLocal,\n  });\n\n  if (!cachedDataNegotiationsLocal) return;\n  cachedDataNegotiationsLocal.negotiations.negotiations.push(\n    negotiation as Negotiation\n  );\n  cachedDataNegotiationsLocal.negotiations.pageCount += 1;\n  //@ts-expect-error error\n  client.writeQuery({\n    query: NegotiationsDocument,\n    variables: {},\n    data: cachedDataNegotiationsLocal,\n  });\n};\n\nexport const updateCacheMessagesAdmin = (\n  client: ApolloClient<{}>,\n  negotiation: MutationResult<\n    DeepExtractType<CreateAdWineMutation, ['createAd']>['response']\n  >['data']\n): void => {\n  const cachedDataMessagesLocal: ICachedMessages | null = _.cloneDeep(\n    client.readQuery({\n      query: MessagesDocument,\n    })\n  );\n  const me = myInfo();\n  cachedDataMessagesLocal?.messages.push({\n    isViewed: false,\n    content: 'placeholder',\n    negotiation: { _id: '605bd4166edd1f04a7764462' } as Negotiation,\n    _id: 'placeholder',\n    sentTo: { _id: me?._id } as User,\n    sentBy: { firstName: 'Amministratore' } as User,\n    dateSent: new Date().toISOString(),\n  });\n  client.writeQuery({\n    query: MessagesDocument,\n    data: cachedDataMessagesLocal,\n  });\n\n  const cachedDataMeLocal: ICachedMe | null = _.cloneDeep(\n    client.readQuery({\n      query: MeDocument,\n    })\n  );\n  const indexNegToClose = cachedDataMeLocal?.me.negotiations?.findIndex(\n    (neg) => neg.ad._id === negotiation?._id\n  );\n  if (\n    indexNegToClose &&\n    indexNegToClose >= 0 &&\n    cachedDataMeLocal?.me.negotiations\n  ) {\n    cachedDataMeLocal.me.negotiations[indexNegToClose].isConcluded = true;\n  }\n  client.writeQuery({\n    query: MeDocument,\n    data: cachedDataMeLocal,\n  });\n  const cachedDataNegotiationsLocal: ICachedDataNegotiations | null = _.cloneDeep(\n    client.readQuery({\n      query: NegotiationsDocument,\n    })\n  );\n  if (!cachedDataNegotiationsLocal) return;\n  cachedDataNegotiationsLocal?.negotiations.negotiations.filter(\n    (neg) => neg.ad._id !== negotiation?._id\n  );\n  client.writeQuery({\n    query: NegotiationsDocument,\n    data: cachedDataNegotiationsLocal,\n  });\n};\n\nexport const updateCacheAd = (\n  cache: ApolloCache<CreateAdWineMutation>,\n  ad: MutationResult<\n    DeepExtractType<CreateAdWineMutation, ['createAd']>['response']\n  >['data']\n): void => {\n  const searchedWineCache = searchedWine();\n  const variablesCacheUpdate = {\n    wineName: searchedWineCache?.wineName,\n    typeProduct: searchedWineCache?.typeProduct,\n    typeAd: searchedWineCache?.typeAd,\n  };\n  const cachedDataAdsLocal: ICachedDataAds | null = _.cloneDeep(\n    cache.readQuery({\n      query: AdsWineDocument,\n      variables: variablesCacheUpdate,\n    })\n  );\n  const cachedDataMeLocal: ICachedMe | null = _.cloneDeep(\n    cache.readQuery({\n      query: MeDocument,\n    })\n  );\n\n  cachedDataMeLocal?.me.ads?.push(ad as AdWine);\n\n  cache.writeQuery({\n    query: MeDocument,\n    data: cachedDataMeLocal,\n  });\n\n  if (!cachedDataAdsLocal) return;\n  cachedDataAdsLocal.ads.ads.push(ad as AdWine);\n  cachedDataAdsLocal.ads.pageCount += 1;\n  cache.writeQuery({\n    query: AdsWineDocument,\n    variables: variablesCacheUpdate,\n    data: cachedDataAdsLocal,\n  });\n};\n\nexport const updateCacheMessages = (\n  client: ApolloClient<object>,\n  message: MutationResult<\n    DeepExtractType<CreateMessageMutation, ['createMessage']>['response']\n  >['data']\n): void => {\n  const cachedDataMeLocal: ICachedMe | null = _.cloneDeep(\n    client.readQuery({\n      query: MeDocument,\n    })\n  );\n  cachedDataMeLocal?.me.messages?.push(message as Message);\n  client.writeQuery({\n    query: MeDocument,\n    data: cachedDataMeLocal,\n  });\n  const cachedMessagesLocal: ICachedMessages | null = _.cloneDeep(\n    client.readQuery({\n      query: MessagesDocument,\n    })\n  );\n  cachedMessagesLocal?.messages.push(message as Message);\n  client.writeQuery({\n    query: MessagesDocument,\n    variables: { id: message?.negotiation._id },\n    data: cachedMessagesLocal,\n  });\n  const cachedMessagesNegotiationsLocal: ICachedMessagesNegs | null = _.cloneDeep(\n    client.readQuery({\n      query: MessagesNegotiationDocument,\n      variables: { id: message?.negotiation._id },\n    })\n  );\n  cachedMessagesNegotiationsLocal?.messagesForNegotiation.messages.unshift(\n    message as Message\n  );\n  client.writeQuery({\n    query: MessagesNegotiationDocument,\n    variables: { id: message?.negotiation._id },\n    data: cachedMessagesNegotiationsLocal,\n  });\n};\n\nexport const updateCacheReview = (\n  client: ApolloClient<object>,\n  review: MutationResult<\n    DeepExtractType<CreateReviewMutation, ['createReview']>['response']\n  >['data']\n) => {\n  const cachedDataMeLocal: ICachedMe | null = _.cloneDeep(\n    client.readQuery({\n      query: MeDocument,\n    })\n  );\n  cachedDataMeLocal?.me.reviews?.push(review as Review);\n  client.writeQuery({\n    query: MeDocument,\n    data: cachedDataMeLocal,\n  });\n};\n"],"sourceRoot":""}